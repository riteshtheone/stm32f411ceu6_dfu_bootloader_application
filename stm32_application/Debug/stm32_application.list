
stm32_application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084ec  080081a0  080081a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0801068c  0801068c  0000968c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010798  08010798  0000a158  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010798  08010798  00009798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080107a0  080107a0  0000a158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080107a0  080107a0  000097a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080107a4  080107a4  000097a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  080107a8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d9c  20000158  08010900  0000a158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ef4  08010900  0000aef4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011922  00000000  00000000  0000a188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003387  00000000  00000000  0001baaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  0001ee38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad6  00000000  00000000  0001fcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019593  00000000  00000000  00020786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e69  00000000  00000000  00039d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bd17  00000000  00000000  0004db82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9899  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004190  00000000  00000000  000d98dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000dda6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081a0 <__do_global_dtors_aux>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4c05      	ldr	r4, [pc, #20]	@ (80081b8 <__do_global_dtors_aux+0x18>)
 80081a4:	7823      	ldrb	r3, [r4, #0]
 80081a6:	b933      	cbnz	r3, 80081b6 <__do_global_dtors_aux+0x16>
 80081a8:	4b04      	ldr	r3, [pc, #16]	@ (80081bc <__do_global_dtors_aux+0x1c>)
 80081aa:	b113      	cbz	r3, 80081b2 <__do_global_dtors_aux+0x12>
 80081ac:	4804      	ldr	r0, [pc, #16]	@ (80081c0 <__do_global_dtors_aux+0x20>)
 80081ae:	f3af 8000 	nop.w
 80081b2:	2301      	movs	r3, #1
 80081b4:	7023      	strb	r3, [r4, #0]
 80081b6:	bd10      	pop	{r4, pc}
 80081b8:	20000158 	.word	0x20000158
 80081bc:	00000000 	.word	0x00000000
 80081c0:	08010674 	.word	0x08010674

080081c4 <frame_dummy>:
 80081c4:	b508      	push	{r3, lr}
 80081c6:	4b03      	ldr	r3, [pc, #12]	@ (80081d4 <frame_dummy+0x10>)
 80081c8:	b11b      	cbz	r3, 80081d2 <frame_dummy+0xe>
 80081ca:	4903      	ldr	r1, [pc, #12]	@ (80081d8 <frame_dummy+0x14>)
 80081cc:	4803      	ldr	r0, [pc, #12]	@ (80081dc <frame_dummy+0x18>)
 80081ce:	f3af 8000 	nop.w
 80081d2:	bd08      	pop	{r3, pc}
 80081d4:	00000000 	.word	0x00000000
 80081d8:	2000015c 	.word	0x2000015c
 80081dc:	08010674 	.word	0x08010674

080081e0 <memchr>:
 80081e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80081e4:	2a10      	cmp	r2, #16
 80081e6:	db2b      	blt.n	8008240 <memchr+0x60>
 80081e8:	f010 0f07 	tst.w	r0, #7
 80081ec:	d008      	beq.n	8008200 <memchr+0x20>
 80081ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081f2:	3a01      	subs	r2, #1
 80081f4:	428b      	cmp	r3, r1
 80081f6:	d02d      	beq.n	8008254 <memchr+0x74>
 80081f8:	f010 0f07 	tst.w	r0, #7
 80081fc:	b342      	cbz	r2, 8008250 <memchr+0x70>
 80081fe:	d1f6      	bne.n	80081ee <memchr+0xe>
 8008200:	b4f0      	push	{r4, r5, r6, r7}
 8008202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800820a:	f022 0407 	bic.w	r4, r2, #7
 800820e:	f07f 0700 	mvns.w	r7, #0
 8008212:	2300      	movs	r3, #0
 8008214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008218:	3c08      	subs	r4, #8
 800821a:	ea85 0501 	eor.w	r5, r5, r1
 800821e:	ea86 0601 	eor.w	r6, r6, r1
 8008222:	fa85 f547 	uadd8	r5, r5, r7
 8008226:	faa3 f587 	sel	r5, r3, r7
 800822a:	fa86 f647 	uadd8	r6, r6, r7
 800822e:	faa5 f687 	sel	r6, r5, r7
 8008232:	b98e      	cbnz	r6, 8008258 <memchr+0x78>
 8008234:	d1ee      	bne.n	8008214 <memchr+0x34>
 8008236:	bcf0      	pop	{r4, r5, r6, r7}
 8008238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800823c:	f002 0207 	and.w	r2, r2, #7
 8008240:	b132      	cbz	r2, 8008250 <memchr+0x70>
 8008242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008246:	3a01      	subs	r2, #1
 8008248:	ea83 0301 	eor.w	r3, r3, r1
 800824c:	b113      	cbz	r3, 8008254 <memchr+0x74>
 800824e:	d1f8      	bne.n	8008242 <memchr+0x62>
 8008250:	2000      	movs	r0, #0
 8008252:	4770      	bx	lr
 8008254:	3801      	subs	r0, #1
 8008256:	4770      	bx	lr
 8008258:	2d00      	cmp	r5, #0
 800825a:	bf06      	itte	eq
 800825c:	4635      	moveq	r5, r6
 800825e:	3803      	subeq	r0, #3
 8008260:	3807      	subne	r0, #7
 8008262:	f015 0f01 	tst.w	r5, #1
 8008266:	d107      	bne.n	8008278 <memchr+0x98>
 8008268:	3001      	adds	r0, #1
 800826a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800826e:	bf02      	ittt	eq
 8008270:	3001      	addeq	r0, #1
 8008272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8008276:	3001      	addeq	r0, #1
 8008278:	bcf0      	pop	{r4, r5, r6, r7}
 800827a:	3801      	subs	r0, #1
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <__aeabi_uldivmod>:
 8008280:	b953      	cbnz	r3, 8008298 <__aeabi_uldivmod+0x18>
 8008282:	b94a      	cbnz	r2, 8008298 <__aeabi_uldivmod+0x18>
 8008284:	2900      	cmp	r1, #0
 8008286:	bf08      	it	eq
 8008288:	2800      	cmpeq	r0, #0
 800828a:	bf1c      	itt	ne
 800828c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8008290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8008294:	f000 b988 	b.w	80085a8 <__aeabi_idiv0>
 8008298:	f1ad 0c08 	sub.w	ip, sp, #8
 800829c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082a0:	f000 f806 	bl	80082b0 <__udivmoddi4>
 80082a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ac:	b004      	add	sp, #16
 80082ae:	4770      	bx	lr

080082b0 <__udivmoddi4>:
 80082b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	9d08      	ldr	r5, [sp, #32]
 80082b6:	468e      	mov	lr, r1
 80082b8:	4604      	mov	r4, r0
 80082ba:	4688      	mov	r8, r1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d14a      	bne.n	8008356 <__udivmoddi4+0xa6>
 80082c0:	428a      	cmp	r2, r1
 80082c2:	4617      	mov	r7, r2
 80082c4:	d962      	bls.n	800838c <__udivmoddi4+0xdc>
 80082c6:	fab2 f682 	clz	r6, r2
 80082ca:	b14e      	cbz	r6, 80082e0 <__udivmoddi4+0x30>
 80082cc:	f1c6 0320 	rsb	r3, r6, #32
 80082d0:	fa01 f806 	lsl.w	r8, r1, r6
 80082d4:	fa20 f303 	lsr.w	r3, r0, r3
 80082d8:	40b7      	lsls	r7, r6
 80082da:	ea43 0808 	orr.w	r8, r3, r8
 80082de:	40b4      	lsls	r4, r6
 80082e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80082e4:	fa1f fc87 	uxth.w	ip, r7
 80082e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80082ec:	0c23      	lsrs	r3, r4, #16
 80082ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80082f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80082f6:	fb01 f20c 	mul.w	r2, r1, ip
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d909      	bls.n	8008312 <__udivmoddi4+0x62>
 80082fe:	18fb      	adds	r3, r7, r3
 8008300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8008304:	f080 80ea 	bcs.w	80084dc <__udivmoddi4+0x22c>
 8008308:	429a      	cmp	r2, r3
 800830a:	f240 80e7 	bls.w	80084dc <__udivmoddi4+0x22c>
 800830e:	3902      	subs	r1, #2
 8008310:	443b      	add	r3, r7
 8008312:	1a9a      	subs	r2, r3, r2
 8008314:	b2a3      	uxth	r3, r4
 8008316:	fbb2 f0fe 	udiv	r0, r2, lr
 800831a:	fb0e 2210 	mls	r2, lr, r0, r2
 800831e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008322:	fb00 fc0c 	mul.w	ip, r0, ip
 8008326:	459c      	cmp	ip, r3
 8008328:	d909      	bls.n	800833e <__udivmoddi4+0x8e>
 800832a:	18fb      	adds	r3, r7, r3
 800832c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8008330:	f080 80d6 	bcs.w	80084e0 <__udivmoddi4+0x230>
 8008334:	459c      	cmp	ip, r3
 8008336:	f240 80d3 	bls.w	80084e0 <__udivmoddi4+0x230>
 800833a:	443b      	add	r3, r7
 800833c:	3802      	subs	r0, #2
 800833e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008342:	eba3 030c 	sub.w	r3, r3, ip
 8008346:	2100      	movs	r1, #0
 8008348:	b11d      	cbz	r5, 8008352 <__udivmoddi4+0xa2>
 800834a:	40f3      	lsrs	r3, r6
 800834c:	2200      	movs	r2, #0
 800834e:	e9c5 3200 	strd	r3, r2, [r5]
 8008352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008356:	428b      	cmp	r3, r1
 8008358:	d905      	bls.n	8008366 <__udivmoddi4+0xb6>
 800835a:	b10d      	cbz	r5, 8008360 <__udivmoddi4+0xb0>
 800835c:	e9c5 0100 	strd	r0, r1, [r5]
 8008360:	2100      	movs	r1, #0
 8008362:	4608      	mov	r0, r1
 8008364:	e7f5      	b.n	8008352 <__udivmoddi4+0xa2>
 8008366:	fab3 f183 	clz	r1, r3
 800836a:	2900      	cmp	r1, #0
 800836c:	d146      	bne.n	80083fc <__udivmoddi4+0x14c>
 800836e:	4573      	cmp	r3, lr
 8008370:	d302      	bcc.n	8008378 <__udivmoddi4+0xc8>
 8008372:	4282      	cmp	r2, r0
 8008374:	f200 8105 	bhi.w	8008582 <__udivmoddi4+0x2d2>
 8008378:	1a84      	subs	r4, r0, r2
 800837a:	eb6e 0203 	sbc.w	r2, lr, r3
 800837e:	2001      	movs	r0, #1
 8008380:	4690      	mov	r8, r2
 8008382:	2d00      	cmp	r5, #0
 8008384:	d0e5      	beq.n	8008352 <__udivmoddi4+0xa2>
 8008386:	e9c5 4800 	strd	r4, r8, [r5]
 800838a:	e7e2      	b.n	8008352 <__udivmoddi4+0xa2>
 800838c:	2a00      	cmp	r2, #0
 800838e:	f000 8090 	beq.w	80084b2 <__udivmoddi4+0x202>
 8008392:	fab2 f682 	clz	r6, r2
 8008396:	2e00      	cmp	r6, #0
 8008398:	f040 80a4 	bne.w	80084e4 <__udivmoddi4+0x234>
 800839c:	1a8a      	subs	r2, r1, r2
 800839e:	0c03      	lsrs	r3, r0, #16
 80083a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80083a4:	b280      	uxth	r0, r0
 80083a6:	b2bc      	uxth	r4, r7
 80083a8:	2101      	movs	r1, #1
 80083aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80083ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80083b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083b6:	fb04 f20c 	mul.w	r2, r4, ip
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d907      	bls.n	80083ce <__udivmoddi4+0x11e>
 80083be:	18fb      	adds	r3, r7, r3
 80083c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80083c4:	d202      	bcs.n	80083cc <__udivmoddi4+0x11c>
 80083c6:	429a      	cmp	r2, r3
 80083c8:	f200 80e0 	bhi.w	800858c <__udivmoddi4+0x2dc>
 80083cc:	46c4      	mov	ip, r8
 80083ce:	1a9b      	subs	r3, r3, r2
 80083d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80083d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80083d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80083dc:	fb02 f404 	mul.w	r4, r2, r4
 80083e0:	429c      	cmp	r4, r3
 80083e2:	d907      	bls.n	80083f4 <__udivmoddi4+0x144>
 80083e4:	18fb      	adds	r3, r7, r3
 80083e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80083ea:	d202      	bcs.n	80083f2 <__udivmoddi4+0x142>
 80083ec:	429c      	cmp	r4, r3
 80083ee:	f200 80ca 	bhi.w	8008586 <__udivmoddi4+0x2d6>
 80083f2:	4602      	mov	r2, r0
 80083f4:	1b1b      	subs	r3, r3, r4
 80083f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80083fa:	e7a5      	b.n	8008348 <__udivmoddi4+0x98>
 80083fc:	f1c1 0620 	rsb	r6, r1, #32
 8008400:	408b      	lsls	r3, r1
 8008402:	fa22 f706 	lsr.w	r7, r2, r6
 8008406:	431f      	orrs	r7, r3
 8008408:	fa0e f401 	lsl.w	r4, lr, r1
 800840c:	fa20 f306 	lsr.w	r3, r0, r6
 8008410:	fa2e fe06 	lsr.w	lr, lr, r6
 8008414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008418:	4323      	orrs	r3, r4
 800841a:	fa00 f801 	lsl.w	r8, r0, r1
 800841e:	fa1f fc87 	uxth.w	ip, r7
 8008422:	fbbe f0f9 	udiv	r0, lr, r9
 8008426:	0c1c      	lsrs	r4, r3, #16
 8008428:	fb09 ee10 	mls	lr, r9, r0, lr
 800842c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008430:	fb00 fe0c 	mul.w	lr, r0, ip
 8008434:	45a6      	cmp	lr, r4
 8008436:	fa02 f201 	lsl.w	r2, r2, r1
 800843a:	d909      	bls.n	8008450 <__udivmoddi4+0x1a0>
 800843c:	193c      	adds	r4, r7, r4
 800843e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8008442:	f080 809c 	bcs.w	800857e <__udivmoddi4+0x2ce>
 8008446:	45a6      	cmp	lr, r4
 8008448:	f240 8099 	bls.w	800857e <__udivmoddi4+0x2ce>
 800844c:	3802      	subs	r0, #2
 800844e:	443c      	add	r4, r7
 8008450:	eba4 040e 	sub.w	r4, r4, lr
 8008454:	fa1f fe83 	uxth.w	lr, r3
 8008458:	fbb4 f3f9 	udiv	r3, r4, r9
 800845c:	fb09 4413 	mls	r4, r9, r3, r4
 8008460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8008464:	fb03 fc0c 	mul.w	ip, r3, ip
 8008468:	45a4      	cmp	ip, r4
 800846a:	d908      	bls.n	800847e <__udivmoddi4+0x1ce>
 800846c:	193c      	adds	r4, r7, r4
 800846e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8008472:	f080 8082 	bcs.w	800857a <__udivmoddi4+0x2ca>
 8008476:	45a4      	cmp	ip, r4
 8008478:	d97f      	bls.n	800857a <__udivmoddi4+0x2ca>
 800847a:	3b02      	subs	r3, #2
 800847c:	443c      	add	r4, r7
 800847e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008482:	eba4 040c 	sub.w	r4, r4, ip
 8008486:	fba0 ec02 	umull	lr, ip, r0, r2
 800848a:	4564      	cmp	r4, ip
 800848c:	4673      	mov	r3, lr
 800848e:	46e1      	mov	r9, ip
 8008490:	d362      	bcc.n	8008558 <__udivmoddi4+0x2a8>
 8008492:	d05f      	beq.n	8008554 <__udivmoddi4+0x2a4>
 8008494:	b15d      	cbz	r5, 80084ae <__udivmoddi4+0x1fe>
 8008496:	ebb8 0203 	subs.w	r2, r8, r3
 800849a:	eb64 0409 	sbc.w	r4, r4, r9
 800849e:	fa04 f606 	lsl.w	r6, r4, r6
 80084a2:	fa22 f301 	lsr.w	r3, r2, r1
 80084a6:	431e      	orrs	r6, r3
 80084a8:	40cc      	lsrs	r4, r1
 80084aa:	e9c5 6400 	strd	r6, r4, [r5]
 80084ae:	2100      	movs	r1, #0
 80084b0:	e74f      	b.n	8008352 <__udivmoddi4+0xa2>
 80084b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80084b6:	0c01      	lsrs	r1, r0, #16
 80084b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80084bc:	b280      	uxth	r0, r0
 80084be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80084c2:	463b      	mov	r3, r7
 80084c4:	4638      	mov	r0, r7
 80084c6:	463c      	mov	r4, r7
 80084c8:	46b8      	mov	r8, r7
 80084ca:	46be      	mov	lr, r7
 80084cc:	2620      	movs	r6, #32
 80084ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80084d2:	eba2 0208 	sub.w	r2, r2, r8
 80084d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80084da:	e766      	b.n	80083aa <__udivmoddi4+0xfa>
 80084dc:	4601      	mov	r1, r0
 80084de:	e718      	b.n	8008312 <__udivmoddi4+0x62>
 80084e0:	4610      	mov	r0, r2
 80084e2:	e72c      	b.n	800833e <__udivmoddi4+0x8e>
 80084e4:	f1c6 0220 	rsb	r2, r6, #32
 80084e8:	fa2e f302 	lsr.w	r3, lr, r2
 80084ec:	40b7      	lsls	r7, r6
 80084ee:	40b1      	lsls	r1, r6
 80084f0:	fa20 f202 	lsr.w	r2, r0, r2
 80084f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80084f8:	430a      	orrs	r2, r1
 80084fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80084fe:	b2bc      	uxth	r4, r7
 8008500:	fb0e 3318 	mls	r3, lr, r8, r3
 8008504:	0c11      	lsrs	r1, r2, #16
 8008506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800850a:	fb08 f904 	mul.w	r9, r8, r4
 800850e:	40b0      	lsls	r0, r6
 8008510:	4589      	cmp	r9, r1
 8008512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8008516:	b280      	uxth	r0, r0
 8008518:	d93e      	bls.n	8008598 <__udivmoddi4+0x2e8>
 800851a:	1879      	adds	r1, r7, r1
 800851c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8008520:	d201      	bcs.n	8008526 <__udivmoddi4+0x276>
 8008522:	4589      	cmp	r9, r1
 8008524:	d81f      	bhi.n	8008566 <__udivmoddi4+0x2b6>
 8008526:	eba1 0109 	sub.w	r1, r1, r9
 800852a:	fbb1 f9fe 	udiv	r9, r1, lr
 800852e:	fb09 f804 	mul.w	r8, r9, r4
 8008532:	fb0e 1119 	mls	r1, lr, r9, r1
 8008536:	b292      	uxth	r2, r2
 8008538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800853c:	4542      	cmp	r2, r8
 800853e:	d229      	bcs.n	8008594 <__udivmoddi4+0x2e4>
 8008540:	18ba      	adds	r2, r7, r2
 8008542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8008546:	d2c4      	bcs.n	80084d2 <__udivmoddi4+0x222>
 8008548:	4542      	cmp	r2, r8
 800854a:	d2c2      	bcs.n	80084d2 <__udivmoddi4+0x222>
 800854c:	f1a9 0102 	sub.w	r1, r9, #2
 8008550:	443a      	add	r2, r7
 8008552:	e7be      	b.n	80084d2 <__udivmoddi4+0x222>
 8008554:	45f0      	cmp	r8, lr
 8008556:	d29d      	bcs.n	8008494 <__udivmoddi4+0x1e4>
 8008558:	ebbe 0302 	subs.w	r3, lr, r2
 800855c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8008560:	3801      	subs	r0, #1
 8008562:	46e1      	mov	r9, ip
 8008564:	e796      	b.n	8008494 <__udivmoddi4+0x1e4>
 8008566:	eba7 0909 	sub.w	r9, r7, r9
 800856a:	4449      	add	r1, r9
 800856c:	f1a8 0c02 	sub.w	ip, r8, #2
 8008570:	fbb1 f9fe 	udiv	r9, r1, lr
 8008574:	fb09 f804 	mul.w	r8, r9, r4
 8008578:	e7db      	b.n	8008532 <__udivmoddi4+0x282>
 800857a:	4673      	mov	r3, lr
 800857c:	e77f      	b.n	800847e <__udivmoddi4+0x1ce>
 800857e:	4650      	mov	r0, sl
 8008580:	e766      	b.n	8008450 <__udivmoddi4+0x1a0>
 8008582:	4608      	mov	r0, r1
 8008584:	e6fd      	b.n	8008382 <__udivmoddi4+0xd2>
 8008586:	443b      	add	r3, r7
 8008588:	3a02      	subs	r2, #2
 800858a:	e733      	b.n	80083f4 <__udivmoddi4+0x144>
 800858c:	f1ac 0c02 	sub.w	ip, ip, #2
 8008590:	443b      	add	r3, r7
 8008592:	e71c      	b.n	80083ce <__udivmoddi4+0x11e>
 8008594:	4649      	mov	r1, r9
 8008596:	e79c      	b.n	80084d2 <__udivmoddi4+0x222>
 8008598:	eba1 0109 	sub.w	r1, r1, r9
 800859c:	46c4      	mov	ip, r8
 800859e:	fbb1 f9fe 	udiv	r9, r1, lr
 80085a2:	fb09 f804 	mul.w	r8, r9, r4
 80085a6:	e7c4      	b.n	8008532 <__udivmoddi4+0x282>

080085a8 <__aeabi_idiv0>:
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop

080085ac <MX_GPIO_Init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void) {
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80085b2:	f107 030c 	add.w	r3, r7, #12
 80085b6:	2200      	movs	r2, #0
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	605a      	str	r2, [r3, #4]
 80085bc:	609a      	str	r2, [r3, #8]
 80085be:	60da      	str	r2, [r3, #12]
 80085c0:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80085c2:	2300      	movs	r3, #0
 80085c4:	60bb      	str	r3, [r7, #8]
 80085c6:	4b26      	ldr	r3, [pc, #152]	@ (8008660 <MX_GPIO_Init+0xb4>)
 80085c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ca:	4a25      	ldr	r2, [pc, #148]	@ (8008660 <MX_GPIO_Init+0xb4>)
 80085cc:	f043 0304 	orr.w	r3, r3, #4
 80085d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80085d2:	4b23      	ldr	r3, [pc, #140]	@ (8008660 <MX_GPIO_Init+0xb4>)
 80085d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d6:	f003 0304 	and.w	r3, r3, #4
 80085da:	60bb      	str	r3, [r7, #8]
 80085dc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80085de:	2300      	movs	r3, #0
 80085e0:	607b      	str	r3, [r7, #4]
 80085e2:	4b1f      	ldr	r3, [pc, #124]	@ (8008660 <MX_GPIO_Init+0xb4>)
 80085e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e6:	4a1e      	ldr	r2, [pc, #120]	@ (8008660 <MX_GPIO_Init+0xb4>)
 80085e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80085ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008660 <MX_GPIO_Init+0xb4>)
 80085f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085f6:	607b      	str	r3, [r7, #4]
 80085f8:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085fa:	2300      	movs	r3, #0
 80085fc:	603b      	str	r3, [r7, #0]
 80085fe:	4b18      	ldr	r3, [pc, #96]	@ (8008660 <MX_GPIO_Init+0xb4>)
 8008600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008602:	4a17      	ldr	r2, [pc, #92]	@ (8008660 <MX_GPIO_Init+0xb4>)
 8008604:	f043 0301 	orr.w	r3, r3, #1
 8008608:	6313      	str	r3, [r2, #48]	@ 0x30
 800860a:	4b15      	ldr	r3, [pc, #84]	@ (8008660 <MX_GPIO_Init+0xb4>)
 800860c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	603b      	str	r3, [r7, #0]
 8008614:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8008616:	2201      	movs	r2, #1
 8008618:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800861c:	4811      	ldr	r0, [pc, #68]	@ (8008664 <MX_GPIO_Init+0xb8>)
 800861e:	f000 fdcb 	bl	80091b8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8008622:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008626:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008628:	2311      	movs	r3, #17
 800862a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800862c:	2300      	movs	r3, #0
 800862e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008630:	2300      	movs	r3, #0
 8008632:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8008634:	f107 030c 	add.w	r3, r7, #12
 8008638:	4619      	mov	r1, r3
 800863a:	480a      	ldr	r0, [pc, #40]	@ (8008664 <MX_GPIO_Init+0xb8>)
 800863c:	f000 fc38 	bl	8008eb0 <HAL_GPIO_Init>

    /*Configure GPIO pin : BTN_Pin */
    GPIO_InitStruct.Pin = BTN_Pin;
 8008640:	2301      	movs	r3, #1
 8008642:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008644:	2300      	movs	r3, #0
 8008646:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008648:	2301      	movs	r3, #1
 800864a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800864c:	f107 030c 	add.w	r3, r7, #12
 8008650:	4619      	mov	r1, r3
 8008652:	4805      	ldr	r0, [pc, #20]	@ (8008668 <MX_GPIO_Init+0xbc>)
 8008654:	f000 fc2c 	bl	8008eb0 <HAL_GPIO_Init>

}
 8008658:	bf00      	nop
 800865a:	3720      	adds	r7, #32
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	40023800 	.word	0x40023800
 8008664:	40020800 	.word	0x40020800
 8008668:	40020000 	.word	0x40020000

0800866c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8008672:	f000 fa75 	bl	8008b60 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8008676:	f000 f849 	bl	800870c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800867a:	f7ff ff97 	bl	80085ac <MX_GPIO_Init>
    MX_USART1_UART_Init();
 800867e:	f000 f9d3 	bl	8008a28 <MX_USART1_UART_Init>
    MX_USB_DEVICE_Init();
 8008682:	f006 fb81 	bl	800ed88 <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 2 */

    printf("\n-----------------\nstm32_application\n-----------------\n");
 8008686:	4818      	ldr	r0, [pc, #96]	@ (80086e8 <main+0x7c>)
 8008688:	f007 f992 	bl	800f9b0 <puts>

    uint32_t app_sp = *(__IO uint32_t*) APP_ADDR;
 800868c:	4b17      	ldr	r3, [pc, #92]	@ (80086ec <main+0x80>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	60bb      	str	r3, [r7, #8]
    uint32_t app_entry = *(__IO uint32_t*) (APP_ADDR + 4);
 8008692:	4b17      	ldr	r3, [pc, #92]	@ (80086f0 <main+0x84>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	607b      	str	r3, [r7, #4]

    printf("app_sp    : 0x%08lX\n", app_sp);
 8008698:	68b9      	ldr	r1, [r7, #8]
 800869a:	4816      	ldr	r0, [pc, #88]	@ (80086f4 <main+0x88>)
 800869c:	f007 f920 	bl	800f8e0 <iprintf>
    printf("app_entry : 0x%08lX\n", app_entry);
 80086a0:	6879      	ldr	r1, [r7, #4]
 80086a2:	4815      	ldr	r0, [pc, #84]	@ (80086f8 <main+0x8c>)
 80086a4:	f007 f91c 	bl	800f8e0 <iprintf>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    uint32_t now = 0, next_blink_tick = 1000;
 80086a8:	2300      	movs	r3, #0
 80086aa:	603b      	str	r3, [r7, #0]
 80086ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80086b0:	60fb      	str	r3, [r7, #12]

    while (1) {
        now = uwTick;
 80086b2:	4b12      	ldr	r3, [pc, #72]	@ (80086fc <main+0x90>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	603b      	str	r3, [r7, #0]

        if (now >= next_blink_tick) {
 80086b8:	683a      	ldr	r2, [r7, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d3f8      	bcc.n	80086b2 <main+0x46>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80086c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80086c4:	480e      	ldr	r0, [pc, #56]	@ (8008700 <main+0x94>)
 80086c6:	f000 fd90 	bl	80091ea <HAL_GPIO_TogglePin>

            printf("App_Tick %lu\n", next_blink_tick / 1000);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4a0d      	ldr	r2, [pc, #52]	@ (8008704 <main+0x98>)
 80086ce:	fba2 2303 	umull	r2, r3, r2, r3
 80086d2:	099b      	lsrs	r3, r3, #6
 80086d4:	4619      	mov	r1, r3
 80086d6:	480c      	ldr	r0, [pc, #48]	@ (8008708 <main+0x9c>)
 80086d8:	f007 f902 	bl	800f8e0 <iprintf>
            next_blink_tick += 1000;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80086e2:	60fb      	str	r3, [r7, #12]
        now = uwTick;
 80086e4:	e7e5      	b.n	80086b2 <main+0x46>
 80086e6:	bf00      	nop
 80086e8:	0801068c 	.word	0x0801068c
 80086ec:	08008000 	.word	0x08008000
 80086f0:	08008004 	.word	0x08008004
 80086f4:	080106c4 	.word	0x080106c4
 80086f8:	080106dc 	.word	0x080106dc
 80086fc:	200001c0 	.word	0x200001c0
 8008700:	40020800 	.word	0x40020800
 8008704:	10624dd3 	.word	0x10624dd3
 8008708:	080106f4 	.word	0x080106f4

0800870c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800870c:	b580      	push	{r7, lr}
 800870e:	b094      	sub	sp, #80	@ 0x50
 8008710:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8008712:	f107 0320 	add.w	r3, r7, #32
 8008716:	2230      	movs	r2, #48	@ 0x30
 8008718:	2100      	movs	r1, #0
 800871a:	4618      	mov	r0, r3
 800871c:	f007 fa28 	bl	800fb70 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8008720:	f107 030c 	add.w	r3, r7, #12
 8008724:	2200      	movs	r2, #0
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	605a      	str	r2, [r3, #4]
 800872a:	609a      	str	r2, [r3, #8]
 800872c:	60da      	str	r2, [r3, #12]
 800872e:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8008730:	2300      	movs	r3, #0
 8008732:	60bb      	str	r3, [r7, #8]
 8008734:	4b27      	ldr	r3, [pc, #156]	@ (80087d4 <SystemClock_Config+0xc8>)
 8008736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008738:	4a26      	ldr	r2, [pc, #152]	@ (80087d4 <SystemClock_Config+0xc8>)
 800873a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800873e:	6413      	str	r3, [r2, #64]	@ 0x40
 8008740:	4b24      	ldr	r3, [pc, #144]	@ (80087d4 <SystemClock_Config+0xc8>)
 8008742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008748:	60bb      	str	r3, [r7, #8]
 800874a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800874c:	2300      	movs	r3, #0
 800874e:	607b      	str	r3, [r7, #4]
 8008750:	4b21      	ldr	r3, [pc, #132]	@ (80087d8 <SystemClock_Config+0xcc>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a20      	ldr	r2, [pc, #128]	@ (80087d8 <SystemClock_Config+0xcc>)
 8008756:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	4b1e      	ldr	r3, [pc, #120]	@ (80087d8 <SystemClock_Config+0xcc>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008764:	607b      	str	r3, [r7, #4]
 8008766:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008768:	2301      	movs	r3, #1
 800876a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800876c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008770:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008772:	2302      	movs	r3, #2
 8008774:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008776:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800877a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 25;
 800877c:	2319      	movs	r3, #25
 800877e:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 192;
 8008780:	23c0      	movs	r3, #192	@ 0xc0
 8008782:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008784:	2302      	movs	r3, #2
 8008786:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8008788:	2304      	movs	r3, #4
 800878a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800878c:	f107 0320 	add.w	r3, r7, #32
 8008790:	4618      	mov	r0, r3
 8008792:	f001 ff97 	bl	800a6c4 <HAL_RCC_OscConfig>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <SystemClock_Config+0x94>
        Error_Handler();
 800879c:	f000 f81e 	bl	80087dc <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80087a0:	230f      	movs	r3, #15
 80087a2:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80087a4:	2302      	movs	r3, #2
 80087a6:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80087a8:	2300      	movs	r3, #0
 80087aa:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80087ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80087b0:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80087b2:	2300      	movs	r3, #0
 80087b4:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80087b6:	f107 030c 	add.w	r3, r7, #12
 80087ba:	2103      	movs	r1, #3
 80087bc:	4618      	mov	r0, r3
 80087be:	f002 f9f9 	bl	800abb4 <HAL_RCC_ClockConfig>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <SystemClock_Config+0xc0>
        Error_Handler();
 80087c8:	f000 f808 	bl	80087dc <Error_Handler>
    }
}
 80087cc:	bf00      	nop
 80087ce:	3750      	adds	r7, #80	@ 0x50
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	40023800 	.word	0x40023800
 80087d8:	40007000 	.word	0x40007000

080087dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80087e0:	b672      	cpsid	i
}
 80087e2:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80087e4:	bf00      	nop
 80087e6:	e7fd      	b.n	80087e4 <Error_Handler+0x8>

080087e8 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087ee:	2300      	movs	r3, #0
 80087f0:	607b      	str	r3, [r7, #4]
 80087f2:	4b10      	ldr	r3, [pc, #64]	@ (8008834 <HAL_MspInit+0x4c>)
 80087f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087f6:	4a0f      	ldr	r2, [pc, #60]	@ (8008834 <HAL_MspInit+0x4c>)
 80087f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80087fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80087fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008834 <HAL_MspInit+0x4c>)
 8008800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008806:	607b      	str	r3, [r7, #4]
 8008808:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 800880a:	2300      	movs	r3, #0
 800880c:	603b      	str	r3, [r7, #0]
 800880e:	4b09      	ldr	r3, [pc, #36]	@ (8008834 <HAL_MspInit+0x4c>)
 8008810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008812:	4a08      	ldr	r2, [pc, #32]	@ (8008834 <HAL_MspInit+0x4c>)
 8008814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008818:	6413      	str	r3, [r2, #64]	@ 0x40
 800881a:	4b06      	ldr	r3, [pc, #24]	@ (8008834 <HAL_MspInit+0x4c>)
 800881c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800881e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008822:	603b      	str	r3, [r7, #0]
 8008824:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	40023800 	.word	0x40023800

08008838 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8008838:	b480      	push	{r7}
 800883a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 800883c:	bf00      	nop
 800883e:	e7fd      	b.n	800883c <NMI_Handler+0x4>

08008840 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8008840:	b480      	push	{r7}
 8008842:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 8008844:	bf00      	nop
 8008846:	e7fd      	b.n	8008844 <HardFault_Handler+0x4>

08008848 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 800884c:	bf00      	nop
 800884e:	e7fd      	b.n	800884c <MemManage_Handler+0x4>

08008850 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8008850:	b480      	push	{r7}
 8008852:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 8008854:	bf00      	nop
 8008856:	e7fd      	b.n	8008854 <BusFault_Handler+0x4>

08008858 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8008858:	b480      	push	{r7}
 800885a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 800885c:	bf00      	nop
 800885e:	e7fd      	b.n	800885c <UsageFault_Handler+0x4>

08008860 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8008860:	b480      	push	{r7}
 8008862:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8008864:	bf00      	nop
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800886e:	b480      	push	{r7}
 8008870:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008872:	bf00      	nop
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800887c:	b480      	push	{r7}
 800887e:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8008880:	bf00      	nop
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 800888a:	b580      	push	{r7, lr}
 800888c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 800888e:	f000 f9b9 	bl	8008c04 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8008892:	bf00      	nop
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <OTG_FS_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void) {
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800889c:	4802      	ldr	r0, [pc, #8]	@ (80088a8 <OTG_FS_IRQHandler+0x10>)
 800889e:	f000 fe02 	bl	80094a6 <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 80088a2:	bf00      	nop
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	200016a4 	.word	0x200016a4

080088ac <_read>:
    _kill(status, -1);
    while (1) {
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
    (void) file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80088b8:	2300      	movs	r3, #0
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	e00a      	b.n	80088d4 <_read+0x28>
        *ptr++ = __io_getchar();
 80088be:	f3af 8000 	nop.w
 80088c2:	4601      	mov	r1, r0
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	1c5a      	adds	r2, r3, #1
 80088c8:	60ba      	str	r2, [r7, #8]
 80088ca:	b2ca      	uxtb	r2, r1
 80088cc:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	3301      	adds	r3, #1
 80088d2:	617b      	str	r3, [r7, #20]
 80088d4:	697a      	ldr	r2, [r7, #20]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	429a      	cmp	r2, r3
 80088da:	dbf0      	blt.n	80088be <_read+0x12>
    }

    return len;
 80088dc:	687b      	ldr	r3, [r7, #4]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <_close>:
        __io_putchar(*ptr++);
    }
    return len;
}

int _close(int file) {
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
    (void) file;
    return -1;
 80088ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <_fstat>:

int _fstat(int file, struct stat *st) {
 80088fe:	b480      	push	{r7}
 8008900:	b083      	sub	sp, #12
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	6039      	str	r1, [r7, #0]
    (void) file;
    st->st_mode = S_IFCHR;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800890e:	605a      	str	r2, [r3, #4]
    return 0;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <_isatty>:

int _isatty(int file) {
 800891e:	b480      	push	{r7}
 8008920:	b083      	sub	sp, #12
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
    (void) file;
    return 1;
 8008926:	2301      	movs	r3, #1
}
 8008928:	4618      	mov	r0, r3
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
    (void) file;
    (void) ptr;
    (void) dir;
    return 0;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3714      	adds	r7, #20
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
	...

08008950 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
    extern uint8_t _end; /* Symbol defined in the linker script */
    extern uint8_t _estack; /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8008958:	4a14      	ldr	r2, [pc, #80]	@ (80089ac <_sbrk+0x5c>)
 800895a:	4b15      	ldr	r3, [pc, #84]	@ (80089b0 <_sbrk+0x60>)
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	617b      	str	r3, [r7, #20]
    const uint8_t *max_heap = (uint8_t*) stack_limit;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	613b      	str	r3, [r7, #16]
    uint8_t *prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8008964:	4b13      	ldr	r3, [pc, #76]	@ (80089b4 <_sbrk+0x64>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d102      	bne.n	8008972 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 800896c:	4b11      	ldr	r3, [pc, #68]	@ (80089b4 <_sbrk+0x64>)
 800896e:	4a12      	ldr	r2, [pc, #72]	@ (80089b8 <_sbrk+0x68>)
 8008970:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8008972:	4b10      	ldr	r3, [pc, #64]	@ (80089b4 <_sbrk+0x64>)
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4413      	add	r3, r2
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	429a      	cmp	r2, r3
 800897e:	d207      	bcs.n	8008990 <_sbrk+0x40>
        errno = ENOMEM;
 8008980:	f007 f944 	bl	800fc0c <__errno>
 8008984:	4603      	mov	r3, r0
 8008986:	220c      	movs	r2, #12
 8008988:	601a      	str	r2, [r3, #0]
        return (void*) -1;
 800898a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800898e:	e009      	b.n	80089a4 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8008990:	4b08      	ldr	r3, [pc, #32]	@ (80089b4 <_sbrk+0x64>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8008996:	4b07      	ldr	r3, [pc, #28]	@ (80089b4 <_sbrk+0x64>)
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4413      	add	r3, r2
 800899e:	4a05      	ldr	r2, [pc, #20]	@ (80089b4 <_sbrk+0x64>)
 80089a0:	6013      	str	r3, [r2, #0]

    return (void*) prev_heap_end;
 80089a2:	68fb      	ldr	r3, [r7, #12]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	20020000 	.word	0x20020000
 80089b0:	00000400 	.word	0x00000400
 80089b4:	20000174 	.word	0x20000174
 80089b8:	20001ef8 	.word	0x20001ef8

080089bc <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80089bc:	b480      	push	{r7}
 80089be:	af00      	add	r7, sp, #0
    /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80089c0:	4b06      	ldr	r3, [pc, #24]	@ (80089dc <SystemInit+0x20>)
 80089c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c6:	4a05      	ldr	r2, [pc, #20]	@ (80089dc <SystemInit+0x20>)
 80089c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80089cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80089d0:	bf00      	nop
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	e000ed00 	.word	0xe000ed00

080089e0 <_write>:
/* Includes ------------------------------------------------------------------*/
#include "usart.h"

/* USER CODE BEGIN 0 */

int _write(int fd, char *ptr, int len) {
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;
    if (fd == 1 || fd == 2) {
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d002      	beq.n	80089f8 <_write+0x18>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	d10e      	bne.n	8008a16 <_write+0x36>
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a00:	68b9      	ldr	r1, [r7, #8]
 8008a02:	4808      	ldr	r0, [pc, #32]	@ (8008a24 <_write+0x44>)
 8008a04:	f002 fb06 	bl	800b014 <HAL_UART_Transmit>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <_write+0x36>
            return len;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	e001      	b.n	8008a1a <_write+0x3a>
    }
    return -1;
 8008a16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3718      	adds	r7, #24
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	20000178 	.word	0x20000178

08008a28 <MX_USART1_UART_Init>:

UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void) {
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8008a2c:	4b11      	ldr	r3, [pc, #68]	@ (8008a74 <MX_USART1_UART_Init+0x4c>)
 8008a2e:	4a12      	ldr	r2, [pc, #72]	@ (8008a78 <MX_USART1_UART_Init+0x50>)
 8008a30:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8008a32:	4b10      	ldr	r3, [pc, #64]	@ (8008a74 <MX_USART1_UART_Init+0x4c>)
 8008a34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008a38:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8008a74 <MX_USART1_UART_Init+0x4c>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8008a40:	4b0c      	ldr	r3, [pc, #48]	@ (8008a74 <MX_USART1_UART_Init+0x4c>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8008a46:	4b0b      	ldr	r3, [pc, #44]	@ (8008a74 <MX_USART1_UART_Init+0x4c>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8008a4c:	4b09      	ldr	r3, [pc, #36]	@ (8008a74 <MX_USART1_UART_Init+0x4c>)
 8008a4e:	220c      	movs	r2, #12
 8008a50:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008a52:	4b08      	ldr	r3, [pc, #32]	@ (8008a74 <MX_USART1_UART_Init+0x4c>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008a58:	4b06      	ldr	r3, [pc, #24]	@ (8008a74 <MX_USART1_UART_Init+0x4c>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8008a5e:	4805      	ldr	r0, [pc, #20]	@ (8008a74 <MX_USART1_UART_Init+0x4c>)
 8008a60:	f002 fa88 	bl	800af74 <HAL_UART_Init>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <MX_USART1_UART_Init+0x46>
        Error_Handler();
 8008a6a:	f7ff feb7 	bl	80087dc <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8008a6e:	bf00      	nop
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20000178 	.word	0x20000178
 8008a78:	40011000 	.word	0x40011000

08008a7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b08a      	sub	sp, #40	@ 0x28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8008a84:	f107 0314 	add.w	r3, r7, #20
 8008a88:	2200      	movs	r2, #0
 8008a8a:	601a      	str	r2, [r3, #0]
 8008a8c:	605a      	str	r2, [r3, #4]
 8008a8e:	609a      	str	r2, [r3, #8]
 8008a90:	60da      	str	r2, [r3, #12]
 8008a92:	611a      	str	r2, [r3, #16]
    if (uartHandle->Instance == USART1) {
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a19      	ldr	r2, [pc, #100]	@ (8008b00 <HAL_UART_MspInit+0x84>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d12c      	bne.n	8008af8 <HAL_UART_MspInit+0x7c>
        /* USER CODE BEGIN USART1_MspInit 0 */

        /* USER CODE END USART1_MspInit 0 */
        /* USART1 clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	613b      	str	r3, [r7, #16]
 8008aa2:	4b18      	ldr	r3, [pc, #96]	@ (8008b04 <HAL_UART_MspInit+0x88>)
 8008aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aa6:	4a17      	ldr	r2, [pc, #92]	@ (8008b04 <HAL_UART_MspInit+0x88>)
 8008aa8:	f043 0310 	orr.w	r3, r3, #16
 8008aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8008aae:	4b15      	ldr	r3, [pc, #84]	@ (8008b04 <HAL_UART_MspInit+0x88>)
 8008ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ab2:	f003 0310 	and.w	r3, r3, #16
 8008ab6:	613b      	str	r3, [r7, #16]
 8008ab8:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8008aba:	2300      	movs	r3, #0
 8008abc:	60fb      	str	r3, [r7, #12]
 8008abe:	4b11      	ldr	r3, [pc, #68]	@ (8008b04 <HAL_UART_MspInit+0x88>)
 8008ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ac2:	4a10      	ldr	r2, [pc, #64]	@ (8008b04 <HAL_UART_MspInit+0x88>)
 8008ac4:	f043 0301 	orr.w	r3, r3, #1
 8008ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008aca:	4b0e      	ldr	r3, [pc, #56]	@ (8008b04 <HAL_UART_MspInit+0x88>)
 8008acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
        /**USART1 GPIO Configuration
         PA9     ------> USART1_TX
         PA10     ------> USART1_RX
         */
        GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8008ad6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8008ada:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008adc:	2302      	movs	r3, #2
 8008ade:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008ae8:	2307      	movs	r3, #7
 8008aea:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008aec:	f107 0314 	add.w	r3, r7, #20
 8008af0:	4619      	mov	r1, r3
 8008af2:	4805      	ldr	r0, [pc, #20]	@ (8008b08 <HAL_UART_MspInit+0x8c>)
 8008af4:	f000 f9dc 	bl	8008eb0 <HAL_GPIO_Init>

        /* USER CODE BEGIN USART1_MspInit 1 */

        /* USER CODE END USART1_MspInit 1 */
    }
}
 8008af8:	bf00      	nop
 8008afa:	3728      	adds	r7, #40	@ 0x28
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	40011000 	.word	0x40011000
 8008b04:	40023800 	.word	0x40023800
 8008b08:	40020000 	.word	0x40020000

08008b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008b0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008b44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008b10:	f7ff ff54 	bl	80089bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008b14:	480c      	ldr	r0, [pc, #48]	@ (8008b48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008b16:	490d      	ldr	r1, [pc, #52]	@ (8008b4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008b18:	4a0d      	ldr	r2, [pc, #52]	@ (8008b50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008b1c:	e002      	b.n	8008b24 <LoopCopyDataInit>

08008b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008b22:	3304      	adds	r3, #4

08008b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b28:	d3f9      	bcc.n	8008b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8008b54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8008b58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b30:	e001      	b.n	8008b36 <LoopFillZerobss>

08008b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b34:	3204      	adds	r2, #4

08008b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b38:	d3fb      	bcc.n	8008b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008b3a:	f007 f86d 	bl	800fc18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008b3e:	f7ff fd95 	bl	800866c <main>
  bx  lr    
 8008b42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008b44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b4c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8008b50:	080107a8 	.word	0x080107a8
  ldr r2, =_sbss
 8008b54:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8008b58:	20001ef4 	.word	0x20001ef4

08008b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008b5c:	e7fe      	b.n	8008b5c <ADC_IRQHandler>
	...

08008b60 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8008b60:	b580      	push	{r7, lr}
 8008b62:	af00      	add	r7, sp, #0
    /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008b64:	4b0e      	ldr	r3, [pc, #56]	@ (8008ba0 <HAL_Init+0x40>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a0d      	ldr	r2, [pc, #52]	@ (8008ba0 <HAL_Init+0x40>)
 8008b6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008b70:	4b0b      	ldr	r3, [pc, #44]	@ (8008ba0 <HAL_Init+0x40>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a0a      	ldr	r2, [pc, #40]	@ (8008ba0 <HAL_Init+0x40>)
 8008b76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b7c:	4b08      	ldr	r3, [pc, #32]	@ (8008ba0 <HAL_Init+0x40>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a07      	ldr	r2, [pc, #28]	@ (8008ba0 <HAL_Init+0x40>)
 8008b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

    /* Set Interrupt Group Priority */
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b88:	2003      	movs	r0, #3
 8008b8a:	f000 f94f 	bl	8008e2c <HAL_NVIC_SetPriorityGrouping>

    /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
    HAL_InitTick(TICK_INT_PRIORITY);
 8008b8e:	200f      	movs	r0, #15
 8008b90:	f000 f808 	bl	8008ba4 <HAL_InitTick>

    /* Init the low level hardware */
    HAL_MspInit();
 8008b94:	f7ff fe28 	bl	80087e8 <HAL_MspInit>

    /* Return function status */
    return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	40023c00 	.word	0x40023c00

08008ba4 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8008bac:	4b12      	ldr	r3, [pc, #72]	@ (8008bf8 <HAL_InitTick+0x54>)
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	4b12      	ldr	r3, [pc, #72]	@ (8008bfc <HAL_InitTick+0x58>)
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 f967 	bl	8008e96 <HAL_SYSTICK_Config>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <HAL_InitTick+0x2e>
        return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e00e      	b.n	8008bf0 <HAL_InitTick+0x4c>
    }

    /* Configure the SysTick IRQ priority */
    if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2b0f      	cmp	r3, #15
 8008bd6:	d80a      	bhi.n	8008bee <HAL_InitTick+0x4a>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008bd8:	2200      	movs	r2, #0
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008be0:	f000 f92f 	bl	8008e42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008be4:	4a06      	ldr	r2, [pc, #24]	@ (8008c00 <HAL_InitTick+0x5c>)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6013      	str	r3, [r2, #0]
    } else {
        return HAL_ERROR;
    }

    /* Return function status */
    return HAL_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	e000      	b.n	8008bf0 <HAL_InitTick+0x4c>
        return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	20000000 	.word	0x20000000
 8008bfc:	20000008 	.word	0x20000008
 8008c00:	20000004 	.word	0x20000004

08008c04 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8008c04:	b480      	push	{r7}
 8008c06:	af00      	add	r7, sp, #0
    uwTick += uwTickFreq;
 8008c08:	4b06      	ldr	r3, [pc, #24]	@ (8008c24 <HAL_IncTick+0x20>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	4b06      	ldr	r3, [pc, #24]	@ (8008c28 <HAL_IncTick+0x24>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4413      	add	r3, r2
 8008c14:	4a04      	ldr	r2, [pc, #16]	@ (8008c28 <HAL_IncTick+0x24>)
 8008c16:	6013      	str	r3, [r2, #0]
}
 8008c18:	bf00      	nop
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	20000008 	.word	0x20000008
 8008c28:	200001c0 	.word	0x200001c0

08008c2c <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
    return uwTick;
 8008c30:	4b03      	ldr	r3, [pc, #12]	@ (8008c40 <HAL_GetTick+0x14>)
 8008c32:	681b      	ldr	r3, [r3, #0]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	200001c0 	.word	0x200001c0

08008c44 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8008c4c:	f7ff ffee 	bl	8008c2c <HAL_GetTick>
 8008c50:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	60fb      	str	r3, [r7, #12]

    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY) {
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c5c:	d005      	beq.n	8008c6a <HAL_Delay+0x26>
        wait += (uint32_t) (uwTickFreq);
 8008c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c88 <HAL_Delay+0x44>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	461a      	mov	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	4413      	add	r3, r2
 8008c68:	60fb      	str	r3, [r7, #12]
    }

    while ((HAL_GetTick() - tickstart) < wait) {
 8008c6a:	bf00      	nop
 8008c6c:	f7ff ffde 	bl	8008c2c <HAL_GetTick>
 8008c70:	4602      	mov	r2, r0
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d8f7      	bhi.n	8008c6c <HAL_Delay+0x28>
    }
}
 8008c7c:	bf00      	nop
 8008c7e:	bf00      	nop
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20000008 	.word	0x20000008

08008c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f003 0307 	and.w	r3, r3, #7
 8008c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8008cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008ca8:	4013      	ands	r3, r2
 8008caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008cb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008cbe:	4a04      	ldr	r2, [pc, #16]	@ (8008cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	60d3      	str	r3, [r2, #12]
}
 8008cc4:	bf00      	nop
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	e000ed00 	.word	0xe000ed00

08008cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008cd8:	4b04      	ldr	r3, [pc, #16]	@ (8008cec <__NVIC_GetPriorityGrouping+0x18>)
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	0a1b      	lsrs	r3, r3, #8
 8008cde:	f003 0307 	and.w	r3, r3, #7
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	e000ed00 	.word	0xe000ed00

08008cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	db0b      	blt.n	8008d1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	f003 021f 	and.w	r2, r3, #31
 8008d08:	4907      	ldr	r1, [pc, #28]	@ (8008d28 <__NVIC_EnableIRQ+0x38>)
 8008d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d0e:	095b      	lsrs	r3, r3, #5
 8008d10:	2001      	movs	r0, #1
 8008d12:	fa00 f202 	lsl.w	r2, r0, r2
 8008d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008d1a:	bf00      	nop
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	e000e100 	.word	0xe000e100

08008d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	6039      	str	r1, [r7, #0]
 8008d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	db0a      	blt.n	8008d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	490c      	ldr	r1, [pc, #48]	@ (8008d78 <__NVIC_SetPriority+0x4c>)
 8008d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d4a:	0112      	lsls	r2, r2, #4
 8008d4c:	b2d2      	uxtb	r2, r2
 8008d4e:	440b      	add	r3, r1
 8008d50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008d54:	e00a      	b.n	8008d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	4908      	ldr	r1, [pc, #32]	@ (8008d7c <__NVIC_SetPriority+0x50>)
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
 8008d5e:	f003 030f 	and.w	r3, r3, #15
 8008d62:	3b04      	subs	r3, #4
 8008d64:	0112      	lsls	r2, r2, #4
 8008d66:	b2d2      	uxtb	r2, r2
 8008d68:	440b      	add	r3, r1
 8008d6a:	761a      	strb	r2, [r3, #24]
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	e000e100 	.word	0xe000e100
 8008d7c:	e000ed00 	.word	0xe000ed00

08008d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b089      	sub	sp, #36	@ 0x24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f003 0307 	and.w	r3, r3, #7
 8008d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	f1c3 0307 	rsb	r3, r3, #7
 8008d9a:	2b04      	cmp	r3, #4
 8008d9c:	bf28      	it	cs
 8008d9e:	2304      	movcs	r3, #4
 8008da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	3304      	adds	r3, #4
 8008da6:	2b06      	cmp	r3, #6
 8008da8:	d902      	bls.n	8008db0 <NVIC_EncodePriority+0x30>
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	3b03      	subs	r3, #3
 8008dae:	e000      	b.n	8008db2 <NVIC_EncodePriority+0x32>
 8008db0:	2300      	movs	r3, #0
 8008db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008db4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbe:	43da      	mvns	r2, r3
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	401a      	ands	r2, r3
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008dc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	fa01 f303 	lsl.w	r3, r1, r3
 8008dd2:	43d9      	mvns	r1, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008dd8:	4313      	orrs	r3, r2
         );
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3724      	adds	r7, #36	@ 0x24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
	...

08008de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	3b01      	subs	r3, #1
 8008df4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008df8:	d301      	bcc.n	8008dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e00f      	b.n	8008e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8008e28 <SysTick_Config+0x40>)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008e06:	210f      	movs	r1, #15
 8008e08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e0c:	f7ff ff8e 	bl	8008d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008e10:	4b05      	ldr	r3, [pc, #20]	@ (8008e28 <SysTick_Config+0x40>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008e16:	4b04      	ldr	r3, [pc, #16]	@ (8008e28 <SysTick_Config+0x40>)
 8008e18:	2207      	movs	r2, #7
 8008e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	e000e010 	.word	0xe000e010

08008e2c <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
    /* Check the parameters */
    assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

    /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
    NVIC_SetPriorityGrouping(PriorityGroup);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff ff29 	bl	8008c8c <__NVIC_SetPriorityGrouping>
}
 8008e3a:	bf00      	nop
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <HAL_NVIC_SetPriority>:
 * @param  SubPriority the subpriority level for the IRQ channel.
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority) {
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b086      	sub	sp, #24
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	4603      	mov	r3, r0
 8008e4a:	60b9      	str	r1, [r7, #8]
 8008e4c:	607a      	str	r2, [r7, #4]
 8008e4e:	73fb      	strb	r3, [r7, #15]
    uint32_t prioritygroup = 0x00U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
    assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

    prioritygroup = NVIC_GetPriorityGrouping();
 8008e54:	f7ff ff3e 	bl	8008cd4 <__NVIC_GetPriorityGrouping>
 8008e58:	6178      	str	r0, [r7, #20]

    NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	68b9      	ldr	r1, [r7, #8]
 8008e5e:	6978      	ldr	r0, [r7, #20]
 8008e60:	f7ff ff8e 	bl	8008d80 <NVIC_EncodePriority>
 8008e64:	4602      	mov	r2, r0
 8008e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7ff ff5d 	bl	8008d2c <__NVIC_SetPriority>
}
 8008e72:	bf00      	nop
 8008e74:	3718      	adds	r7, #24
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	4603      	mov	r3, r0
 8008e82:	71fb      	strb	r3, [r7, #7]
    /* Check the parameters */
    assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

    /* Enable interrupt */
    NVIC_EnableIRQ(IRQn);
 8008e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7ff ff31 	bl	8008cf0 <__NVIC_EnableIRQ>
}
 8008e8e:	bf00      	nop
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b082      	sub	sp, #8
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
    return SysTick_Config(TicksNumb);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7ff ffa2 	bl	8008de8 <SysTick_Config>
 8008ea4:	4603      	mov	r3, r0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
	...

08008eb0 <HAL_GPIO_Init>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8008eb0:	b480      	push	{r7}
 8008eb2:	b089      	sub	sp, #36	@ 0x24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
    uint32_t position;
    uint32_t ioposition = 0x00U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	617b      	str	r3, [r7, #20]
    uint32_t iocurrent = 0x00U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	613b      	str	r3, [r7, #16]
    uint32_t temp = 0x00U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	61bb      	str	r3, [r7, #24]
    assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
    assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
    assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

    /* Configure the port pins */
    for (position = 0U; position < GPIO_NUMBER; position++) {
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	61fb      	str	r3, [r7, #28]
 8008eca:	e159      	b.n	8009180 <HAL_GPIO_Init+0x2d0>
        /* Get the IO position */
        ioposition = 0x01U << position;
 8008ecc:	2201      	movs	r2, #1
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed4:	617b      	str	r3, [r7, #20]
        /* Get the current IO position */
        iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	4013      	ands	r3, r2
 8008ede:	613b      	str	r3, [r7, #16]

        if (iocurrent == ioposition) {
 8008ee0:	693a      	ldr	r2, [r7, #16]
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	f040 8148 	bne.w	800917a <HAL_GPIO_Init+0x2ca>
            /*--------------------- GPIO Mode Configuration ------------------------*/
            /* In case of Output or Alternate function mode selection */
            if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	f003 0303 	and.w	r3, r3, #3
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d005      	beq.n	8008f02 <HAL_GPIO_Init+0x52>
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	f003 0303 	and.w	r3, r3, #3
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d130      	bne.n	8008f64 <HAL_GPIO_Init+0xb4>
                /* Check the Speed parameter */
                assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
                /* Configure the IO Speed */
                temp = GPIOx->OSPEEDR;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	2203      	movs	r2, #3
 8008f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f12:	43db      	mvns	r3, r3
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	4013      	ands	r3, r2
 8008f18:	61bb      	str	r3, [r7, #24]
                temp |= (GPIO_Init->Speed << (position * 2U));
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	68da      	ldr	r2, [r3, #12]
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	005b      	lsls	r3, r3, #1
 8008f22:	fa02 f303 	lsl.w	r3, r2, r3
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	61bb      	str	r3, [r7, #24]
                GPIOx->OSPEEDR = temp;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	69ba      	ldr	r2, [r7, #24]
 8008f30:	609a      	str	r2, [r3, #8]

                /* Configure the IO Output Type */
                temp = GPIOx->OTYPER;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_OTYPER_OT_0 << position);
 8008f38:	2201      	movs	r2, #1
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f40:	43db      	mvns	r3, r3
 8008f42:	69ba      	ldr	r2, [r7, #24]
 8008f44:	4013      	ands	r3, r2
 8008f46:	61bb      	str	r3, [r7, #24]
                temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	091b      	lsrs	r3, r3, #4
 8008f4e:	f003 0201 	and.w	r2, r3, #1
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	fa02 f303 	lsl.w	r3, r2, r3
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	61bb      	str	r3, [r7, #24]
                GPIOx->OTYPER = temp;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	605a      	str	r2, [r3, #4]
            }

            if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	f003 0303 	and.w	r3, r3, #3
 8008f6c:	2b03      	cmp	r3, #3
 8008f6e:	d017      	beq.n	8008fa0 <HAL_GPIO_Init+0xf0>
                /* Check the parameters */
                assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

                /* Activate the Pull-up or Pull down resistor for the current IO */
                temp = GPIOx->PUPDR;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	005b      	lsls	r3, r3, #1
 8008f7a:	2203      	movs	r2, #3
 8008f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f80:	43db      	mvns	r3, r3
 8008f82:	69ba      	ldr	r2, [r7, #24]
 8008f84:	4013      	ands	r3, r2
 8008f86:	61bb      	str	r3, [r7, #24]
                temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	689a      	ldr	r2, [r3, #8]
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	fa02 f303 	lsl.w	r3, r2, r3
 8008f94:	69ba      	ldr	r2, [r7, #24]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	61bb      	str	r3, [r7, #24]
                GPIOx->PUPDR = temp;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	60da      	str	r2, [r3, #12]
            }

            /* In case of Alternate function mode selection */
            if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	f003 0303 	and.w	r3, r3, #3
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d123      	bne.n	8008ff4 <HAL_GPIO_Init+0x144>
                /* Check the Alternate function parameter */
                assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
                /* Configure Alternate function mapped with the current IO */
                temp = GPIOx->AFR[position >> 3U];
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	08da      	lsrs	r2, r3, #3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3208      	adds	r2, #8
 8008fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb8:	61bb      	str	r3, [r7, #24]
                temp &= ~(0xFU << ((uint32_t) (position & 0x07U) * 4U));
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	f003 0307 	and.w	r3, r3, #7
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	220f      	movs	r2, #15
 8008fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc8:	43db      	mvns	r3, r3
 8008fca:	69ba      	ldr	r2, [r7, #24]
 8008fcc:	4013      	ands	r3, r2
 8008fce:	61bb      	str	r3, [r7, #24]
                temp |= ((uint32_t) (GPIO_Init->Alternate) << (((uint32_t) position & 0x07U) * 4U));
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	691a      	ldr	r2, [r3, #16]
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	f003 0307 	and.w	r3, r3, #7
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe0:	69ba      	ldr	r2, [r7, #24]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	61bb      	str	r3, [r7, #24]
                GPIOx->AFR[position >> 3U] = temp;
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	08da      	lsrs	r2, r3, #3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	3208      	adds	r2, #8
 8008fee:	69b9      	ldr	r1, [r7, #24]
 8008ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            }

            /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
            temp = GPIOx->MODER;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	61bb      	str	r3, [r7, #24]
            temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	2203      	movs	r2, #3
 8009000:	fa02 f303 	lsl.w	r3, r2, r3
 8009004:	43db      	mvns	r3, r3
 8009006:	69ba      	ldr	r2, [r7, #24]
 8009008:	4013      	ands	r3, r2
 800900a:	61bb      	str	r3, [r7, #24]
            temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f003 0203 	and.w	r2, r3, #3
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	005b      	lsls	r3, r3, #1
 8009018:	fa02 f303 	lsl.w	r3, r2, r3
 800901c:	69ba      	ldr	r2, [r7, #24]
 800901e:	4313      	orrs	r3, r2
 8009020:	61bb      	str	r3, [r7, #24]
            GPIOx->MODER = temp;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	601a      	str	r2, [r3, #0]

            /*--------------------- EXTI Mode Configuration ------------------------*/
            /* Configure the External Interrupt or event for the current IO */
            if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 80a2 	beq.w	800917a <HAL_GPIO_Init+0x2ca>
                /* Enable SYSCFG Clock */
                __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009036:	2300      	movs	r3, #0
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	4b57      	ldr	r3, [pc, #348]	@ (8009198 <HAL_GPIO_Init+0x2e8>)
 800903c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800903e:	4a56      	ldr	r2, [pc, #344]	@ (8009198 <HAL_GPIO_Init+0x2e8>)
 8009040:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009044:	6453      	str	r3, [r2, #68]	@ 0x44
 8009046:	4b54      	ldr	r3, [pc, #336]	@ (8009198 <HAL_GPIO_Init+0x2e8>)
 8009048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800904a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800904e:	60fb      	str	r3, [r7, #12]
 8009050:	68fb      	ldr	r3, [r7, #12]

                temp = SYSCFG->EXTICR[position >> 2U];
 8009052:	4a52      	ldr	r2, [pc, #328]	@ (800919c <HAL_GPIO_Init+0x2ec>)
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	089b      	lsrs	r3, r3, #2
 8009058:	3302      	adds	r3, #2
 800905a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800905e:	61bb      	str	r3, [r7, #24]
                temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	f003 0303 	and.w	r3, r3, #3
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	220f      	movs	r2, #15
 800906a:	fa02 f303 	lsl.w	r3, r2, r3
 800906e:	43db      	mvns	r3, r3
 8009070:	69ba      	ldr	r2, [r7, #24]
 8009072:	4013      	ands	r3, r2
 8009074:	61bb      	str	r3, [r7, #24]
                temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a49      	ldr	r2, [pc, #292]	@ (80091a0 <HAL_GPIO_Init+0x2f0>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d019      	beq.n	80090b2 <HAL_GPIO_Init+0x202>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a48      	ldr	r2, [pc, #288]	@ (80091a4 <HAL_GPIO_Init+0x2f4>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d013      	beq.n	80090ae <HAL_GPIO_Init+0x1fe>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a47      	ldr	r2, [pc, #284]	@ (80091a8 <HAL_GPIO_Init+0x2f8>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d00d      	beq.n	80090aa <HAL_GPIO_Init+0x1fa>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a46      	ldr	r2, [pc, #280]	@ (80091ac <HAL_GPIO_Init+0x2fc>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d007      	beq.n	80090a6 <HAL_GPIO_Init+0x1f6>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a45      	ldr	r2, [pc, #276]	@ (80091b0 <HAL_GPIO_Init+0x300>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d101      	bne.n	80090a2 <HAL_GPIO_Init+0x1f2>
 800909e:	2304      	movs	r3, #4
 80090a0:	e008      	b.n	80090b4 <HAL_GPIO_Init+0x204>
 80090a2:	2307      	movs	r3, #7
 80090a4:	e006      	b.n	80090b4 <HAL_GPIO_Init+0x204>
 80090a6:	2303      	movs	r3, #3
 80090a8:	e004      	b.n	80090b4 <HAL_GPIO_Init+0x204>
 80090aa:	2302      	movs	r3, #2
 80090ac:	e002      	b.n	80090b4 <HAL_GPIO_Init+0x204>
 80090ae:	2301      	movs	r3, #1
 80090b0:	e000      	b.n	80090b4 <HAL_GPIO_Init+0x204>
 80090b2:	2300      	movs	r3, #0
 80090b4:	69fa      	ldr	r2, [r7, #28]
 80090b6:	f002 0203 	and.w	r2, r2, #3
 80090ba:	0092      	lsls	r2, r2, #2
 80090bc:	4093      	lsls	r3, r2
 80090be:	69ba      	ldr	r2, [r7, #24]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	61bb      	str	r3, [r7, #24]
                SYSCFG->EXTICR[position >> 2U] = temp;
 80090c4:	4935      	ldr	r1, [pc, #212]	@ (800919c <HAL_GPIO_Init+0x2ec>)
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	089b      	lsrs	r3, r3, #2
 80090ca:	3302      	adds	r3, #2
 80090cc:	69ba      	ldr	r2, [r7, #24]
 80090ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                /* Clear Rising Falling edge configuration */
                temp = EXTI->RTSR;
 80090d2:	4b38      	ldr	r3, [pc, #224]	@ (80091b4 <HAL_GPIO_Init+0x304>)
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t) iocurrent);
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	43db      	mvns	r3, r3
 80090dc:	69ba      	ldr	r2, [r7, #24]
 80090de:	4013      	ands	r3, r2
 80090e0:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_GPIO_Init+0x246>
                    temp |= iocurrent;
 80090ee:	69ba      	ldr	r2, [r7, #24]
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	61bb      	str	r3, [r7, #24]
                }
                EXTI->RTSR = temp;
 80090f6:	4a2f      	ldr	r2, [pc, #188]	@ (80091b4 <HAL_GPIO_Init+0x304>)
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	6093      	str	r3, [r2, #8]

                temp = EXTI->FTSR;
 80090fc:	4b2d      	ldr	r3, [pc, #180]	@ (80091b4 <HAL_GPIO_Init+0x304>)
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t) iocurrent);
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	43db      	mvns	r3, r3
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	4013      	ands	r3, r2
 800910a:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009114:	2b00      	cmp	r3, #0
 8009116:	d003      	beq.n	8009120 <HAL_GPIO_Init+0x270>
                    temp |= iocurrent;
 8009118:	69ba      	ldr	r2, [r7, #24]
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	4313      	orrs	r3, r2
 800911e:	61bb      	str	r3, [r7, #24]
                }
                EXTI->FTSR = temp;
 8009120:	4a24      	ldr	r2, [pc, #144]	@ (80091b4 <HAL_GPIO_Init+0x304>)
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	60d3      	str	r3, [r2, #12]

                temp = EXTI->EMR;
 8009126:	4b23      	ldr	r3, [pc, #140]	@ (80091b4 <HAL_GPIO_Init+0x304>)
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t) iocurrent);
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	43db      	mvns	r3, r3
 8009130:	69ba      	ldr	r2, [r7, #24]
 8009132:	4013      	ands	r3, r2
 8009134:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <HAL_GPIO_Init+0x29a>
                    temp |= iocurrent;
 8009142:	69ba      	ldr	r2, [r7, #24]
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	4313      	orrs	r3, r2
 8009148:	61bb      	str	r3, [r7, #24]
                }
                EXTI->EMR = temp;
 800914a:	4a1a      	ldr	r2, [pc, #104]	@ (80091b4 <HAL_GPIO_Init+0x304>)
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	6053      	str	r3, [r2, #4]

                /* Clear EXTI line configuration */
                temp = EXTI->IMR;
 8009150:	4b18      	ldr	r3, [pc, #96]	@ (80091b4 <HAL_GPIO_Init+0x304>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t) iocurrent);
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	43db      	mvns	r3, r3
 800915a:	69ba      	ldr	r2, [r7, #24]
 800915c:	4013      	ands	r3, r2
 800915e:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d003      	beq.n	8009174 <HAL_GPIO_Init+0x2c4>
                    temp |= iocurrent;
 800916c:	69ba      	ldr	r2, [r7, #24]
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	4313      	orrs	r3, r2
 8009172:	61bb      	str	r3, [r7, #24]
                }
                EXTI->IMR = temp;
 8009174:	4a0f      	ldr	r2, [pc, #60]	@ (80091b4 <HAL_GPIO_Init+0x304>)
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	6013      	str	r3, [r2, #0]
    for (position = 0U; position < GPIO_NUMBER; position++) {
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	3301      	adds	r3, #1
 800917e:	61fb      	str	r3, [r7, #28]
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	2b0f      	cmp	r3, #15
 8009184:	f67f aea2 	bls.w	8008ecc <HAL_GPIO_Init+0x1c>
            }
        }
    }
}
 8009188:	bf00      	nop
 800918a:	bf00      	nop
 800918c:	3724      	adds	r7, #36	@ 0x24
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	40023800 	.word	0x40023800
 800919c:	40013800 	.word	0x40013800
 80091a0:	40020000 	.word	0x40020000
 80091a4:	40020400 	.word	0x40020400
 80091a8:	40020800 	.word	0x40020800
 80091ac:	40020c00 	.word	0x40020c00
 80091b0:	40021000 	.word	0x40021000
 80091b4:	40013c00 	.word	0x40013c00

080091b8 <HAL_GPIO_WritePin>:
 *          This parameter can be one of the GPIO_PinState enum values:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState) {
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	460b      	mov	r3, r1
 80091c2:	807b      	strh	r3, [r7, #2]
 80091c4:	4613      	mov	r3, r2
 80091c6:	707b      	strb	r3, [r7, #1]
    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));
    assert_param(IS_GPIO_PIN_ACTION(PinState));

    if (PinState != GPIO_PIN_RESET) {
 80091c8:	787b      	ldrb	r3, [r7, #1]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <HAL_GPIO_WritePin+0x1e>
        GPIOx->BSRR = GPIO_Pin;
 80091ce:	887a      	ldrh	r2, [r7, #2]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	619a      	str	r2, [r3, #24]
    } else {
        GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
    }
}
 80091d4:	e003      	b.n	80091de <HAL_GPIO_WritePin+0x26>
        GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
 80091d6:	887b      	ldrh	r3, [r7, #2]
 80091d8:	041a      	lsls	r2, r3, #16
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	619a      	str	r2, [r3, #24]
}
 80091de:	bf00      	nop
 80091e0:	370c      	adds	r7, #12
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <HAL_GPIO_TogglePin>:
 * @param  GPIOx Where x can be (A..K) to select the GPIO peripheral for STM32F429X device or
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Pin Specifies the pins to be toggled.
 * @retval None
 */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80091ea:	b480      	push	{r7}
 80091ec:	b085      	sub	sp, #20
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	460b      	mov	r3, r1
 80091f4:	807b      	strh	r3, [r7, #2]

    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));

    /* get current Output Data Register value */
    odr = GPIOx->ODR;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	60fb      	str	r3, [r7, #12]

    /* Set selected pins that were at low level, and reset ones that were high */
    GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80091fc:	887a      	ldrh	r2, [r7, #2]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	4013      	ands	r3, r2
 8009202:	041a      	lsls	r2, r3, #16
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	43d9      	mvns	r1, r3
 8009208:	887b      	ldrh	r3, [r7, #2]
 800920a:	400b      	ands	r3, r1
 800920c:	431a      	orrs	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	619a      	str	r2, [r3, #24]
}
 8009212:	bf00      	nop
 8009214:	3714      	adds	r7, #20
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <HAL_PCD_Init>:
 * @brief  Initializes the PCD according to the specified
 *         parameters in the PCD_InitTypeDef and initialize the associated handle.
 * @param  hpcd PCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd) {
 800921e:	b580      	push	{r7, lr}
 8009220:	b086      	sub	sp, #24
 8009222:	af02      	add	r7, sp, #8
 8009224:	6078      	str	r0, [r7, #4]
    const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
    uint8_t i;

    /* Check the PCD handle allocation */
    if (hpcd == NULL) {
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <HAL_PCD_Init+0x12>
        return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e101      	b.n	8009434 <HAL_PCD_Init+0x216>

    /* Check the parameters */
    assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
    USBx = hpcd->Instance;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

    if (hpcd->State == HAL_PCD_STATE_RESET) {
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	d106      	bne.n	8009250 <HAL_PCD_Init+0x32>
        /* Allocate lock resource and initialize it */
        hpcd->Lock = HAL_UNLOCKED;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
        HAL_PCD_MspInit(hpcd);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f005 ff7c 	bl	800f148 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
    }

    hpcd->State = HAL_PCD_STATE_BUSY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2203      	movs	r2, #3
 8009254:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
    /* Disable DMA mode for FS instance */
    if (USBx == USB_OTG_FS) {
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800925e:	d102      	bne.n	8009266 <HAL_PCD_Init+0x48>
        hpcd->Init.dma_enable = 0U;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	719a      	strb	r2, [r3, #6]
    }
#endif /* defined (USB_OTG_FS) */

    /* Disable the Interrupts */
    __HAL_PCD_DISABLE(hpcd);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4618      	mov	r0, r3
 800926c:	f002 fba5 	bl	800b9ba <USB_DisableGlobalInt>

    /*Init the Core (common init.) */
    if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK) {
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6818      	ldr	r0, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	7c1a      	ldrb	r2, [r3, #16]
 8009278:	f88d 2000 	strb.w	r2, [sp]
 800927c:	3304      	adds	r3, #4
 800927e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009280:	f002 fa84 	bl	800b78c <USB_CoreInit>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d005      	beq.n	8009296 <HAL_PCD_Init+0x78>
        hpcd->State = HAL_PCD_STATE_ERROR;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2202      	movs	r2, #2
 800928e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
        return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e0ce      	b.n	8009434 <HAL_PCD_Init+0x216>
    }

    /* Force Device Mode */
    if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK) {
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2100      	movs	r1, #0
 800929c:	4618      	mov	r0, r3
 800929e:	f002 fb9d 	bl	800b9dc <USB_SetCurrentMode>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d005      	beq.n	80092b4 <HAL_PCD_Init+0x96>
        hpcd->State = HAL_PCD_STATE_ERROR;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2202      	movs	r2, #2
 80092ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
        return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e0bf      	b.n	8009434 <HAL_PCD_Init+0x216>
    }

    /* Init endpoints structures */
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 80092b4:	2300      	movs	r3, #0
 80092b6:	73fb      	strb	r3, [r7, #15]
 80092b8:	e04a      	b.n	8009350 <HAL_PCD_Init+0x132>
        /* Init ep structure */
        hpcd->IN_ep[i].is_in = 1U;
 80092ba:	7bfa      	ldrb	r2, [r7, #15]
 80092bc:	6879      	ldr	r1, [r7, #4]
 80092be:	4613      	mov	r3, r2
 80092c0:	00db      	lsls	r3, r3, #3
 80092c2:	4413      	add	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	440b      	add	r3, r1
 80092c8:	3315      	adds	r3, #21
 80092ca:	2201      	movs	r2, #1
 80092cc:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].num = i;
 80092ce:	7bfa      	ldrb	r2, [r7, #15]
 80092d0:	6879      	ldr	r1, [r7, #4]
 80092d2:	4613      	mov	r3, r2
 80092d4:	00db      	lsls	r3, r3, #3
 80092d6:	4413      	add	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	440b      	add	r3, r1
 80092dc:	3314      	adds	r3, #20
 80092de:	7bfa      	ldrb	r2, [r7, #15]
 80092e0:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].tx_fifo_num = i;
 80092e2:	7bfa      	ldrb	r2, [r7, #15]
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
 80092e6:	b298      	uxth	r0, r3
 80092e8:	6879      	ldr	r1, [r7, #4]
 80092ea:	4613      	mov	r3, r2
 80092ec:	00db      	lsls	r3, r3, #3
 80092ee:	4413      	add	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	440b      	add	r3, r1
 80092f4:	332e      	adds	r3, #46	@ 0x2e
 80092f6:	4602      	mov	r2, r0
 80092f8:	801a      	strh	r2, [r3, #0]
        /* Control until ep is activated */
        hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80092fa:	7bfa      	ldrb	r2, [r7, #15]
 80092fc:	6879      	ldr	r1, [r7, #4]
 80092fe:	4613      	mov	r3, r2
 8009300:	00db      	lsls	r3, r3, #3
 8009302:	4413      	add	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	440b      	add	r3, r1
 8009308:	3318      	adds	r3, #24
 800930a:	2200      	movs	r2, #0
 800930c:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].maxpacket = 0U;
 800930e:	7bfa      	ldrb	r2, [r7, #15]
 8009310:	6879      	ldr	r1, [r7, #4]
 8009312:	4613      	mov	r3, r2
 8009314:	00db      	lsls	r3, r3, #3
 8009316:	4413      	add	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	440b      	add	r3, r1
 800931c:	331c      	adds	r3, #28
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]
        hpcd->IN_ep[i].xfer_buff = 0U;
 8009322:	7bfa      	ldrb	r2, [r7, #15]
 8009324:	6879      	ldr	r1, [r7, #4]
 8009326:	4613      	mov	r3, r2
 8009328:	00db      	lsls	r3, r3, #3
 800932a:	4413      	add	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	440b      	add	r3, r1
 8009330:	3320      	adds	r3, #32
 8009332:	2200      	movs	r2, #0
 8009334:	601a      	str	r2, [r3, #0]
        hpcd->IN_ep[i].xfer_len = 0U;
 8009336:	7bfa      	ldrb	r2, [r7, #15]
 8009338:	6879      	ldr	r1, [r7, #4]
 800933a:	4613      	mov	r3, r2
 800933c:	00db      	lsls	r3, r3, #3
 800933e:	4413      	add	r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	440b      	add	r3, r1
 8009344:	3324      	adds	r3, #36	@ 0x24
 8009346:	2200      	movs	r2, #0
 8009348:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 800934a:	7bfb      	ldrb	r3, [r7, #15]
 800934c:	3301      	adds	r3, #1
 800934e:	73fb      	strb	r3, [r7, #15]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	791b      	ldrb	r3, [r3, #4]
 8009354:	7bfa      	ldrb	r2, [r7, #15]
 8009356:	429a      	cmp	r2, r3
 8009358:	d3af      	bcc.n	80092ba <HAL_PCD_Init+0x9c>
    }

    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 800935a:	2300      	movs	r3, #0
 800935c:	73fb      	strb	r3, [r7, #15]
 800935e:	e044      	b.n	80093ea <HAL_PCD_Init+0x1cc>
        hpcd->OUT_ep[i].is_in = 0U;
 8009360:	7bfa      	ldrb	r2, [r7, #15]
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	4613      	mov	r3, r2
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	4413      	add	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	440b      	add	r3, r1
 800936e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8009372:	2200      	movs	r2, #0
 8009374:	701a      	strb	r2, [r3, #0]
        hpcd->OUT_ep[i].num = i;
 8009376:	7bfa      	ldrb	r2, [r7, #15]
 8009378:	6879      	ldr	r1, [r7, #4]
 800937a:	4613      	mov	r3, r2
 800937c:	00db      	lsls	r3, r3, #3
 800937e:	4413      	add	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	440b      	add	r3, r1
 8009384:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8009388:	7bfa      	ldrb	r2, [r7, #15]
 800938a:	701a      	strb	r2, [r3, #0]
        /* Control until ep is activated */
        hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800938c:	7bfa      	ldrb	r2, [r7, #15]
 800938e:	6879      	ldr	r1, [r7, #4]
 8009390:	4613      	mov	r3, r2
 8009392:	00db      	lsls	r3, r3, #3
 8009394:	4413      	add	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	440b      	add	r3, r1
 800939a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800939e:	2200      	movs	r2, #0
 80093a0:	701a      	strb	r2, [r3, #0]
        hpcd->OUT_ep[i].maxpacket = 0U;
 80093a2:	7bfa      	ldrb	r2, [r7, #15]
 80093a4:	6879      	ldr	r1, [r7, #4]
 80093a6:	4613      	mov	r3, r2
 80093a8:	00db      	lsls	r3, r3, #3
 80093aa:	4413      	add	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	440b      	add	r3, r1
 80093b0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80093b4:	2200      	movs	r2, #0
 80093b6:	601a      	str	r2, [r3, #0]
        hpcd->OUT_ep[i].xfer_buff = 0U;
 80093b8:	7bfa      	ldrb	r2, [r7, #15]
 80093ba:	6879      	ldr	r1, [r7, #4]
 80093bc:	4613      	mov	r3, r2
 80093be:	00db      	lsls	r3, r3, #3
 80093c0:	4413      	add	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	440b      	add	r3, r1
 80093c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80093ca:	2200      	movs	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]
        hpcd->OUT_ep[i].xfer_len = 0U;
 80093ce:	7bfa      	ldrb	r2, [r7, #15]
 80093d0:	6879      	ldr	r1, [r7, #4]
 80093d2:	4613      	mov	r3, r2
 80093d4:	00db      	lsls	r3, r3, #3
 80093d6:	4413      	add	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	440b      	add	r3, r1
 80093dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80093e0:	2200      	movs	r2, #0
 80093e2:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 80093e4:	7bfb      	ldrb	r3, [r7, #15]
 80093e6:	3301      	adds	r3, #1
 80093e8:	73fb      	strb	r3, [r7, #15]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	791b      	ldrb	r3, [r3, #4]
 80093ee:	7bfa      	ldrb	r2, [r7, #15]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d3b5      	bcc.n	8009360 <HAL_PCD_Init+0x142>
    }

    /* Init Device */
    if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK) {
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6818      	ldr	r0, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	7c1a      	ldrb	r2, [r3, #16]
 80093fc:	f88d 2000 	strb.w	r2, [sp]
 8009400:	3304      	adds	r3, #4
 8009402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009404:	f002 fb36 	bl	800ba74 <USB_DevInit>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d005      	beq.n	800941a <HAL_PCD_Init+0x1fc>
        hpcd->State = HAL_PCD_STATE_ERROR;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2202      	movs	r2, #2
 8009412:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
        return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e00c      	b.n	8009434 <HAL_PCD_Init+0x216>
    }

    hpcd->USB_Address = 0U;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	745a      	strb	r2, [r3, #17]
    hpcd->State = HAL_PCD_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    (void) USB_DevDisconnect(hpcd->Instance);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4618      	mov	r0, r3
 800942e:	f003 fb80 	bl	800cb32 <USB_DevDisconnect>

    return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_PCD_Start>:
/**
 * @brief  Start the USB device
 * @param  hpcd PCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd) {
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
    USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	60fb      	str	r3, [r7, #12]

    __HAL_LOCK(hpcd);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009450:	2b01      	cmp	r3, #1
 8009452:	d101      	bne.n	8009458 <HAL_PCD_Start+0x1c>
 8009454:	2302      	movs	r3, #2
 8009456:	e022      	b.n	800949e <HAL_PCD_Start+0x62>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) && (hpcd->Init.battery_charging_enable == 1U)) {
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009468:	2b00      	cmp	r3, #0
 800946a:	d009      	beq.n	8009480 <HAL_PCD_Start+0x44>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	7b5b      	ldrb	r3, [r3, #13]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d105      	bne.n	8009480 <HAL_PCD_Start+0x44>
        /* Enable USB Transceiver */
        USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009478:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    __HAL_PCD_ENABLE(hpcd);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4618      	mov	r0, r3
 8009486:	f002 fa87 	bl	800b998 <USB_EnableGlobalInt>
    (void) USB_DevConnect(hpcd->Instance);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4618      	mov	r0, r3
 8009490:	f003 fb2e 	bl	800caf0 <USB_DevConnect>
    __HAL_UNLOCK(hpcd);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <HAL_PCD_IRQHandler>:
/**
 * @brief  Handles PCD interrupt request.
 * @param  hpcd PCD handle
 * @retval HAL status
 */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd) {
 80094a6:	b590      	push	{r4, r7, lr}
 80094a8:	b08d      	sub	sp, #52	@ 0x34
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
    USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	623b      	str	r3, [r7, #32]
    uint32_t USBx_BASE = (uint32_t) USBx;
 80094b4:	6a3b      	ldr	r3, [r7, #32]
 80094b6:	61fb      	str	r3, [r7, #28]
    uint32_t epnum;
    uint32_t fifoemptymsk;
    uint32_t RegVal;

    /* ensure that we are in device mode */
    if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE) {
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4618      	mov	r0, r3
 80094be:	f003 fbec 	bl	800cc9a <USB_GetMode>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f040 848c 	bne.w	8009de2 <HAL_PCD_IRQHandler+0x93c>
        /* avoid spurious interrupt */
        if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) {
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f003 fb50 	bl	800cb74 <USB_ReadInterrupts>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 8482 	beq.w	8009de0 <HAL_PCD_IRQHandler+0x93a>
            return;
        }

        /* store current frame number */
        hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	0a1b      	lsrs	r3, r3, #8
 80094e6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS)) {
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4618      	mov	r0, r3
 80094f6:	f003 fb3d 	bl	800cb74 <USB_ReadInterrupts>
 80094fa:	4603      	mov	r3, r0
 80094fc:	f003 0302 	and.w	r3, r3, #2
 8009500:	2b02      	cmp	r3, #2
 8009502:	d107      	bne.n	8009514 <HAL_PCD_IRQHandler+0x6e>
            /* incorrect mode, acknowledge the interrupt */
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	695a      	ldr	r2, [r3, #20]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f002 0202 	and.w	r2, r2, #2
 8009512:	615a      	str	r2, [r3, #20]
        }

        /* Handle RxQLevel Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL)) {
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4618      	mov	r0, r3
 800951a:	f003 fb2b 	bl	800cb74 <USB_ReadInterrupts>
 800951e:	4603      	mov	r3, r0
 8009520:	f003 0310 	and.w	r3, r3, #16
 8009524:	2b10      	cmp	r3, #16
 8009526:	d161      	bne.n	80095ec <HAL_PCD_IRQHandler+0x146>
            USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	699a      	ldr	r2, [r3, #24]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f022 0210 	bic.w	r2, r2, #16
 8009536:	619a      	str	r2, [r3, #24]

            RegVal = USBx->GRXSTSP;
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	61bb      	str	r3, [r7, #24]

            ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	f003 020f 	and.w	r2, r3, #15
 8009544:	4613      	mov	r3, r2
 8009546:	00db      	lsls	r3, r3, #3
 8009548:	4413      	add	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	4413      	add	r3, r2
 8009554:	3304      	adds	r3, #4
 8009556:	617b      	str	r3, [r7, #20]

            if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_DATA_UPDT) {
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800955e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009562:	d124      	bne.n	80095ae <HAL_PCD_IRQHandler+0x108>
                if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U) {
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800956a:	4013      	ands	r3, r2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d035      	beq.n	80095dc <HAL_PCD_IRQHandler+0x136>
                    (void) USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t) ((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	68d9      	ldr	r1, [r3, #12]
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	091b      	lsrs	r3, r3, #4
 8009578:	b29b      	uxth	r3, r3
 800957a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800957e:	b29b      	uxth	r3, r3
 8009580:	461a      	mov	r2, r3
 8009582:	6a38      	ldr	r0, [r7, #32]
 8009584:	f003 f962 	bl	800c84c <USB_ReadPacket>

                    ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	68da      	ldr	r2, [r3, #12]
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	091b      	lsrs	r3, r3, #4
 8009590:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009594:	441a      	add	r2, r3
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	60da      	str	r2, [r3, #12]
                    ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	695a      	ldr	r2, [r3, #20]
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	091b      	lsrs	r3, r3, #4
 80095a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095a6:	441a      	add	r2, r3
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	615a      	str	r2, [r3, #20]
 80095ac:	e016      	b.n	80095dc <HAL_PCD_IRQHandler+0x136>
                }
            } else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT) {
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80095b4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80095b8:	d110      	bne.n	80095dc <HAL_PCD_IRQHandler+0x136>
                (void) USB_ReadPacket(USBx, (uint8_t*) hpcd->Setup, 8U);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80095c0:	2208      	movs	r2, #8
 80095c2:	4619      	mov	r1, r3
 80095c4:	6a38      	ldr	r0, [r7, #32]
 80095c6:	f003 f941 	bl	800c84c <USB_ReadPacket>
                ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	695a      	ldr	r2, [r3, #20]
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	091b      	lsrs	r3, r3, #4
 80095d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095d6:	441a      	add	r2, r3
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	615a      	str	r2, [r3, #20]
            } else {
                /* ... */
            }

            USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	699a      	ldr	r2, [r3, #24]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f042 0210 	orr.w	r2, r2, #16
 80095ea:	619a      	str	r2, [r3, #24]
        }

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT)) {
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f003 fabf 	bl	800cb74 <USB_ReadInterrupts>
 80095f6:	4603      	mov	r3, r0
 80095f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80095fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009600:	f040 80a7 	bne.w	8009752 <HAL_PCD_IRQHandler+0x2ac>
            epnum = 0U;
 8009604:	2300      	movs	r3, #0
 8009606:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Read in the device interrupt bits */
            ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4618      	mov	r0, r3
 800960e:	f003 fac4 	bl	800cb9a <USB_ReadDevAllOutEpInterrupt>
 8009612:	62b8      	str	r0, [r7, #40]	@ 0x28

            while (ep_intr != 0U) {
 8009614:	e099      	b.n	800974a <HAL_PCD_IRQHandler+0x2a4>
                if ((ep_intr & 0x1U) != 0U) {
 8009616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 808e 	beq.w	800973e <HAL_PCD_IRQHandler+0x298>
                    epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t) epnum);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009628:	b2d2      	uxtb	r2, r2
 800962a:	4611      	mov	r1, r2
 800962c:	4618      	mov	r0, r3
 800962e:	f003 fae8 	bl	800cc02 <USB_ReadDevOutEPInterrupt>
 8009632:	6138      	str	r0, [r7, #16]

                    if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC) {
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00c      	beq.n	8009658 <HAL_PCD_IRQHandler+0x1b2>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800963e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009640:	015a      	lsls	r2, r3, #5
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	4413      	add	r3, r2
 8009646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800964a:	461a      	mov	r2, r3
 800964c:	2301      	movs	r3, #1
 800964e:	6093      	str	r3, [r2, #8]
                        (void) PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009650:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fea4 	bl	800a3a0 <PCD_EP_OutXfrComplete_int>
                    }

                    if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) {
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	f003 0308 	and.w	r3, r3, #8
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00c      	beq.n	800967c <HAL_PCD_IRQHandler+0x1d6>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009664:	015a      	lsls	r2, r3, #5
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	4413      	add	r3, r2
 800966a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800966e:	461a      	mov	r2, r3
 8009670:	2308      	movs	r3, #8
 8009672:	6093      	str	r3, [r2, #8]
                        /* Class B setup phase done for previous decoded setup */
                        (void) PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009674:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 ff7a 	bl	800a570 <PCD_EP_OutSetupPacket_int>
                    }

                    if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS) {
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f003 0310 	and.w	r3, r3, #16
 8009682:	2b00      	cmp	r3, #0
 8009684:	d008      	beq.n	8009698 <HAL_PCD_IRQHandler+0x1f2>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	4413      	add	r3, r2
 800968e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009692:	461a      	mov	r2, r3
 8009694:	2310      	movs	r3, #16
 8009696:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear OUT Endpoint disable interrupt */
                    if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD) {
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	f003 0302 	and.w	r3, r3, #2
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d030      	beq.n	8009704 <HAL_PCD_IRQHandler+0x25e>
                        if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF) {
 80096a2:	6a3b      	ldr	r3, [r7, #32]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096aa:	2b80      	cmp	r3, #128	@ 0x80
 80096ac:	d109      	bne.n	80096c2 <HAL_PCD_IRQHandler+0x21c>
                            USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	69fa      	ldr	r2, [r7, #28]
 80096b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80096c0:	6053      	str	r3, [r2, #4]
                        }

                        ep = &hpcd->OUT_ep[epnum];
 80096c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096c4:	4613      	mov	r3, r2
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	4413      	add	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	4413      	add	r3, r2
 80096d4:	3304      	adds	r3, #4
 80096d6:	617b      	str	r3, [r7, #20]

                        if (ep->is_iso_incomplete == 1U) {
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	78db      	ldrb	r3, [r3, #3]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d108      	bne.n	80096f2 <HAL_PCD_IRQHandler+0x24c>
                            ep->is_iso_incomplete = 0U;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	2200      	movs	r2, #0
 80096e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
                            HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t) epnum);
 80096e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	4619      	mov	r1, r3
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f005 fe27 	bl	800f340 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                        }

                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80096f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096fe:	461a      	mov	r2, r3
 8009700:	2302      	movs	r3, #2
 8009702:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear Status Phase Received interrupt */
                    if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	f003 0320 	and.w	r3, r3, #32
 800970a:	2b00      	cmp	r3, #0
 800970c:	d008      	beq.n	8009720 <HAL_PCD_IRQHandler+0x27a>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800970e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	4413      	add	r3, r2
 8009716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800971a:	461a      	mov	r2, r3
 800971c:	2320      	movs	r3, #32
 800971e:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear OUT NAK interrupt */
                    if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK) {
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d009      	beq.n	800973e <HAL_PCD_IRQHandler+0x298>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800972a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972c:	015a      	lsls	r2, r3, #5
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	4413      	add	r3, r2
 8009732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009736:	461a      	mov	r2, r3
 8009738:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800973c:	6093      	str	r3, [r2, #8]
                    }
                }
                epnum++;
 800973e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009740:	3301      	adds	r3, #1
 8009742:	627b      	str	r3, [r7, #36]	@ 0x24
                ep_intr >>= 1U;
 8009744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009746:	085b      	lsrs	r3, r3, #1
 8009748:	62bb      	str	r3, [r7, #40]	@ 0x28
            while (ep_intr != 0U) {
 800974a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800974c:	2b00      	cmp	r3, #0
 800974e:	f47f af62 	bne.w	8009616 <HAL_PCD_IRQHandler+0x170>
            }
        }

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT)) {
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4618      	mov	r0, r3
 8009758:	f003 fa0c 	bl	800cb74 <USB_ReadInterrupts>
 800975c:	4603      	mov	r3, r0
 800975e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009762:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009766:	f040 80db 	bne.w	8009920 <HAL_PCD_IRQHandler+0x47a>
            /* Read in the device interrupt bits */
            ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4618      	mov	r0, r3
 8009770:	f003 fa2d 	bl	800cbce <USB_ReadDevAllInEpInterrupt>
 8009774:	62b8      	str	r0, [r7, #40]	@ 0x28

            epnum = 0U;
 8009776:	2300      	movs	r3, #0
 8009778:	627b      	str	r3, [r7, #36]	@ 0x24

            while (ep_intr != 0U) {
 800977a:	e0cd      	b.n	8009918 <HAL_PCD_IRQHandler+0x472>
                if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800977c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977e:	f003 0301 	and.w	r3, r3, #1
 8009782:	2b00      	cmp	r3, #0
 8009784:	f000 80c2 	beq.w	800990c <HAL_PCD_IRQHandler+0x466>
                {
                    epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t) epnum);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800978e:	b2d2      	uxtb	r2, r2
 8009790:	4611      	mov	r1, r2
 8009792:	4618      	mov	r0, r3
 8009794:	f003 fa53 	bl	800cc3e <USB_ReadDevInEPInterrupt>
 8009798:	6138      	str	r0, [r7, #16]

                    if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC) {
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d057      	beq.n	8009854 <HAL_PCD_IRQHandler+0x3ae>
                        fifoemptymsk = (uint32_t) (0x1UL << (epnum & EP_ADDR_MSK));
 80097a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a6:	f003 030f 	and.w	r3, r3, #15
 80097aa:	2201      	movs	r2, #1
 80097ac:	fa02 f303 	lsl.w	r3, r2, r3
 80097b0:	60fb      	str	r3, [r7, #12]
                        USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	43db      	mvns	r3, r3
 80097be:	69f9      	ldr	r1, [r7, #28]
 80097c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097c4:	4013      	ands	r3, r2
 80097c6:	634b      	str	r3, [r1, #52]	@ 0x34

                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80097c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097d4:	461a      	mov	r2, r3
 80097d6:	2301      	movs	r3, #1
 80097d8:	6093      	str	r3, [r2, #8]

                        if (hpcd->Init.dma_enable == 1U) {
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	799b      	ldrb	r3, [r3, #6]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d132      	bne.n	8009848 <HAL_PCD_IRQHandler+0x3a2>
                            hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80097e2:	6879      	ldr	r1, [r7, #4]
 80097e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097e6:	4613      	mov	r3, r2
 80097e8:	00db      	lsls	r3, r3, #3
 80097ea:	4413      	add	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	440b      	add	r3, r1
 80097f0:	3320      	adds	r3, #32
 80097f2:	6819      	ldr	r1, [r3, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097f8:	4613      	mov	r3, r2
 80097fa:	00db      	lsls	r3, r3, #3
 80097fc:	4413      	add	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4403      	add	r3, r0
 8009802:	331c      	adds	r3, #28
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4419      	add	r1, r3
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800980c:	4613      	mov	r3, r2
 800980e:	00db      	lsls	r3, r3, #3
 8009810:	4413      	add	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4403      	add	r3, r0
 8009816:	3320      	adds	r3, #32
 8009818:	6019      	str	r1, [r3, #0]

                            /* this is ZLP, so prepare EP0 for next setup */
                            if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U)) {
 800981a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981c:	2b00      	cmp	r3, #0
 800981e:	d113      	bne.n	8009848 <HAL_PCD_IRQHandler+0x3a2>
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009824:	4613      	mov	r3, r2
 8009826:	00db      	lsls	r3, r3, #3
 8009828:	4413      	add	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	440b      	add	r3, r1
 800982e:	3324      	adds	r3, #36	@ 0x24
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d108      	bne.n	8009848 <HAL_PCD_IRQHandler+0x3a2>
                                /* prepare to rx more setup packets */
                                (void) USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t*) hpcd->Setup);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6818      	ldr	r0, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009840:	461a      	mov	r2, r3
 8009842:	2101      	movs	r1, #1
 8009844:	f003 fa5a 	bl	800ccfc <USB_EP0_OutStart>
                        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
                        HAL_PCD_DataInStageCallback(hpcd, (uint8_t) epnum);
 8009848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984a:	b2db      	uxtb	r3, r3
 800984c:	4619      	mov	r1, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f005 fcfb 	bl	800f24a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                    }
                    if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC) {
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	f003 0308 	and.w	r3, r3, #8
 800985a:	2b00      	cmp	r3, #0
 800985c:	d008      	beq.n	8009870 <HAL_PCD_IRQHandler+0x3ca>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800985e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	4413      	add	r3, r2
 8009866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800986a:	461a      	mov	r2, r3
 800986c:	2308      	movs	r3, #8
 800986e:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE) {
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	f003 0310 	and.w	r3, r3, #16
 8009876:	2b00      	cmp	r3, #0
 8009878:	d008      	beq.n	800988c <HAL_PCD_IRQHandler+0x3e6>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800987a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987c:	015a      	lsls	r2, r3, #5
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	4413      	add	r3, r2
 8009882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009886:	461a      	mov	r2, r3
 8009888:	2310      	movs	r3, #16
 800988a:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE) {
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009892:	2b00      	cmp	r3, #0
 8009894:	d008      	beq.n	80098a8 <HAL_PCD_IRQHandler+0x402>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	4413      	add	r3, r2
 800989e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098a2:	461a      	mov	r2, r3
 80098a4:	2340      	movs	r3, #64	@ 0x40
 80098a6:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD) {
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	f003 0302 	and.w	r3, r3, #2
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d023      	beq.n	80098fa <HAL_PCD_IRQHandler+0x454>
                        (void) USB_FlushTxFifo(USBx, epnum);
 80098b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80098b4:	6a38      	ldr	r0, [r7, #32]
 80098b6:	f002 fa41 	bl	800bd3c <USB_FlushTxFifo>

                        ep = &hpcd->IN_ep[epnum];
 80098ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098bc:	4613      	mov	r3, r2
 80098be:	00db      	lsls	r3, r3, #3
 80098c0:	4413      	add	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	3310      	adds	r3, #16
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	4413      	add	r3, r2
 80098ca:	3304      	adds	r3, #4
 80098cc:	617b      	str	r3, [r7, #20]

                        if (ep->is_iso_incomplete == 1U) {
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	78db      	ldrb	r3, [r3, #3]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d108      	bne.n	80098e8 <HAL_PCD_IRQHandler+0x442>
                            ep->is_iso_incomplete = 0U;
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2200      	movs	r2, #0
 80098da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
                            HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t) epnum);
 80098dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	4619      	mov	r1, r3
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f005 fd3e 	bl	800f364 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                        }

                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80098e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ea:	015a      	lsls	r2, r3, #5
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	4413      	add	r3, r2
 80098f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098f4:	461a      	mov	r2, r3
 80098f6:	2302      	movs	r3, #2
 80098f8:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE) {
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009900:	2b00      	cmp	r3, #0
 8009902:	d003      	beq.n	800990c <HAL_PCD_IRQHandler+0x466>
                        (void) PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009904:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fcbd 	bl	800a286 <PCD_WriteEmptyTxFifo>
                    }
                }
                epnum++;
 800990c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990e:	3301      	adds	r3, #1
 8009910:	627b      	str	r3, [r7, #36]	@ 0x24
                ep_intr >>= 1U;
 8009912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009914:	085b      	lsrs	r3, r3, #1
 8009916:	62bb      	str	r3, [r7, #40]	@ 0x28
            while (ep_intr != 0U) {
 8009918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991a:	2b00      	cmp	r3, #0
 800991c:	f47f af2e 	bne.w	800977c <HAL_PCD_IRQHandler+0x2d6>
            }
        }

        /* Handle Resume Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT)) {
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4618      	mov	r0, r3
 8009926:	f003 f925 	bl	800cb74 <USB_ReadInterrupts>
 800992a:	4603      	mov	r3, r0
 800992c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009930:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009934:	d122      	bne.n	800997c <HAL_PCD_IRQHandler+0x4d6>
            /* Clear the Remote Wake-up Signaling */
            USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	69fa      	ldr	r2, [r7, #28]
 8009940:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009944:	f023 0301 	bic.w	r3, r3, #1
 8009948:	6053      	str	r3, [r2, #4]

            if (hpcd->LPM_State == LPM_L1) {
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8009950:	2b01      	cmp	r3, #1
 8009952:	d108      	bne.n	8009966 <HAL_PCD_IRQHandler+0x4c0>
                hpcd->LPM_State = LPM_L0;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
                HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800995c:	2100      	movs	r1, #0
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fea4 	bl	800a6ac <HAL_PCDEx_LPM_Callback>
 8009964:	e002      	b.n	800996c <HAL_PCD_IRQHandler+0x4c6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            } else {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
                HAL_PCD_ResumeCallback(hpcd);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f005 fcdc 	bl	800f324 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	695a      	ldr	r2, [r3, #20]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800997a:	615a      	str	r2, [r3, #20]
        }

        /* Handle Suspend Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP)) {
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4618      	mov	r0, r3
 8009982:	f003 f8f7 	bl	800cb74 <USB_ReadInterrupts>
 8009986:	4603      	mov	r3, r0
 8009988:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800998c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009990:	d112      	bne.n	80099b8 <HAL_PCD_IRQHandler+0x512>
            if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS) {
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d102      	bne.n	80099a8 <HAL_PCD_IRQHandler+0x502>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
                HAL_PCD_SuspendCallback(hpcd);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f005 fc98 	bl	800f2d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	695a      	ldr	r2, [r3, #20]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80099b6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
        /* Handle Reset Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST)) {
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4618      	mov	r0, r3
 80099be:	f003 f8d9 	bl	800cb74 <USB_ReadInterrupts>
 80099c2:	4603      	mov	r3, r0
 80099c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80099c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099cc:	f040 80b7 	bne.w	8009b3e <HAL_PCD_IRQHandler+0x698>
            USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	69fa      	ldr	r2, [r7, #28]
 80099da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099de:	f023 0301 	bic.w	r3, r3, #1
 80099e2:	6053      	str	r3, [r2, #4]
            (void) USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2110      	movs	r1, #16
 80099ea:	4618      	mov	r0, r3
 80099ec:	f002 f9a6 	bl	800bd3c <USB_FlushTxFifo>

            for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 80099f0:	2300      	movs	r3, #0
 80099f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099f4:	e046      	b.n	8009a84 <HAL_PCD_IRQHandler+0x5de>
                USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80099f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f8:	015a      	lsls	r2, r3, #5
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	4413      	add	r3, r2
 80099fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a02:	461a      	mov	r2, r3
 8009a04:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009a08:	6093      	str	r3, [r2, #8]
                USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0c:	015a      	lsls	r2, r3, #5
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	4413      	add	r3, r2
 8009a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a1a:	0151      	lsls	r1, r2, #5
 8009a1c:	69fa      	ldr	r2, [r7, #28]
 8009a1e:	440a      	add	r2, r1
 8009a20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a24:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a28:	6013      	str	r3, [r2, #0]
                USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a2c:	015a      	lsls	r2, r3, #5
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a36:	461a      	mov	r2, r3
 8009a38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009a3c:	6093      	str	r3, [r2, #8]
                USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a40:	015a      	lsls	r2, r3, #5
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a4e:	0151      	lsls	r1, r2, #5
 8009a50:	69fa      	ldr	r2, [r7, #28]
 8009a52:	440a      	add	r2, r1
 8009a54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a5c:	6013      	str	r3, [r2, #0]
                USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a60:	015a      	lsls	r2, r3, #5
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	4413      	add	r3, r2
 8009a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a6e:	0151      	lsls	r1, r2, #5
 8009a70:	69fa      	ldr	r2, [r7, #28]
 8009a72:	440a      	add	r2, r1
 8009a74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a78:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009a7c:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8009a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a80:	3301      	adds	r3, #1
 8009a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	791b      	ldrb	r3, [r3, #4]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d3b2      	bcc.n	80099f6 <HAL_PCD_IRQHandler+0x550>
            }
            USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a96:	69db      	ldr	r3, [r3, #28]
 8009a98:	69fa      	ldr	r2, [r7, #28]
 8009a9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a9e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8009aa2:	61d3      	str	r3, [r2, #28]

            if (hpcd->Init.use_dedicated_ep1 != 0U) {
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	7bdb      	ldrb	r3, [r3, #15]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d016      	beq.n	8009ada <HAL_PCD_IRQHandler+0x634>
                USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ab6:	69fa      	ldr	r2, [r7, #28]
 8009ab8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009abc:	f043 030b 	orr.w	r3, r3, #11
 8009ac0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                USB_OTG_DOEPMSK_XFRCM |
                USB_OTG_DOEPMSK_EPDM;

                USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009acc:	69fa      	ldr	r2, [r7, #28]
 8009ace:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ad2:	f043 030b 	orr.w	r3, r3, #11
 8009ad6:	6453      	str	r3, [r2, #68]	@ 0x44
 8009ad8:	e015      	b.n	8009b06 <HAL_PCD_IRQHandler+0x660>
                USB_OTG_DIEPMSK_XFRCM |
                USB_OTG_DIEPMSK_EPDM;
            } else {
                USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ae0:	695b      	ldr	r3, [r3, #20]
 8009ae2:	69fa      	ldr	r2, [r7, #28]
 8009ae4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ae8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009aec:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8009af0:	6153      	str	r3, [r2, #20]
                USB_OTG_DOEPMSK_XFRCM |
                USB_OTG_DOEPMSK_EPDM |
                USB_OTG_DOEPMSK_OTEPSPRM |
                USB_OTG_DOEPMSK_NAKM;

                USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	69fa      	ldr	r2, [r7, #28]
 8009afc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b00:	f043 030b 	orr.w	r3, r3, #11
 8009b04:	6113      	str	r3, [r2, #16]
                USB_OTG_DIEPMSK_XFRCM |
                USB_OTG_DIEPMSK_EPDM;
            }

            /* Set Default Address to 0 */
            USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	69fa      	ldr	r2, [r7, #28]
 8009b10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b14:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009b18:	6013      	str	r3, [r2, #0]

            /* setup EP0 to receive SETUP packets */
            (void) USB_EP0_OutStart(hpcd->Instance, (uint8_t) hpcd->Init.dma_enable, (uint8_t*) hpcd->Setup);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6818      	ldr	r0, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	7999      	ldrb	r1, [r3, #6]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009b28:	461a      	mov	r2, r3
 8009b2a:	f003 f8e7 	bl	800ccfc <USB_EP0_OutStart>

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	695a      	ldr	r2, [r3, #20]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8009b3c:	615a      	str	r2, [r3, #20]
        }

        /* Handle Enumeration done Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE)) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f003 f816 	bl	800cb74 <USB_ReadInterrupts>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b52:	d123      	bne.n	8009b9c <HAL_PCD_IRQHandler+0x6f6>
            (void) USB_ActivateSetup(hpcd->Instance);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f003 f8ac 	bl	800ccb6 <USB_ActivateSetup>
            hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4618      	mov	r0, r3
 8009b64:	f002 f963 	bl	800be2e <USB_GetDevSpeed>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	71da      	strb	r2, [r3, #7]

            /* Set USB Turnaround time */
            (void) USB_SetTurnaroundTime(hpcd->Instance, HAL_RCC_GetHCLKFreq(), (uint8_t) hpcd->Init.speed);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681c      	ldr	r4, [r3, #0]
 8009b74:	f001 f9ca 	bl	800af0c <HAL_RCC_GetHCLKFreq>
 8009b78:	4601      	mov	r1, r0
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	79db      	ldrb	r3, [r3, #7]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	4620      	mov	r0, r4
 8009b82:	f001 fe67 	bl	800b854 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
            HAL_PCD_ResetCallback(hpcd);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f005 fb87 	bl	800f29a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	695a      	ldr	r2, [r3, #20]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8009b9a:	615a      	str	r2, [r3, #20]
        }

        /* Handle SOF Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF)) {
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f002 ffe7 	bl	800cb74 <USB_ReadInterrupts>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	f003 0308 	and.w	r3, r3, #8
 8009bac:	2b08      	cmp	r3, #8
 8009bae:	d10a      	bne.n	8009bc6 <HAL_PCD_IRQHandler+0x720>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
            HAL_PCD_SOFCallback(hpcd);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f005 fb64 	bl	800f27e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	695a      	ldr	r2, [r3, #20]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f002 0208 	and.w	r2, r2, #8
 8009bc4:	615a      	str	r2, [r3, #20]
        }

        /* Handle Global OUT NAK effective Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF)) {
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f002 ffd2 	bl	800cb74 <USB_ReadInterrupts>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bd6:	2b80      	cmp	r3, #128	@ 0x80
 8009bd8:	d123      	bne.n	8009c22 <HAL_PCD_IRQHandler+0x77c>
            USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009be2:	6a3b      	ldr	r3, [r7, #32]
 8009be4:	619a      	str	r2, [r3, #24]

            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8009be6:	2301      	movs	r3, #1
 8009be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bea:	e014      	b.n	8009c16 <HAL_PCD_IRQHandler+0x770>
                if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U) {
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	00db      	lsls	r3, r3, #3
 8009bf4:	4413      	add	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	440b      	add	r3, r1
 8009bfa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d105      	bne.n	8009c10 <HAL_PCD_IRQHandler+0x76a>
                    /* Abort current transaction and disable the EP */
                    (void) HAL_PCD_EP_Abort(hpcd, (uint8_t) epnum);
 8009c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	4619      	mov	r1, r3
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fb0a 	bl	800a224 <HAL_PCD_EP_Abort>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8009c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c12:	3301      	adds	r3, #1
 8009c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	791b      	ldrb	r3, [r3, #4]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d3e4      	bcc.n	8009bec <HAL_PCD_IRQHandler+0x746>
                }
            }
        }

        /* Handle Incomplete ISO IN Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR)) {
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f002 ffa4 	bl	800cb74 <USB_ReadInterrupts>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c36:	d13c      	bne.n	8009cb2 <HAL_PCD_IRQHandler+0x80c>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8009c38:	2301      	movs	r3, #1
 8009c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c3c:	e02b      	b.n	8009c96 <HAL_PCD_IRQHandler+0x7f0>
                RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	61bb      	str	r3, [r7, #24]

                if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) && ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)) {
 8009c4e:	6879      	ldr	r1, [r7, #4]
 8009c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c52:	4613      	mov	r3, r2
 8009c54:	00db      	lsls	r3, r3, #3
 8009c56:	4413      	add	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	440b      	add	r3, r1
 8009c5c:	3318      	adds	r3, #24
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d115      	bne.n	8009c90 <HAL_PCD_IRQHandler+0x7ea>
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	da12      	bge.n	8009c90 <HAL_PCD_IRQHandler+0x7ea>
                    hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009c6a:	6879      	ldr	r1, [r7, #4]
 8009c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c6e:	4613      	mov	r3, r2
 8009c70:	00db      	lsls	r3, r3, #3
 8009c72:	4413      	add	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	440b      	add	r3, r1
 8009c78:	3317      	adds	r3, #23
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	701a      	strb	r2, [r3, #0]

                    /* Abort current transaction and disable the EP */
                    (void) HAL_PCD_EP_Abort(hpcd, (uint8_t) (epnum | 0x80U));
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 faca 	bl	800a224 <HAL_PCD_EP_Abort>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8009c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c92:	3301      	adds	r3, #1
 8009c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	791b      	ldrb	r3, [r3, #4]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d3cd      	bcc.n	8009c3e <HAL_PCD_IRQHandler+0x798>
                }
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	695a      	ldr	r2, [r3, #20]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8009cb0:	615a      	str	r2, [r3, #20]
        }

        /* Handle Incomplete ISO OUT Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT)) {
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f002 ff5c 	bl	800cb74 <USB_ReadInterrupts>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009cc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009cc6:	d156      	bne.n	8009d76 <HAL_PCD_IRQHandler+0x8d0>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8009cc8:	2301      	movs	r3, #1
 8009cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ccc:	e045      	b.n	8009d5a <HAL_PCD_IRQHandler+0x8b4>
                RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd0:	015a      	lsls	r2, r3, #5
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	61bb      	str	r3, [r7, #24]

                if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) && ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) && (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U))) {
 8009cde:	6879      	ldr	r1, [r7, #4]
 8009ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	00db      	lsls	r3, r3, #3
 8009ce6:	4413      	add	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	440b      	add	r3, r1
 8009cec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d12e      	bne.n	8009d54 <HAL_PCD_IRQHandler+0x8ae>
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	da2b      	bge.n	8009d54 <HAL_PCD_IRQHandler+0x8ae>
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	0c1a      	lsrs	r2, r3, #16
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8009d06:	4053      	eors	r3, r2
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d121      	bne.n	8009d54 <HAL_PCD_IRQHandler+0x8ae>
                    hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009d10:	6879      	ldr	r1, [r7, #4]
 8009d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d14:	4613      	mov	r3, r2
 8009d16:	00db      	lsls	r3, r3, #3
 8009d18:	4413      	add	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	440b      	add	r3, r1
 8009d1e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009d22:	2201      	movs	r2, #1
 8009d24:	701a      	strb	r2, [r3, #0]

                    USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d2e:	6a3b      	ldr	r3, [r7, #32]
 8009d30:	619a      	str	r2, [r3, #24]

                    if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U) {
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10a      	bne.n	8009d54 <HAL_PCD_IRQHandler+0x8ae>
                        USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	69fa      	ldr	r2, [r7, #28]
 8009d48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009d50:	6053      	str	r3, [r2, #4]
                        break;
 8009d52:	e008      	b.n	8009d66 <HAL_PCD_IRQHandler+0x8c0>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8009d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d56:	3301      	adds	r3, #1
 8009d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	791b      	ldrb	r3, [r3, #4]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d3b3      	bcc.n	8009cce <HAL_PCD_IRQHandler+0x828>
                    }
                }
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	695a      	ldr	r2, [r3, #20]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8009d74:	615a      	str	r2, [r3, #20]
        }

        /* Handle Connection event Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT)) {
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f002 fefa 	bl	800cb74 <USB_ReadInterrupts>
 8009d80:	4603      	mov	r3, r0
 8009d82:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d8a:	d10a      	bne.n	8009da2 <HAL_PCD_IRQHandler+0x8fc>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
            HAL_PCD_ConnectCallback(hpcd);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f005 fafb 	bl	800f388 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	695a      	ldr	r2, [r3, #20]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8009da0:	615a      	str	r2, [r3, #20]
        }

        /* Handle Disconnection event Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT)) {
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f002 fee4 	bl	800cb74 <USB_ReadInterrupts>
 8009dac:	4603      	mov	r3, r0
 8009dae:	f003 0304 	and.w	r3, r3, #4
 8009db2:	2b04      	cmp	r3, #4
 8009db4:	d115      	bne.n	8009de2 <HAL_PCD_IRQHandler+0x93c>
            RegVal = hpcd->Instance->GOTGINT;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	61bb      	str	r3, [r7, #24]

            if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET) {
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	f003 0304 	and.w	r3, r3, #4
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d002      	beq.n	8009dce <HAL_PCD_IRQHandler+0x928>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
                HAL_PCD_DisconnectCallback(hpcd);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f005 faeb 	bl	800f3a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            hpcd->Instance->GOTGINT |= RegVal;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6859      	ldr	r1, [r3, #4]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	69ba      	ldr	r2, [r7, #24]
 8009dda:	430a      	orrs	r2, r1
 8009ddc:	605a      	str	r2, [r3, #4]
 8009dde:	e000      	b.n	8009de2 <HAL_PCD_IRQHandler+0x93c>
            return;
 8009de0:	bf00      	nop
        }
    }
}
 8009de2:	3734      	adds	r7, #52	@ 0x34
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd90      	pop	{r4, r7, pc}

08009de8 <HAL_PCD_SetAddress>:
 * @brief  Set the USB Device address.
 * @param  hpcd PCD handle
 * @param  address new device address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address) {
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	460b      	mov	r3, r1
 8009df2:	70fb      	strb	r3, [r7, #3]
    __HAL_LOCK(hpcd);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d101      	bne.n	8009e02 <HAL_PCD_SetAddress+0x1a>
 8009dfe:	2302      	movs	r3, #2
 8009e00:	e012      	b.n	8009e28 <HAL_PCD_SetAddress+0x40>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    hpcd->USB_Address = address;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	78fa      	ldrb	r2, [r7, #3]
 8009e0e:	745a      	strb	r2, [r3, #17]
    (void) USB_SetDevAddress(hpcd->Instance, address);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	78fa      	ldrb	r2, [r7, #3]
 8009e16:	4611      	mov	r1, r2
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f002 fe43 	bl	800caa4 <USB_SetDevAddress>
    __HAL_UNLOCK(hpcd);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <HAL_PCD_EP_Open>:
 * @param  ep_addr endpoint address
 * @param  ep_mps endpoint max packet size
 * @param  ep_type endpoint type
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type) {
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	4608      	mov	r0, r1
 8009e3a:	4611      	mov	r1, r2
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	4603      	mov	r3, r0
 8009e40:	70fb      	strb	r3, [r7, #3]
 8009e42:	460b      	mov	r3, r1
 8009e44:	803b      	strh	r3, [r7, #0]
 8009e46:	4613      	mov	r3, r2
 8009e48:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef ret = HAL_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef *ep;

    if ((ep_addr & 0x80U) == 0x80U) {
 8009e4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	da0f      	bge.n	8009e76 <HAL_PCD_EP_Open+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e56:	78fb      	ldrb	r3, [r7, #3]
 8009e58:	f003 020f 	and.w	r2, r3, #15
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	00db      	lsls	r3, r3, #3
 8009e60:	4413      	add	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	3310      	adds	r3, #16
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	4413      	add	r3, r2
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2201      	movs	r2, #1
 8009e72:	705a      	strb	r2, [r3, #1]
 8009e74:	e00f      	b.n	8009e96 <HAL_PCD_EP_Open+0x66>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e76:	78fb      	ldrb	r3, [r7, #3]
 8009e78:	f003 020f 	and.w	r2, r3, #15
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	00db      	lsls	r3, r3, #3
 8009e80:	4413      	add	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	705a      	strb	r2, [r3, #1]
    }

    ep->num = ep_addr & EP_ADDR_MSK;
 8009e96:	78fb      	ldrb	r3, [r7, #3]
 8009e98:	f003 030f 	and.w	r3, r3, #15
 8009e9c:	b2da      	uxtb	r2, r3
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	701a      	strb	r2, [r3, #0]
    ep->maxpacket = (uint32_t) ep_mps & 0x7FFU;
 8009ea2:	883b      	ldrh	r3, [r7, #0]
 8009ea4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	609a      	str	r2, [r3, #8]
    ep->type = ep_type;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	78ba      	ldrb	r2, [r7, #2]
 8009eb0:	711a      	strb	r2, [r3, #4]

    if (ep->is_in != 0U) {
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	785b      	ldrb	r3, [r3, #1]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d004      	beq.n	8009ec4 <HAL_PCD_EP_Open+0x94>
        /* Assign a Tx FIFO */
        ep->tx_fifo_num = ep->num;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	835a      	strh	r2, [r3, #26]
    }

    /* Set initial data PID. */
    if (ep_type == EP_TYPE_BULK) {
 8009ec4:	78bb      	ldrb	r3, [r7, #2]
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d102      	bne.n	8009ed0 <HAL_PCD_EP_Open+0xa0>
        ep->data_pid_start = 0U;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	715a      	strb	r2, [r3, #5]
    }

    __HAL_LOCK(hpcd);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d101      	bne.n	8009ede <HAL_PCD_EP_Open+0xae>
 8009eda:	2302      	movs	r3, #2
 8009edc:	e00e      	b.n	8009efc <HAL_PCD_EP_Open+0xcc>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    (void) USB_ActivateEndpoint(hpcd->Instance, ep);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68f9      	ldr	r1, [r7, #12]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f001 ffc3 	bl	800be78 <USB_ActivateEndpoint>
    __HAL_UNLOCK(hpcd);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    return ret;
 8009efa:	7afb      	ldrb	r3, [r7, #11]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <HAL_PCD_EP_Close>:
 * @brief  Deactivate an endpoint.
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr) {
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef *ep;

    if ((ep_addr & 0x80U) == 0x80U) {
 8009f10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	da0f      	bge.n	8009f38 <HAL_PCD_EP_Close+0x34>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f18:	78fb      	ldrb	r3, [r7, #3]
 8009f1a:	f003 020f 	and.w	r2, r3, #15
 8009f1e:	4613      	mov	r3, r2
 8009f20:	00db      	lsls	r3, r3, #3
 8009f22:	4413      	add	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	3310      	adds	r3, #16
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2201      	movs	r2, #1
 8009f34:	705a      	strb	r2, [r3, #1]
 8009f36:	e00f      	b.n	8009f58 <HAL_PCD_EP_Close+0x54>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f38:	78fb      	ldrb	r3, [r7, #3]
 8009f3a:	f003 020f 	and.w	r2, r3, #15
 8009f3e:	4613      	mov	r3, r2
 8009f40:	00db      	lsls	r3, r3, #3
 8009f42:	4413      	add	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	3304      	adds	r3, #4
 8009f50:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	705a      	strb	r2, [r3, #1]
    }
    ep->num = ep_addr & EP_ADDR_MSK;
 8009f58:	78fb      	ldrb	r3, [r7, #3]
 8009f5a:	f003 030f 	and.w	r3, r3, #15
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d101      	bne.n	8009f72 <HAL_PCD_EP_Close+0x6e>
 8009f6e:	2302      	movs	r3, #2
 8009f70:	e00e      	b.n	8009f90 <HAL_PCD_EP_Close+0x8c>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2201      	movs	r2, #1
 8009f76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    (void) USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68f9      	ldr	r1, [r7, #12]
 8009f80:	4618      	mov	r0, r3
 8009f82:	f002 f801 	bl	800bf88 <USB_DeactivateEndpoint>
    __HAL_UNLOCK(hpcd);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    return HAL_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <HAL_PCD_EP_Receive>:
 * @param  ep_addr endpoint address
 * @param  pBuf pointer to the reception buffer
 * @param  len amount of data to be received
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len) {
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	607a      	str	r2, [r7, #4]
 8009fa2:	603b      	str	r3, [r7, #0]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef *ep;

    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009fa8:	7afb      	ldrb	r3, [r7, #11]
 8009faa:	f003 020f 	and.w	r2, r3, #15
 8009fae:	4613      	mov	r3, r2
 8009fb0:	00db      	lsls	r3, r3, #3
 8009fb2:	4413      	add	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	617b      	str	r3, [r7, #20]

    /*setup and start the Xfer */
    ep->xfer_buff = pBuf;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	60da      	str	r2, [r3, #12]
    ep->xfer_len = len;
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	611a      	str	r2, [r3, #16]
    ep->xfer_count = 0U;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	615a      	str	r2, [r3, #20]
    ep->is_in = 0U;
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	705a      	strb	r2, [r3, #1]
    ep->num = ep_addr & EP_ADDR_MSK;
 8009fda:	7afb      	ldrb	r3, [r7, #11]
 8009fdc:	f003 030f 	and.w	r3, r3, #15
 8009fe0:	b2da      	uxtb	r2, r3
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	701a      	strb	r2, [r3, #0]

    if (hpcd->Init.dma_enable == 1U) {
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	799b      	ldrb	r3, [r3, #6]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d102      	bne.n	8009ff4 <HAL_PCD_EP_Receive+0x5c>
        ep->dma_addr = (uint32_t) pBuf;
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	61da      	str	r2, [r3, #28]
    }

    (void) USB_EPStartXfer(hpcd->Instance, ep, (uint8_t) hpcd->Init.dma_enable);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6818      	ldr	r0, [r3, #0]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	799b      	ldrb	r3, [r3, #6]
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	6979      	ldr	r1, [r7, #20]
 800a000:	f002 f89e 	bl	800c140 <USB_EPStartXfer>

    return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <HAL_PCD_EP_GetRxCount>:
 * @brief  Get Received Data Size
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval Data Size
 */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr) {
 800a00e:	b480      	push	{r7}
 800a010:	b083      	sub	sp, #12
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	460b      	mov	r3, r1
 800a018:	70fb      	strb	r3, [r7, #3]
    return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a01a:	78fb      	ldrb	r3, [r7, #3]
 800a01c:	f003 020f 	and.w	r2, r3, #15
 800a020:	6879      	ldr	r1, [r7, #4]
 800a022:	4613      	mov	r3, r2
 800a024:	00db      	lsls	r3, r3, #3
 800a026:	4413      	add	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	440b      	add	r3, r1
 800a02c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800a030:	681b      	ldr	r3, [r3, #0]
}
 800a032:	4618      	mov	r0, r3
 800a034:	370c      	adds	r7, #12
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <HAL_PCD_EP_Transmit>:
 * @param  ep_addr endpoint address
 * @param  pBuf pointer to the transmission buffer
 * @param  len amount of data to be sent
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len) {
 800a03e:	b580      	push	{r7, lr}
 800a040:	b086      	sub	sp, #24
 800a042:	af00      	add	r7, sp, #0
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	607a      	str	r2, [r7, #4]
 800a048:	603b      	str	r3, [r7, #0]
 800a04a:	460b      	mov	r3, r1
 800a04c:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef *ep;

    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a04e:	7afb      	ldrb	r3, [r7, #11]
 800a050:	f003 020f 	and.w	r2, r3, #15
 800a054:	4613      	mov	r3, r2
 800a056:	00db      	lsls	r3, r3, #3
 800a058:	4413      	add	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	3310      	adds	r3, #16
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	4413      	add	r3, r2
 800a062:	3304      	adds	r3, #4
 800a064:	617b      	str	r3, [r7, #20]

    /*setup and start the Xfer */
    ep->xfer_buff = pBuf;
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	60da      	str	r2, [r3, #12]
    ep->xfer_len = len;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	683a      	ldr	r2, [r7, #0]
 800a070:	611a      	str	r2, [r3, #16]
    ep->xfer_count = 0U;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2200      	movs	r2, #0
 800a076:	615a      	str	r2, [r3, #20]
    ep->is_in = 1U;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	2201      	movs	r2, #1
 800a07c:	705a      	strb	r2, [r3, #1]
    ep->num = ep_addr & EP_ADDR_MSK;
 800a07e:	7afb      	ldrb	r3, [r7, #11]
 800a080:	f003 030f 	and.w	r3, r3, #15
 800a084:	b2da      	uxtb	r2, r3
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	701a      	strb	r2, [r3, #0]

    if (hpcd->Init.dma_enable == 1U) {
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	799b      	ldrb	r3, [r3, #6]
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d102      	bne.n	800a098 <HAL_PCD_EP_Transmit+0x5a>
        ep->dma_addr = (uint32_t) pBuf;
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	61da      	str	r2, [r3, #28]
    }

    (void) USB_EPStartXfer(hpcd->Instance, ep, (uint8_t) hpcd->Init.dma_enable);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6818      	ldr	r0, [r3, #0]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	799b      	ldrb	r3, [r3, #6]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	6979      	ldr	r1, [r7, #20]
 800a0a4:	f002 f84c 	bl	800c140 <USB_EPStartXfer>

    return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <HAL_PCD_EP_SetStall>:
 * @brief  Set a STALL condition over an endpoint
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr) {
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef *ep;

    if (((uint32_t) ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints) {
 800a0be:	78fb      	ldrb	r3, [r7, #3]
 800a0c0:	f003 030f 	and.w	r3, r3, #15
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	7912      	ldrb	r2, [r2, #4]
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d901      	bls.n	800a0d0 <HAL_PCD_EP_SetStall+0x1e>
        return HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e04f      	b.n	800a170 <HAL_PCD_EP_SetStall+0xbe>
    }

    if ((0x80U & ep_addr) == 0x80U) {
 800a0d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	da0f      	bge.n	800a0f8 <HAL_PCD_EP_SetStall+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0d8:	78fb      	ldrb	r3, [r7, #3]
 800a0da:	f003 020f 	and.w	r2, r3, #15
 800a0de:	4613      	mov	r3, r2
 800a0e0:	00db      	lsls	r3, r3, #3
 800a0e2:	4413      	add	r3, r2
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	3310      	adds	r3, #16
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	3304      	adds	r3, #4
 800a0ee:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	705a      	strb	r2, [r3, #1]
 800a0f6:	e00d      	b.n	800a114 <HAL_PCD_EP_SetStall+0x62>
    } else {
        ep = &hpcd->OUT_ep[ep_addr];
 800a0f8:	78fa      	ldrb	r2, [r7, #3]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	00db      	lsls	r3, r3, #3
 800a0fe:	4413      	add	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	4413      	add	r3, r2
 800a10a:	3304      	adds	r3, #4
 800a10c:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	705a      	strb	r2, [r3, #1]
    }

    ep->is_stall = 1U;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2201      	movs	r2, #1
 800a118:	709a      	strb	r2, [r3, #2]
    ep->num = ep_addr & EP_ADDR_MSK;
 800a11a:	78fb      	ldrb	r3, [r7, #3]
 800a11c:	f003 030f 	and.w	r3, r3, #15
 800a120:	b2da      	uxtb	r2, r3
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d101      	bne.n	800a134 <HAL_PCD_EP_SetStall+0x82>
 800a130:	2302      	movs	r3, #2
 800a132:	e01d      	b.n	800a170 <HAL_PCD_EP_SetStall+0xbe>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    (void) USB_EPSetStall(hpcd->Instance, ep);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68f9      	ldr	r1, [r7, #12]
 800a142:	4618      	mov	r0, r3
 800a144:	f002 fbda 	bl	800c8fc <USB_EPSetStall>

    if ((ep_addr & EP_ADDR_MSK) == 0U) {
 800a148:	78fb      	ldrb	r3, [r7, #3]
 800a14a:	f003 030f 	and.w	r3, r3, #15
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d109      	bne.n	800a166 <HAL_PCD_EP_SetStall+0xb4>
        (void) USB_EP0_OutStart(hpcd->Instance, (uint8_t) hpcd->Init.dma_enable, (uint8_t*) hpcd->Setup);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6818      	ldr	r0, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	7999      	ldrb	r1, [r3, #6]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a160:	461a      	mov	r2, r3
 800a162:	f002 fdcb 	bl	800ccfc <USB_EP0_OutStart>
    }

    __HAL_UNLOCK(hpcd);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    return HAL_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <HAL_PCD_EP_ClrStall>:
 * @brief  Clear a STALL condition over in an endpoint
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr) {
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	460b      	mov	r3, r1
 800a182:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef *ep;

    if (((uint32_t) ep_addr & 0x0FU) > hpcd->Init.dev_endpoints) {
 800a184:	78fb      	ldrb	r3, [r7, #3]
 800a186:	f003 030f 	and.w	r3, r3, #15
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	7912      	ldrb	r2, [r2, #4]
 800a18e:	4293      	cmp	r3, r2
 800a190:	d901      	bls.n	800a196 <HAL_PCD_EP_ClrStall+0x1e>
        return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e042      	b.n	800a21c <HAL_PCD_EP_ClrStall+0xa4>
    }

    if ((0x80U & ep_addr) == 0x80U) {
 800a196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	da0f      	bge.n	800a1be <HAL_PCD_EP_ClrStall+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a19e:	78fb      	ldrb	r3, [r7, #3]
 800a1a0:	f003 020f 	and.w	r2, r3, #15
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	00db      	lsls	r3, r3, #3
 800a1a8:	4413      	add	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	3310      	adds	r3, #16
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	3304      	adds	r3, #4
 800a1b4:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	705a      	strb	r2, [r3, #1]
 800a1bc:	e00f      	b.n	800a1de <HAL_PCD_EP_ClrStall+0x66>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1be:	78fb      	ldrb	r3, [r7, #3]
 800a1c0:	f003 020f 	and.w	r2, r3, #15
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	00db      	lsls	r3, r3, #3
 800a1c8:	4413      	add	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	3304      	adds	r3, #4
 800a1d6:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	705a      	strb	r2, [r3, #1]
    }

    ep->is_stall = 0U;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	709a      	strb	r2, [r3, #2]
    ep->num = ep_addr & EP_ADDR_MSK;
 800a1e4:	78fb      	ldrb	r3, [r7, #3]
 800a1e6:	f003 030f 	and.w	r3, r3, #15
 800a1ea:	b2da      	uxtb	r2, r3
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d101      	bne.n	800a1fe <HAL_PCD_EP_ClrStall+0x86>
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	e00e      	b.n	800a21c <HAL_PCD_EP_ClrStall+0xa4>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2201      	movs	r2, #1
 800a202:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    (void) USB_EPClearStall(hpcd->Instance, ep);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68f9      	ldr	r1, [r7, #12]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f002 fbe3 	bl	800c9d8 <USB_EPClearStall>
    __HAL_UNLOCK(hpcd);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    return HAL_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <HAL_PCD_EP_Abort>:
 * @brief  Abort an USB EP transaction.
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr) {
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	460b      	mov	r3, r1
 800a22e:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ret;
    PCD_EPTypeDef *ep;

    if ((0x80U & ep_addr) == 0x80U) {
 800a230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a234:	2b00      	cmp	r3, #0
 800a236:	da0c      	bge.n	800a252 <HAL_PCD_EP_Abort+0x2e>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a238:	78fb      	ldrb	r3, [r7, #3]
 800a23a:	f003 020f 	and.w	r2, r3, #15
 800a23e:	4613      	mov	r3, r2
 800a240:	00db      	lsls	r3, r3, #3
 800a242:	4413      	add	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	3310      	adds	r3, #16
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	4413      	add	r3, r2
 800a24c:	3304      	adds	r3, #4
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	e00c      	b.n	800a26c <HAL_PCD_EP_Abort+0x48>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a252:	78fb      	ldrb	r3, [r7, #3]
 800a254:	f003 020f 	and.w	r2, r3, #15
 800a258:	4613      	mov	r3, r2
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	4413      	add	r3, r2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	4413      	add	r3, r2
 800a268:	3304      	adds	r3, #4
 800a26a:	60fb      	str	r3, [r7, #12]
    }

    /* Stop Xfer */
    ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68f9      	ldr	r1, [r7, #12]
 800a272:	4618      	mov	r0, r3
 800a274:	f002 fa02 	bl	800c67c <USB_EPStopXfer>
 800a278:	4603      	mov	r3, r0
 800a27a:	72fb      	strb	r3, [r7, #11]

    return ret;
 800a27c:	7afb      	ldrb	r3, [r7, #11]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <PCD_WriteEmptyTxFifo>:
 * @brief  Check FIFO for the next packet to be loaded.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum) {
 800a286:	b580      	push	{r7, lr}
 800a288:	b08a      	sub	sp, #40	@ 0x28
 800a28a:	af02      	add	r7, sp, #8
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	6039      	str	r1, [r7, #0]
    USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	617b      	str	r3, [r7, #20]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	613b      	str	r3, [r7, #16]
    USB_OTG_EPTypeDef *ep;
    uint32_t len;
    uint32_t len32b;
    uint32_t fifoemptymsk;

    ep = &hpcd->IN_ep[epnum];
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	4613      	mov	r3, r2
 800a29e:	00db      	lsls	r3, r3, #3
 800a2a0:	4413      	add	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	3310      	adds	r3, #16
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	3304      	adds	r3, #4
 800a2ac:	60fb      	str	r3, [r7, #12]

    if (ep->xfer_count > ep->xfer_len) {
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	695a      	ldr	r2, [r3, #20]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d901      	bls.n	800a2be <PCD_WriteEmptyTxFifo+0x38>
        return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e06b      	b.n	800a396 <PCD_WriteEmptyTxFifo+0x110>
    }

    len = ep->xfer_len - ep->xfer_count;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	691a      	ldr	r2, [r3, #16]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	695b      	ldr	r3, [r3, #20]
 800a2c6:	1ad3      	subs	r3, r2, r3
 800a2c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket) {
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	69fa      	ldr	r2, [r7, #28]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d902      	bls.n	800a2da <PCD_WriteEmptyTxFifo+0x54>
        len = ep->maxpacket;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	61fb      	str	r3, [r7, #28]
    }

    len32b = (len + 3U) / 4U;
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	3303      	adds	r3, #3
 800a2de:	089b      	lsrs	r3, r3, #2
 800a2e0:	61bb      	str	r3, [r7, #24]

    while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) && (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U)) {
 800a2e2:	e02a      	b.n	800a33a <PCD_WriteEmptyTxFifo+0xb4>
        /* Write the FIFO */
        len = ep->xfer_len - ep->xfer_count;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	691a      	ldr	r2, [r3, #16]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	61fb      	str	r3, [r7, #28]

        if (len > ep->maxpacket) {
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	69fa      	ldr	r2, [r7, #28]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d902      	bls.n	800a300 <PCD_WriteEmptyTxFifo+0x7a>
            len = ep->maxpacket;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	61fb      	str	r3, [r7, #28]
        }
        len32b = (len + 3U) / 4U;
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	3303      	adds	r3, #3
 800a304:	089b      	lsrs	r3, r3, #2
 800a306:	61bb      	str	r3, [r7, #24]

        (void) USB_WritePacket(USBx, ep->xfer_buff, (uint8_t) epnum, (uint16_t) len, (uint8_t) hpcd->Init.dma_enable);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	68d9      	ldr	r1, [r3, #12]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	b298      	uxth	r0, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	799b      	ldrb	r3, [r3, #6]
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	4603      	mov	r3, r0
 800a31c:	6978      	ldr	r0, [r7, #20]
 800a31e:	f002 fa57 	bl	800c7d0 <USB_WritePacket>

        ep->xfer_buff += len;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	68da      	ldr	r2, [r3, #12]
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	441a      	add	r2, r3
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	60da      	str	r2, [r3, #12]
        ep->xfer_count += len;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	695a      	ldr	r2, [r3, #20]
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	441a      	add	r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	615a      	str	r2, [r3, #20]
    while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) && (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U)) {
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	015a      	lsls	r2, r3, #5
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	4413      	add	r3, r2
 800a342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	b29b      	uxth	r3, r3
 800a34a:	69ba      	ldr	r2, [r7, #24]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d809      	bhi.n	800a364 <PCD_WriteEmptyTxFifo+0xde>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	695a      	ldr	r2, [r3, #20]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d203      	bcs.n	800a364 <PCD_WriteEmptyTxFifo+0xde>
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d1bf      	bne.n	800a2e4 <PCD_WriteEmptyTxFifo+0x5e>
    }

    if (ep->xfer_len <= ep->xfer_count) {
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	691a      	ldr	r2, [r3, #16]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	695b      	ldr	r3, [r3, #20]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d811      	bhi.n	800a394 <PCD_WriteEmptyTxFifo+0x10e>
        fifoemptymsk = (uint32_t) (0x1UL << (epnum & EP_ADDR_MSK));
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	f003 030f 	and.w	r3, r3, #15
 800a376:	2201      	movs	r2, #1
 800a378:	fa02 f303 	lsl.w	r3, r2, r3
 800a37c:	60bb      	str	r3, [r7, #8]
        USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	43db      	mvns	r3, r3
 800a38a:	6939      	ldr	r1, [r7, #16]
 800a38c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a390:	4013      	ands	r3, r2
 800a392:	634b      	str	r3, [r1, #52]	@ 0x34
    }

    return HAL_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3720      	adds	r7, #32
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
	...

0800a3a0 <PCD_EP_OutXfrComplete_int>:
 * @brief  process EP OUT transfer complete interrupt.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum) {
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b088      	sub	sp, #32
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
    USB_OTG_EPTypeDef *ep;
    const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	61fb      	str	r3, [r7, #28]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	61bb      	str	r3, [r7, #24]
    uint32_t gSNPSiD = *(__IO const uint32_t*) (&USBx->CID + 0x1U);
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	333c      	adds	r3, #60	@ 0x3c
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	617b      	str	r3, [r7, #20]
    uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	015a      	lsls	r2, r3, #5
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	613b      	str	r3, [r7, #16]

    if (hpcd->Init.dma_enable == 1U) {
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	799b      	ldrb	r3, [r3, #6]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d17b      	bne.n	800a4ce <PCD_EP_OutXfrComplete_int+0x12e>
        if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	f003 0308 	and.w	r3, r3, #8
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d015      	beq.n	800a40c <PCD_EP_OutXfrComplete_int+0x6c>
        {
            /* StupPktRcvd = 1 this is a setup packet */
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) && ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	4a61      	ldr	r2, [pc, #388]	@ (800a568 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	f240 80b9 	bls.w	800a55c <PCD_EP_OutXfrComplete_int+0x1bc>
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 80b3 	beq.w	800a55c <PCD_EP_OutXfrComplete_int+0x1bc>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	015a      	lsls	r2, r3, #5
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a402:	461a      	mov	r2, r3
 800a404:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a408:	6093      	str	r3, [r2, #8]
 800a40a:	e0a7      	b.n	800a55c <PCD_EP_OutXfrComplete_int+0x1bc>
            }
        } else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	f003 0320 	and.w	r3, r3, #32
 800a412:	2b00      	cmp	r3, #0
 800a414:	d009      	beq.n	800a42a <PCD_EP_OutXfrComplete_int+0x8a>
        {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	015a      	lsls	r2, r3, #5
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	4413      	add	r3, r2
 800a41e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a422:	461a      	mov	r2, r3
 800a424:	2320      	movs	r3, #32
 800a426:	6093      	str	r3, [r2, #8]
 800a428:	e098      	b.n	800a55c <PCD_EP_OutXfrComplete_int+0x1bc>
        } else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U) {
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a430:	2b00      	cmp	r3, #0
 800a432:	f040 8093 	bne.w	800a55c <PCD_EP_OutXfrComplete_int+0x1bc>
            /* StupPktRcvd = 1 this is a setup packet */
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) && ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	4a4b      	ldr	r2, [pc, #300]	@ (800a568 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d90f      	bls.n	800a45e <PCD_EP_OutXfrComplete_int+0xbe>
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00a      	beq.n	800a45e <PCD_EP_OutXfrComplete_int+0xbe>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	015a      	lsls	r2, r3, #5
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	4413      	add	r3, r2
 800a450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a454:	461a      	mov	r2, r3
 800a456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a45a:	6093      	str	r3, [r2, #8]
 800a45c:	e07e      	b.n	800a55c <PCD_EP_OutXfrComplete_int+0x1bc>
            } else {
                ep = &hpcd->OUT_ep[epnum];
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	4613      	mov	r3, r2
 800a462:	00db      	lsls	r3, r3, #3
 800a464:	4413      	add	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	4413      	add	r3, r2
 800a470:	3304      	adds	r3, #4
 800a472:	60fb      	str	r3, [r7, #12]

                /* out data packet received over EP */
                ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6a1a      	ldr	r2, [r3, #32]
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	0159      	lsls	r1, r3, #5
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	440b      	add	r3, r1
 800a480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a48a:	1ad2      	subs	r2, r2, r3
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	615a      	str	r2, [r3, #20]

                if (epnum == 0U) {
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d114      	bne.n	800a4c0 <PCD_EP_OutXfrComplete_int+0x120>
                    if (ep->xfer_len == 0U) {
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d109      	bne.n	800a4b2 <PCD_EP_OutXfrComplete_int+0x112>
                        /* this is ZLP, so prepare EP0 for next setup */
                        (void) USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t*) hpcd->Setup);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6818      	ldr	r0, [r3, #0]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	2101      	movs	r1, #1
 800a4ac:	f002 fc26 	bl	800ccfc <USB_EP0_OutStart>
 800a4b0:	e006      	b.n	800a4c0 <PCD_EP_OutXfrComplete_int+0x120>
                    } else {
                        ep->xfer_buff += ep->xfer_count;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	68da      	ldr	r2, [r3, #12]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	695b      	ldr	r3, [r3, #20]
 800a4ba:	441a      	add	r2, r3
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	60da      	str	r2, [r3, #12]
                }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
                HAL_PCD_DataOutStageCallback(hpcd, (uint8_t) epnum);
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f004 fea4 	bl	800f214 <HAL_PCD_DataOutStageCallback>
 800a4cc:	e046      	b.n	800a55c <PCD_EP_OutXfrComplete_int+0x1bc>
            }
        } else {
            /* ... */
        }
    } else {
        if (gSNPSiD == USB_OTG_CORE_ID_310A) {
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	4a26      	ldr	r2, [pc, #152]	@ (800a56c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d124      	bne.n	800a520 <PCD_EP_OutXfrComplete_int+0x180>
            /* StupPktRcvd = 1 this is a setup packet */
            if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX) {
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00a      	beq.n	800a4f6 <PCD_EP_OutXfrComplete_int+0x156>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4f2:	6093      	str	r3, [r2, #8]
 800a4f4:	e032      	b.n	800a55c <PCD_EP_OutXfrComplete_int+0x1bc>
            } else {
                if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	f003 0320 	and.w	r3, r3, #32
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d008      	beq.n	800a512 <PCD_EP_OutXfrComplete_int+0x172>
                    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	015a      	lsls	r2, r3, #5
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	4413      	add	r3, r2
 800a508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a50c:	461a      	mov	r2, r3
 800a50e:	2320      	movs	r3, #32
 800a510:	6093      	str	r3, [r2, #8]
                }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
                HAL_PCD_DataOutStageCallback(hpcd, (uint8_t) epnum);
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	b2db      	uxtb	r3, r3
 800a516:	4619      	mov	r1, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f004 fe7b 	bl	800f214 <HAL_PCD_DataOutStageCallback>
 800a51e:	e01d      	b.n	800a55c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
        } else {
            if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U)) {
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d114      	bne.n	800a550 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a526:	6879      	ldr	r1, [r7, #4]
 800a528:	683a      	ldr	r2, [r7, #0]
 800a52a:	4613      	mov	r3, r2
 800a52c:	00db      	lsls	r3, r3, #3
 800a52e:	4413      	add	r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	440b      	add	r3, r1
 800a534:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d108      	bne.n	800a550 <PCD_EP_OutXfrComplete_int+0x1b0>
                /* this is ZLP, so prepare EP0 for next setup */
                (void) USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t*) hpcd->Setup);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6818      	ldr	r0, [r3, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a548:	461a      	mov	r2, r3
 800a54a:	2100      	movs	r1, #0
 800a54c:	f002 fbd6 	bl	800ccfc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataOutStageCallback(hpcd, (uint8_t) epnum);
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	b2db      	uxtb	r3, r3
 800a554:	4619      	mov	r1, r3
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f004 fe5c 	bl	800f214 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
    }

    return HAL_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3720      	adds	r7, #32
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	4f54300a 	.word	0x4f54300a
 800a56c:	4f54310a 	.word	0x4f54310a

0800a570 <PCD_EP_OutSetupPacket_int>:
 * @brief  process EP OUT setup packet received interrupt.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum) {
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
    const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	617b      	str	r3, [r7, #20]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	613b      	str	r3, [r7, #16]
    uint32_t gSNPSiD = *(__IO const uint32_t*) (&USBx->CID + 0x1U);
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	333c      	adds	r3, #60	@ 0x3c
 800a588:	3304      	adds	r3, #4
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	60fb      	str	r3, [r7, #12]
    uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	015a      	lsls	r2, r3, #5
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	4413      	add	r3, r2
 800a596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	60bb      	str	r3, [r7, #8]

    if ((gSNPSiD > USB_OTG_CORE_ID_300A) && ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	4a15      	ldr	r2, [pc, #84]	@ (800a5f8 <PCD_EP_OutSetupPacket_int+0x88>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d90e      	bls.n	800a5c4 <PCD_EP_OutSetupPacket_int+0x54>
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d009      	beq.n	800a5c4 <PCD_EP_OutSetupPacket_int+0x54>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	015a      	lsls	r2, r3, #5
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5bc:	461a      	mov	r2, r3
 800a5be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5c2:	6093      	str	r3, [r2, #8]

    /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
    HAL_PCD_SetupStageCallback(hpcd);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f004 fe13 	bl	800f1f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U)) {
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	4a0a      	ldr	r2, [pc, #40]	@ (800a5f8 <PCD_EP_OutSetupPacket_int+0x88>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d90c      	bls.n	800a5ec <PCD_EP_OutSetupPacket_int+0x7c>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	799b      	ldrb	r3, [r3, #6]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d108      	bne.n	800a5ec <PCD_EP_OutSetupPacket_int+0x7c>
        (void) USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t*) hpcd->Setup);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6818      	ldr	r0, [r3, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	2101      	movs	r1, #1
 800a5e8:	f002 fb88 	bl	800ccfc <USB_EP0_OutStart>
    }

    return HAL_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3718      	adds	r7, #24
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	4f54300a 	.word	0x4f54300a

0800a5fc <HAL_PCDEx_SetTxFiFo>:
 * @param  hpcd PCD handle
 * @param  fifo The number of Tx fifo
 * @param  size Fifo size
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size) {
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	460b      	mov	r3, r1
 800a606:	70fb      	strb	r3, [r7, #3]
 800a608:	4613      	mov	r3, r2
 800a60a:	803b      	strh	r3, [r7, #0]
     --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
     of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

    Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a612:	60bb      	str	r3, [r7, #8]

    if (fifo == 0U) {
 800a614:	78fb      	ldrb	r3, [r7, #3]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d107      	bne.n	800a62a <HAL_PCDEx_SetTxFiFo+0x2e>
        hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t) size << 16) | Tx_Offset;
 800a61a:	883b      	ldrh	r3, [r7, #0]
 800a61c:	0419      	lsls	r1, r3, #16
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	68ba      	ldr	r2, [r7, #8]
 800a624:	430a      	orrs	r2, r1
 800a626:	629a      	str	r2, [r3, #40]	@ 0x28
 800a628:	e028      	b.n	800a67c <HAL_PCDEx_SetTxFiFo+0x80>
    } else {
        Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a630:	0c1b      	lsrs	r3, r3, #16
 800a632:	68ba      	ldr	r2, [r7, #8]
 800a634:	4413      	add	r3, r2
 800a636:	60bb      	str	r3, [r7, #8]
        for (i = 0U; i < (fifo - 1U); i++) {
 800a638:	2300      	movs	r3, #0
 800a63a:	73fb      	strb	r3, [r7, #15]
 800a63c:	e00d      	b.n	800a65a <HAL_PCDEx_SetTxFiFo+0x5e>
            Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	3340      	adds	r3, #64	@ 0x40
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	4413      	add	r3, r2
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	0c1b      	lsrs	r3, r3, #16
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	4413      	add	r3, r2
 800a652:	60bb      	str	r3, [r7, #8]
        for (i = 0U; i < (fifo - 1U); i++) {
 800a654:	7bfb      	ldrb	r3, [r7, #15]
 800a656:	3301      	adds	r3, #1
 800a658:	73fb      	strb	r3, [r7, #15]
 800a65a:	7bfa      	ldrb	r2, [r7, #15]
 800a65c:	78fb      	ldrb	r3, [r7, #3]
 800a65e:	3b01      	subs	r3, #1
 800a660:	429a      	cmp	r2, r3
 800a662:	d3ec      	bcc.n	800a63e <HAL_PCDEx_SetTxFiFo+0x42>
        }

        /* Multiply Tx_Size by 2 to get higher performance */
        hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t) size << 16) | Tx_Offset;
 800a664:	883b      	ldrh	r3, [r7, #0]
 800a666:	0418      	lsls	r0, r3, #16
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6819      	ldr	r1, [r3, #0]
 800a66c:	78fb      	ldrb	r3, [r7, #3]
 800a66e:	3b01      	subs	r3, #1
 800a670:	68ba      	ldr	r2, [r7, #8]
 800a672:	4302      	orrs	r2, r0
 800a674:	3340      	adds	r3, #64	@ 0x40
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	440b      	add	r3, r1
 800a67a:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <HAL_PCDEx_SetRxFiFo>:
 * @brief  Set Rx FIFO
 * @param  hpcd PCD handle
 * @param  size Size of Rx fifo
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size) {
 800a68a:	b480      	push	{r7}
 800a68c:	b083      	sub	sp, #12
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	460b      	mov	r3, r1
 800a694:	807b      	strh	r3, [r7, #2]
    hpcd->Instance->GRXFSIZ = size;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	887a      	ldrh	r2, [r7, #2]
 800a69c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <HAL_PCDEx_LPM_Callback>:
 * @brief  Send LPM message to user layer callback.
 * @param  hpcd PCD handle
 * @param  msg LPM message
 * @retval HAL status
 */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg) {
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	70fb      	strb	r3, [r7, #3]
    UNUSED(msg);

    /* NOTE : This function should not be modified, when the callback is needed,
     the HAL_PCDEx_LPM_Callback could be implemented in the user file
     */
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <HAL_RCC_OscConfig>:
 * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct) {
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
    uint32_t tickstart;
    uint32_t pll_config;
    /* Check Null pointer */
    if (RCC_OscInitStruct == NULL) {
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d101      	bne.n	800a6d6 <HAL_RCC_OscConfig+0x12>
        return HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e267      	b.n	800aba6 <HAL_RCC_OscConfig+0x4e2>
    }

    /* Check the parameters */
    assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
    /*------------------------------- HSE Configuration ------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) {
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 0301 	and.w	r3, r3, #1
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d075      	beq.n	800a7ce <HAL_RCC_OscConfig+0x10a>
        /* Check the parameters */
        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 800a6e2:	4b88      	ldr	r3, [pc, #544]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	f003 030c 	and.w	r3, r3, #12
 800a6ea:	2b04      	cmp	r3, #4
 800a6ec:	d00c      	beq.n	800a708 <HAL_RCC_OscConfig+0x44>
 800a6ee:	4b85      	ldr	r3, [pc, #532]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	f003 030c 	and.w	r3, r3, #12
 800a6f6:	2b08      	cmp	r3, #8
 800a6f8:	d112      	bne.n	800a720 <HAL_RCC_OscConfig+0x5c>
 800a6fa:	4b82      	ldr	r3, [pc, #520]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a702:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a706:	d10b      	bne.n	800a720 <HAL_RCC_OscConfig+0x5c>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 800a708:	4b7e      	ldr	r3, [pc, #504]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d05b      	beq.n	800a7cc <HAL_RCC_OscConfig+0x108>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d157      	bne.n	800a7cc <HAL_RCC_OscConfig+0x108>
                return HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e242      	b.n	800aba6 <HAL_RCC_OscConfig+0x4e2>
            }
        } else {
            /* Set the new HSE configuration ---------------------------------------*/
            __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a728:	d106      	bne.n	800a738 <HAL_RCC_OscConfig+0x74>
 800a72a:	4b76      	ldr	r3, [pc, #472]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a75      	ldr	r2, [pc, #468]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	e01d      	b.n	800a774 <HAL_RCC_OscConfig+0xb0>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a740:	d10c      	bne.n	800a75c <HAL_RCC_OscConfig+0x98>
 800a742:	4b70      	ldr	r3, [pc, #448]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a6f      	ldr	r2, [pc, #444]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a748:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a74c:	6013      	str	r3, [r2, #0]
 800a74e:	4b6d      	ldr	r3, [pc, #436]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a6c      	ldr	r2, [pc, #432]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a758:	6013      	str	r3, [r2, #0]
 800a75a:	e00b      	b.n	800a774 <HAL_RCC_OscConfig+0xb0>
 800a75c:	4b69      	ldr	r3, [pc, #420]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a68      	ldr	r2, [pc, #416]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a766:	6013      	str	r3, [r2, #0]
 800a768:	4b66      	ldr	r3, [pc, #408]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a65      	ldr	r2, [pc, #404]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a76e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a772:	6013      	str	r3, [r2, #0]

            /* Check the HSE State */
            if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d013      	beq.n	800a7a4 <HAL_RCC_OscConfig+0xe0>
                /* Get Start Tick */
                tickstart = HAL_GetTick();
 800a77c:	f7fe fa56 	bl	8008c2c <HAL_GetTick>
 800a780:	6138      	str	r0, [r7, #16]

                /* Wait till HSE is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800a782:	e008      	b.n	800a796 <HAL_RCC_OscConfig+0xd2>
                    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800a784:	f7fe fa52 	bl	8008c2c <HAL_GetTick>
 800a788:	4602      	mov	r2, r0
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	2b64      	cmp	r3, #100	@ 0x64
 800a790:	d901      	bls.n	800a796 <HAL_RCC_OscConfig+0xd2>
                        return HAL_TIMEOUT;
 800a792:	2303      	movs	r3, #3
 800a794:	e207      	b.n	800aba6 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800a796:	4b5b      	ldr	r3, [pc, #364]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d0f0      	beq.n	800a784 <HAL_RCC_OscConfig+0xc0>
 800a7a2:	e014      	b.n	800a7ce <HAL_RCC_OscConfig+0x10a>
                    }
                }
            } else {
                /* Get Start Tick */
                tickstart = HAL_GetTick();
 800a7a4:	f7fe fa42 	bl	8008c2c <HAL_GetTick>
 800a7a8:	6138      	str	r0, [r7, #16]

                /* Wait till HSE is bypassed or disabled */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800a7aa:	e008      	b.n	800a7be <HAL_RCC_OscConfig+0xfa>
                    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800a7ac:	f7fe fa3e 	bl	8008c2c <HAL_GetTick>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	2b64      	cmp	r3, #100	@ 0x64
 800a7b8:	d901      	bls.n	800a7be <HAL_RCC_OscConfig+0xfa>
                        return HAL_TIMEOUT;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	e1f3      	b.n	800aba6 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800a7be:	4b51      	ldr	r3, [pc, #324]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1f0      	bne.n	800a7ac <HAL_RCC_OscConfig+0xe8>
 800a7ca:	e000      	b.n	800a7ce <HAL_RCC_OscConfig+0x10a>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 800a7cc:	bf00      	nop
                }
            }
        }
    }
    /*----------------------------- HSI Configuration --------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) {
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 0302 	and.w	r3, r3, #2
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d063      	beq.n	800a8a2 <HAL_RCC_OscConfig+0x1de>
        /* Check the parameters */
        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 800a7da:	4b4a      	ldr	r3, [pc, #296]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f003 030c 	and.w	r3, r3, #12
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00b      	beq.n	800a7fe <HAL_RCC_OscConfig+0x13a>
 800a7e6:	4b47      	ldr	r3, [pc, #284]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a7e8:	689b      	ldr	r3, [r3, #8]
 800a7ea:	f003 030c 	and.w	r3, r3, #12
 800a7ee:	2b08      	cmp	r3, #8
 800a7f0:	d11c      	bne.n	800a82c <HAL_RCC_OscConfig+0x168>
 800a7f2:	4b44      	ldr	r3, [pc, #272]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d116      	bne.n	800a82c <HAL_RCC_OscConfig+0x168>
            /* When HSI is used as system clock it will not disabled */
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 800a7fe:	4b41      	ldr	r3, [pc, #260]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f003 0302 	and.w	r3, r3, #2
 800a806:	2b00      	cmp	r3, #0
 800a808:	d005      	beq.n	800a816 <HAL_RCC_OscConfig+0x152>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d001      	beq.n	800a816 <HAL_RCC_OscConfig+0x152>
                return HAL_ERROR;
 800a812:	2301      	movs	r3, #1
 800a814:	e1c7      	b.n	800aba6 <HAL_RCC_OscConfig+0x4e2>
            }
            /* Otherwise, just the calibration is allowed */
            else {
                /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a816:	4b3b      	ldr	r3, [pc, #236]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	00db      	lsls	r3, r3, #3
 800a824:	4937      	ldr	r1, [pc, #220]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a826:	4313      	orrs	r3, r2
 800a828:	600b      	str	r3, [r1, #0]
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 800a82a:	e03a      	b.n	800a8a2 <HAL_RCC_OscConfig+0x1de>
            }
        } else {
            /* Check the HSI State */
            if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d020      	beq.n	800a876 <HAL_RCC_OscConfig+0x1b2>
                /* Enable the Internal High Speed oscillator (HSI). */
                __HAL_RCC_HSI_ENABLE();
 800a834:	4b34      	ldr	r3, [pc, #208]	@ (800a908 <HAL_RCC_OscConfig+0x244>)
 800a836:	2201      	movs	r2, #1
 800a838:	601a      	str	r2, [r3, #0]

                /* Get Start Tick*/
                tickstart = HAL_GetTick();
 800a83a:	f7fe f9f7 	bl	8008c2c <HAL_GetTick>
 800a83e:	6138      	str	r0, [r7, #16]

                /* Wait till HSI is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800a840:	e008      	b.n	800a854 <HAL_RCC_OscConfig+0x190>
                    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800a842:	f7fe f9f3 	bl	8008c2c <HAL_GetTick>
 800a846:	4602      	mov	r2, r0
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d901      	bls.n	800a854 <HAL_RCC_OscConfig+0x190>
                        return HAL_TIMEOUT;
 800a850:	2303      	movs	r3, #3
 800a852:	e1a8      	b.n	800aba6 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800a854:	4b2b      	ldr	r3, [pc, #172]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 0302 	and.w	r3, r3, #2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d0f0      	beq.n	800a842 <HAL_RCC_OscConfig+0x17e>
                    }
                }

                /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a860:	4b28      	ldr	r3, [pc, #160]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	00db      	lsls	r3, r3, #3
 800a86e:	4925      	ldr	r1, [pc, #148]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a870:	4313      	orrs	r3, r2
 800a872:	600b      	str	r3, [r1, #0]
 800a874:	e015      	b.n	800a8a2 <HAL_RCC_OscConfig+0x1de>
            } else {
                /* Disable the Internal High Speed oscillator (HSI). */
                __HAL_RCC_HSI_DISABLE();
 800a876:	4b24      	ldr	r3, [pc, #144]	@ (800a908 <HAL_RCC_OscConfig+0x244>)
 800a878:	2200      	movs	r2, #0
 800a87a:	601a      	str	r2, [r3, #0]

                /* Get Start Tick*/
                tickstart = HAL_GetTick();
 800a87c:	f7fe f9d6 	bl	8008c2c <HAL_GetTick>
 800a880:	6138      	str	r0, [r7, #16]

                /* Wait till HSI is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800a882:	e008      	b.n	800a896 <HAL_RCC_OscConfig+0x1d2>
                    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800a884:	f7fe f9d2 	bl	8008c2c <HAL_GetTick>
 800a888:	4602      	mov	r2, r0
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d901      	bls.n	800a896 <HAL_RCC_OscConfig+0x1d2>
                        return HAL_TIMEOUT;
 800a892:	2303      	movs	r3, #3
 800a894:	e187      	b.n	800aba6 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800a896:	4b1b      	ldr	r3, [pc, #108]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 0302 	and.w	r3, r3, #2
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1f0      	bne.n	800a884 <HAL_RCC_OscConfig+0x1c0>
                }
            }
        }
    }
    /*------------------------------ LSI Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) {
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 0308 	and.w	r3, r3, #8
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d036      	beq.n	800a91c <HAL_RCC_OscConfig+0x258>
        /* Check the parameters */
        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

        /* Check the LSI State */
        if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	695b      	ldr	r3, [r3, #20]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d016      	beq.n	800a8e4 <HAL_RCC_OscConfig+0x220>
            /* Enable the Internal Low Speed oscillator (LSI). */
            __HAL_RCC_LSI_ENABLE();
 800a8b6:	4b15      	ldr	r3, [pc, #84]	@ (800a90c <HAL_RCC_OscConfig+0x248>)
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	601a      	str	r2, [r3, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a8bc:	f7fe f9b6 	bl	8008c2c <HAL_GetTick>
 800a8c0:	6138      	str	r0, [r7, #16]

            /* Wait till LSI is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800a8c2:	e008      	b.n	800a8d6 <HAL_RCC_OscConfig+0x212>
                if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800a8c4:	f7fe f9b2 	bl	8008c2c <HAL_GetTick>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	1ad3      	subs	r3, r2, r3
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d901      	bls.n	800a8d6 <HAL_RCC_OscConfig+0x212>
                    return HAL_TIMEOUT;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	e167      	b.n	800aba6 <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800a8d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a904 <HAL_RCC_OscConfig+0x240>)
 800a8d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8da:	f003 0302 	and.w	r3, r3, #2
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d0f0      	beq.n	800a8c4 <HAL_RCC_OscConfig+0x200>
 800a8e2:	e01b      	b.n	800a91c <HAL_RCC_OscConfig+0x258>
                }
            }
        } else {
            /* Disable the Internal Low Speed oscillator (LSI). */
            __HAL_RCC_LSI_DISABLE();
 800a8e4:	4b09      	ldr	r3, [pc, #36]	@ (800a90c <HAL_RCC_OscConfig+0x248>)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	601a      	str	r2, [r3, #0]

            /* Get Start Tick */
            tickstart = HAL_GetTick();
 800a8ea:	f7fe f99f 	bl	8008c2c <HAL_GetTick>
 800a8ee:	6138      	str	r0, [r7, #16]

            /* Wait till LSI is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 800a8f0:	e00e      	b.n	800a910 <HAL_RCC_OscConfig+0x24c>
                if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800a8f2:	f7fe f99b 	bl	8008c2c <HAL_GetTick>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	2b02      	cmp	r3, #2
 800a8fe:	d907      	bls.n	800a910 <HAL_RCC_OscConfig+0x24c>
                    return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e150      	b.n	800aba6 <HAL_RCC_OscConfig+0x4e2>
 800a904:	40023800 	.word	0x40023800
 800a908:	42470000 	.word	0x42470000
 800a90c:	42470e80 	.word	0x42470e80
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 800a910:	4b88      	ldr	r3, [pc, #544]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800a912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a914:	f003 0302 	and.w	r3, r3, #2
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1ea      	bne.n	800a8f2 <HAL_RCC_OscConfig+0x22e>
                }
            }
        }
    }
    /*------------------------------ LSE Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE) {
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 0304 	and.w	r3, r3, #4
 800a924:	2b00      	cmp	r3, #0
 800a926:	f000 8097 	beq.w	800aa58 <HAL_RCC_OscConfig+0x394>
        FlagStatus pwrclkchanged = RESET;
 800a92a:	2300      	movs	r3, #0
 800a92c:	75fb      	strb	r3, [r7, #23]
        /* Check the parameters */
        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

        /* Update LSE configuration in Backup Domain control register    */
        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 800a92e:	4b81      	ldr	r3, [pc, #516]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800a930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a936:	2b00      	cmp	r3, #0
 800a938:	d10f      	bne.n	800a95a <HAL_RCC_OscConfig+0x296>
            __HAL_RCC_PWR_CLK_ENABLE();
 800a93a:	2300      	movs	r3, #0
 800a93c:	60bb      	str	r3, [r7, #8]
 800a93e:	4b7d      	ldr	r3, [pc, #500]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800a940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a942:	4a7c      	ldr	r2, [pc, #496]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800a944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a948:	6413      	str	r3, [r2, #64]	@ 0x40
 800a94a:	4b7a      	ldr	r3, [pc, #488]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800a94c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a94e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a952:	60bb      	str	r3, [r7, #8]
 800a954:	68bb      	ldr	r3, [r7, #8]
            pwrclkchanged = SET;
 800a956:	2301      	movs	r3, #1
 800a958:	75fb      	strb	r3, [r7, #23]
        }

        if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 800a95a:	4b77      	ldr	r3, [pc, #476]	@ (800ab38 <HAL_RCC_OscConfig+0x474>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a962:	2b00      	cmp	r3, #0
 800a964:	d118      	bne.n	800a998 <HAL_RCC_OscConfig+0x2d4>
            /* Enable write access to Backup domain */
            SET_BIT(PWR->CR, PWR_CR_DBP);
 800a966:	4b74      	ldr	r3, [pc, #464]	@ (800ab38 <HAL_RCC_OscConfig+0x474>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a73      	ldr	r2, [pc, #460]	@ (800ab38 <HAL_RCC_OscConfig+0x474>)
 800a96c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a970:	6013      	str	r3, [r2, #0]

            /* Wait for Backup domain Write protection disable */
            tickstart = HAL_GetTick();
 800a972:	f7fe f95b 	bl	8008c2c <HAL_GetTick>
 800a976:	6138      	str	r0, [r7, #16]

            while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 800a978:	e008      	b.n	800a98c <HAL_RCC_OscConfig+0x2c8>
                if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800a97a:	f7fe f957 	bl	8008c2c <HAL_GetTick>
 800a97e:	4602      	mov	r2, r0
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	1ad3      	subs	r3, r2, r3
 800a984:	2b02      	cmp	r3, #2
 800a986:	d901      	bls.n	800a98c <HAL_RCC_OscConfig+0x2c8>
                    return HAL_TIMEOUT;
 800a988:	2303      	movs	r3, #3
 800a98a:	e10c      	b.n	800aba6 <HAL_RCC_OscConfig+0x4e2>
            while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 800a98c:	4b6a      	ldr	r3, [pc, #424]	@ (800ab38 <HAL_RCC_OscConfig+0x474>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a994:	2b00      	cmp	r3, #0
 800a996:	d0f0      	beq.n	800a97a <HAL_RCC_OscConfig+0x2b6>
                }
            }
        }

        /* Set the new LSE configuration -----------------------------------------*/
        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d106      	bne.n	800a9ae <HAL_RCC_OscConfig+0x2ea>
 800a9a0:	4b64      	ldr	r3, [pc, #400]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800a9a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9a4:	4a63      	ldr	r2, [pc, #396]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800a9a6:	f043 0301 	orr.w	r3, r3, #1
 800a9aa:	6713      	str	r3, [r2, #112]	@ 0x70
 800a9ac:	e01c      	b.n	800a9e8 <HAL_RCC_OscConfig+0x324>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	2b05      	cmp	r3, #5
 800a9b4:	d10c      	bne.n	800a9d0 <HAL_RCC_OscConfig+0x30c>
 800a9b6:	4b5f      	ldr	r3, [pc, #380]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800a9b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9ba:	4a5e      	ldr	r2, [pc, #376]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800a9bc:	f043 0304 	orr.w	r3, r3, #4
 800a9c0:	6713      	str	r3, [r2, #112]	@ 0x70
 800a9c2:	4b5c      	ldr	r3, [pc, #368]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800a9c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9c6:	4a5b      	ldr	r2, [pc, #364]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800a9c8:	f043 0301 	orr.w	r3, r3, #1
 800a9cc:	6713      	str	r3, [r2, #112]	@ 0x70
 800a9ce:	e00b      	b.n	800a9e8 <HAL_RCC_OscConfig+0x324>
 800a9d0:	4b58      	ldr	r3, [pc, #352]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800a9d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9d4:	4a57      	ldr	r2, [pc, #348]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800a9d6:	f023 0301 	bic.w	r3, r3, #1
 800a9da:	6713      	str	r3, [r2, #112]	@ 0x70
 800a9dc:	4b55      	ldr	r3, [pc, #340]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800a9de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9e0:	4a54      	ldr	r2, [pc, #336]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800a9e2:	f023 0304 	bic.w	r3, r3, #4
 800a9e6:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Check the LSE State */
        if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d015      	beq.n	800aa1c <HAL_RCC_OscConfig+0x358>
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a9f0:	f7fe f91c 	bl	8008c2c <HAL_GetTick>
 800a9f4:	6138      	str	r0, [r7, #16]

            /* Wait till LSE is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800a9f6:	e00a      	b.n	800aa0e <HAL_RCC_OscConfig+0x34a>
                if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800a9f8:	f7fe f918 	bl	8008c2c <HAL_GetTick>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	1ad3      	subs	r3, r2, r3
 800aa02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d901      	bls.n	800aa0e <HAL_RCC_OscConfig+0x34a>
                    return HAL_TIMEOUT;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	e0cb      	b.n	800aba6 <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800aa0e:	4b49      	ldr	r3, [pc, #292]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800aa10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa12:	f003 0302 	and.w	r3, r3, #2
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d0ee      	beq.n	800a9f8 <HAL_RCC_OscConfig+0x334>
 800aa1a:	e014      	b.n	800aa46 <HAL_RCC_OscConfig+0x382>
                }
            }
        } else {
            /* Get Start Tick */
            tickstart = HAL_GetTick();
 800aa1c:	f7fe f906 	bl	8008c2c <HAL_GetTick>
 800aa20:	6138      	str	r0, [r7, #16]

            /* Wait till LSE is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 800aa22:	e00a      	b.n	800aa3a <HAL_RCC_OscConfig+0x376>
                if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800aa24:	f7fe f902 	bl	8008c2c <HAL_GetTick>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d901      	bls.n	800aa3a <HAL_RCC_OscConfig+0x376>
                    return HAL_TIMEOUT;
 800aa36:	2303      	movs	r3, #3
 800aa38:	e0b5      	b.n	800aba6 <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 800aa3a:	4b3e      	ldr	r3, [pc, #248]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800aa3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa3e:	f003 0302 	and.w	r3, r3, #2
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d1ee      	bne.n	800aa24 <HAL_RCC_OscConfig+0x360>
                }
            }
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET) {
 800aa46:	7dfb      	ldrb	r3, [r7, #23]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d105      	bne.n	800aa58 <HAL_RCC_OscConfig+0x394>
            __HAL_RCC_PWR_CLK_DISABLE();
 800aa4c:	4b39      	ldr	r3, [pc, #228]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800aa4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa50:	4a38      	ldr	r2, [pc, #224]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800aa52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa56:	6413      	str	r3, [r2, #64]	@ 0x40
        }
    }
    /*-------------------------------- PLL Configuration -----------------------*/
    /* Check the parameters */
    assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
    if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	699b      	ldr	r3, [r3, #24]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 80a1 	beq.w	800aba4 <HAL_RCC_OscConfig+0x4e0>
        /* Check if the PLL is used as system clock or not */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 800aa62:	4b34      	ldr	r3, [pc, #208]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	f003 030c 	and.w	r3, r3, #12
 800aa6a:	2b08      	cmp	r3, #8
 800aa6c:	d05c      	beq.n	800ab28 <HAL_RCC_OscConfig+0x464>
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d141      	bne.n	800aafa <HAL_RCC_OscConfig+0x436>
                assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
                assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
                assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

                /* Disable the main PLL. */
                __HAL_RCC_PLL_DISABLE();
 800aa76:	4b31      	ldr	r3, [pc, #196]	@ (800ab3c <HAL_RCC_OscConfig+0x478>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 800aa7c:	f7fe f8d6 	bl	8008c2c <HAL_GetTick>
 800aa80:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is disabled */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800aa82:	e008      	b.n	800aa96 <HAL_RCC_OscConfig+0x3d2>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800aa84:	f7fe f8d2 	bl	8008c2c <HAL_GetTick>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d901      	bls.n	800aa96 <HAL_RCC_OscConfig+0x3d2>
                        return HAL_TIMEOUT;
 800aa92:	2303      	movs	r3, #3
 800aa94:	e087      	b.n	800aba6 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800aa96:	4b27      	ldr	r3, [pc, #156]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1f0      	bne.n	800aa84 <HAL_RCC_OscConfig+0x3c0>
                    }
                }

                /* Configure the main PLL clock source, multiplication and division factors. */
                WRITE_REG(RCC->PLLCFGR,
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	69da      	ldr	r2, [r3, #28]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6a1b      	ldr	r3, [r3, #32]
 800aaaa:	431a      	orrs	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab0:	019b      	lsls	r3, r3, #6
 800aab2:	431a      	orrs	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aab8:	085b      	lsrs	r3, r3, #1
 800aaba:	3b01      	subs	r3, #1
 800aabc:	041b      	lsls	r3, r3, #16
 800aabe:	431a      	orrs	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac4:	061b      	lsls	r3, r3, #24
 800aac6:	491b      	ldr	r1, [pc, #108]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800aac8:	4313      	orrs	r3, r2
 800aaca:	604b      	str	r3, [r1, #4]
                        (RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
                /* Enable the main PLL. */
                __HAL_RCC_PLL_ENABLE();
 800aacc:	4b1b      	ldr	r3, [pc, #108]	@ (800ab3c <HAL_RCC_OscConfig+0x478>)
 800aace:	2201      	movs	r2, #1
 800aad0:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 800aad2:	f7fe f8ab 	bl	8008c2c <HAL_GetTick>
 800aad6:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800aad8:	e008      	b.n	800aaec <HAL_RCC_OscConfig+0x428>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800aada:	f7fe f8a7 	bl	8008c2c <HAL_GetTick>
 800aade:	4602      	mov	r2, r0
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d901      	bls.n	800aaec <HAL_RCC_OscConfig+0x428>
                        return HAL_TIMEOUT;
 800aae8:	2303      	movs	r3, #3
 800aaea:	e05c      	b.n	800aba6 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800aaec:	4b11      	ldr	r3, [pc, #68]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d0f0      	beq.n	800aada <HAL_RCC_OscConfig+0x416>
 800aaf8:	e054      	b.n	800aba4 <HAL_RCC_OscConfig+0x4e0>
                    }
                }
            } else {
                /* Disable the main PLL. */
                __HAL_RCC_PLL_DISABLE();
 800aafa:	4b10      	ldr	r3, [pc, #64]	@ (800ab3c <HAL_RCC_OscConfig+0x478>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 800ab00:	f7fe f894 	bl	8008c2c <HAL_GetTick>
 800ab04:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is disabled */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800ab06:	e008      	b.n	800ab1a <HAL_RCC_OscConfig+0x456>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800ab08:	f7fe f890 	bl	8008c2c <HAL_GetTick>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d901      	bls.n	800ab1a <HAL_RCC_OscConfig+0x456>
                        return HAL_TIMEOUT;
 800ab16:	2303      	movs	r3, #3
 800ab18:	e045      	b.n	800aba6 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800ab1a:	4b06      	ldr	r3, [pc, #24]	@ (800ab34 <HAL_RCC_OscConfig+0x470>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1f0      	bne.n	800ab08 <HAL_RCC_OscConfig+0x444>
 800ab26:	e03d      	b.n	800aba4 <HAL_RCC_OscConfig+0x4e0>
                    }
                }
            }
        } else {
            /* Check if there is a request to disable the PLL used as System clock source */
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	699b      	ldr	r3, [r3, #24]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d107      	bne.n	800ab40 <HAL_RCC_OscConfig+0x47c>
                return HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	e038      	b.n	800aba6 <HAL_RCC_OscConfig+0x4e2>
 800ab34:	40023800 	.word	0x40023800
 800ab38:	40007000 	.word	0x40007000
 800ab3c:	42470060 	.word	0x42470060
            } else {
                /* Do not return HAL_ERROR if request repeats the current configuration */
                pll_config = RCC->PLLCFGR;
 800ab40:	4b1b      	ldr	r3, [pc, #108]	@ (800abb0 <HAL_RCC_OscConfig+0x4ec>)
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
                if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	699b      	ldr	r3, [r3, #24]
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d028      	beq.n	800aba0 <HAL_RCC_OscConfig+0x4dc>
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	69db      	ldr	r3, [r3, #28]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d121      	bne.n	800aba0 <HAL_RCC_OscConfig+0x4dc>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a1b      	ldr	r3, [r3, #32]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d11a      	bne.n	800aba0 <HAL_RCC_OscConfig+0x4dc>
                        || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos)
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ab70:	4013      	ands	r3, r2
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ab76:	0192      	lsls	r2, r2, #6
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d111      	bne.n	800aba0 <HAL_RCC_OscConfig+0x4dc>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab86:	085b      	lsrs	r3, r3, #1
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	041b      	lsls	r3, r3, #16
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d107      	bne.n	800aba0 <HAL_RCC_OscConfig+0x4dc>
                        || (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab9a:	061b      	lsls	r3, r3, #24
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d001      	beq.n	800aba4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
                        {
                    return HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	e000      	b.n	800aba6 <HAL_RCC_OscConfig+0x4e2>
                }
            }
        }
    }
    return HAL_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3718      	adds	r7, #24
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	40023800 	.word	0x40023800

0800abb4 <HAL_RCC_ClockConfig>:
 * @note   Depending on the device voltage range, the software has to set correctly
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency) {
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
    uint32_t tickstart;

    /* Check Null pointer */
    if (RCC_ClkInitStruct == NULL) {
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d101      	bne.n	800abc8 <HAL_RCC_ClockConfig+0x14>
        return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e0cc      	b.n	800ad62 <HAL_RCC_ClockConfig+0x1ae>
    /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

    /* Increasing the number of wait states because of higher CPU frequency */
    if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 800abc8:	4b68      	ldr	r3, [pc, #416]	@ (800ad6c <HAL_RCC_ClockConfig+0x1b8>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0307 	and.w	r3, r3, #7
 800abd0:	683a      	ldr	r2, [r7, #0]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d90c      	bls.n	800abf0 <HAL_RCC_ClockConfig+0x3c>
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        __HAL_FLASH_SET_LATENCY(FLatency);
 800abd6:	4b65      	ldr	r3, [pc, #404]	@ (800ad6c <HAL_RCC_ClockConfig+0x1b8>)
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	b2d2      	uxtb	r2, r2
 800abdc:	701a      	strb	r2, [r3, #0]

        /* Check that the new number of wait states is taken into account to access the Flash
         memory by reading the FLASH_ACR register */
        if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800abde:	4b63      	ldr	r3, [pc, #396]	@ (800ad6c <HAL_RCC_ClockConfig+0x1b8>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 0307 	and.w	r3, r3, #7
 800abe6:	683a      	ldr	r2, [r7, #0]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d001      	beq.n	800abf0 <HAL_RCC_ClockConfig+0x3c>
            return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e0b8      	b.n	800ad62 <HAL_RCC_ClockConfig+0x1ae>
        }
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0302 	and.w	r3, r3, #2
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d020      	beq.n	800ac3e <HAL_RCC_ClockConfig+0x8a>
        /* Set the highest APBx dividers in order to ensure that we do not go through
         a non-spec phase whatever we decrease or increase HCLK. */
        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f003 0304 	and.w	r3, r3, #4
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d005      	beq.n	800ac14 <HAL_RCC_ClockConfig+0x60>
            MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac08:	4b59      	ldr	r3, [pc, #356]	@ (800ad70 <HAL_RCC_ClockConfig+0x1bc>)
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	4a58      	ldr	r2, [pc, #352]	@ (800ad70 <HAL_RCC_ClockConfig+0x1bc>)
 800ac0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ac12:	6093      	str	r3, [r2, #8]
        }

        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0308 	and.w	r3, r3, #8
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d005      	beq.n	800ac2c <HAL_RCC_ClockConfig+0x78>
            MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ac20:	4b53      	ldr	r3, [pc, #332]	@ (800ad70 <HAL_RCC_ClockConfig+0x1bc>)
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	4a52      	ldr	r2, [pc, #328]	@ (800ad70 <HAL_RCC_ClockConfig+0x1bc>)
 800ac26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ac2a:	6093      	str	r3, [r2, #8]
        }

        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac2c:	4b50      	ldr	r3, [pc, #320]	@ (800ad70 <HAL_RCC_ClockConfig+0x1bc>)
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	494d      	ldr	r1, [pc, #308]	@ (800ad70 <HAL_RCC_ClockConfig+0x1bc>)
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d044      	beq.n	800acd4 <HAL_RCC_ClockConfig+0x120>
        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

        /* HSE is selected as System Clock Source */
        if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d107      	bne.n	800ac62 <HAL_RCC_ClockConfig+0xae>
            /* Check the HSE ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800ac52:	4b47      	ldr	r3, [pc, #284]	@ (800ad70 <HAL_RCC_ClockConfig+0x1bc>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d119      	bne.n	800ac92 <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e07f      	b.n	800ad62 <HAL_RCC_ClockConfig+0x1ae>
            }
        }
        /* PLL is selected as System Clock Source */
        else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d003      	beq.n	800ac72 <HAL_RCC_ClockConfig+0xbe>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	d107      	bne.n	800ac82 <HAL_RCC_ClockConfig+0xce>
            /* Check the PLL ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800ac72:	4b3f      	ldr	r3, [pc, #252]	@ (800ad70 <HAL_RCC_ClockConfig+0x1bc>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d109      	bne.n	800ac92 <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e06f      	b.n	800ad62 <HAL_RCC_ClockConfig+0x1ae>
            }
        }
        /* HSI is selected as System Clock Source */
        else {
            /* Check the HSI ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800ac82:	4b3b      	ldr	r3, [pc, #236]	@ (800ad70 <HAL_RCC_ClockConfig+0x1bc>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f003 0302 	and.w	r3, r3, #2
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d101      	bne.n	800ac92 <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e067      	b.n	800ad62 <HAL_RCC_ClockConfig+0x1ae>
            }
        }

        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ac92:	4b37      	ldr	r3, [pc, #220]	@ (800ad70 <HAL_RCC_ClockConfig+0x1bc>)
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	f023 0203 	bic.w	r2, r3, #3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	4934      	ldr	r1, [pc, #208]	@ (800ad70 <HAL_RCC_ClockConfig+0x1bc>)
 800aca0:	4313      	orrs	r3, r2
 800aca2:	608b      	str	r3, [r1, #8]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aca4:	f7fd ffc2 	bl	8008c2c <HAL_GetTick>
 800aca8:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 800acaa:	e00a      	b.n	800acc2 <HAL_RCC_ClockConfig+0x10e>
            if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 800acac:	f7fd ffbe 	bl	8008c2c <HAL_GetTick>
 800acb0:	4602      	mov	r2, r0
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acba:	4293      	cmp	r3, r2
 800acbc:	d901      	bls.n	800acc2 <HAL_RCC_ClockConfig+0x10e>
                return HAL_TIMEOUT;
 800acbe:	2303      	movs	r3, #3
 800acc0:	e04f      	b.n	800ad62 <HAL_RCC_ClockConfig+0x1ae>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 800acc2:	4b2b      	ldr	r3, [pc, #172]	@ (800ad70 <HAL_RCC_ClockConfig+0x1bc>)
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	f003 020c 	and.w	r2, r3, #12
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d1eb      	bne.n	800acac <HAL_RCC_ClockConfig+0xf8>
            }
        }
    }

    /* Decreasing the number of wait states because of lower CPU frequency */
    if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 800acd4:	4b25      	ldr	r3, [pc, #148]	@ (800ad6c <HAL_RCC_ClockConfig+0x1b8>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f003 0307 	and.w	r3, r3, #7
 800acdc:	683a      	ldr	r2, [r7, #0]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d20c      	bcs.n	800acfc <HAL_RCC_ClockConfig+0x148>
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        __HAL_FLASH_SET_LATENCY(FLatency);
 800ace2:	4b22      	ldr	r3, [pc, #136]	@ (800ad6c <HAL_RCC_ClockConfig+0x1b8>)
 800ace4:	683a      	ldr	r2, [r7, #0]
 800ace6:	b2d2      	uxtb	r2, r2
 800ace8:	701a      	strb	r2, [r3, #0]

        /* Check that the new number of wait states is taken into account to access the Flash
         memory by reading the FLASH_ACR register */
        if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800acea:	4b20      	ldr	r3, [pc, #128]	@ (800ad6c <HAL_RCC_ClockConfig+0x1b8>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 0307 	and.w	r3, r3, #7
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d001      	beq.n	800acfc <HAL_RCC_ClockConfig+0x148>
            return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e032      	b.n	800ad62 <HAL_RCC_ClockConfig+0x1ae>
        }
    }

    /*-------------------------- PCLK1 Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0304 	and.w	r3, r3, #4
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d008      	beq.n	800ad1a <HAL_RCC_ClockConfig+0x166>
        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad08:	4b19      	ldr	r3, [pc, #100]	@ (800ad70 <HAL_RCC_ClockConfig+0x1bc>)
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	4916      	ldr	r1, [pc, #88]	@ (800ad70 <HAL_RCC_ClockConfig+0x1bc>)
 800ad16:	4313      	orrs	r3, r2
 800ad18:	608b      	str	r3, [r1, #8]
    }

    /*-------------------------- PCLK2 Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f003 0308 	and.w	r3, r3, #8
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d009      	beq.n	800ad3a <HAL_RCC_ClockConfig+0x186>
        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ad26:	4b12      	ldr	r3, [pc, #72]	@ (800ad70 <HAL_RCC_ClockConfig+0x1bc>)
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	00db      	lsls	r3, r3, #3
 800ad34:	490e      	ldr	r1, [pc, #56]	@ (800ad70 <HAL_RCC_ClockConfig+0x1bc>)
 800ad36:	4313      	orrs	r3, r2
 800ad38:	608b      	str	r3, [r1, #8]
    }

    /* Update the SystemCoreClock global variable */
    SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ad3a:	f000 f821 	bl	800ad80 <HAL_RCC_GetSysClockFreq>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	4b0b      	ldr	r3, [pc, #44]	@ (800ad70 <HAL_RCC_ClockConfig+0x1bc>)
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	091b      	lsrs	r3, r3, #4
 800ad46:	f003 030f 	and.w	r3, r3, #15
 800ad4a:	490a      	ldr	r1, [pc, #40]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c0>)
 800ad4c:	5ccb      	ldrb	r3, [r1, r3]
 800ad4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad52:	4a09      	ldr	r2, [pc, #36]	@ (800ad78 <HAL_RCC_ClockConfig+0x1c4>)
 800ad54:	6013      	str	r3, [r2, #0]

    /* Configure the source of time base considering new system clocks settings */
    HAL_InitTick(uwTickPrio);
 800ad56:	4b09      	ldr	r3, [pc, #36]	@ (800ad7c <HAL_RCC_ClockConfig+0x1c8>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7fd ff22 	bl	8008ba4 <HAL_InitTick>

    return HAL_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	40023c00 	.word	0x40023c00
 800ad70:	40023800 	.word	0x40023800
 800ad74:	0801074c 	.word	0x0801074c
 800ad78:	20000000 	.word	0x20000000
 800ad7c:	20000004 	.word	0x20000004

0800ad80 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 800ad80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad84:	b090      	sub	sp, #64	@ 0x40
 800ad86:	af00      	add	r7, sp, #0
    uint32_t pllm = 0U;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t pllvco = 0U;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t pllp = 0U;
 800ad90:	2300      	movs	r3, #0
 800ad92:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t sysclockfreq = 0U;
 800ad94:	2300      	movs	r3, #0
 800ad96:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Get SYSCLK source -------------------------------------------------------*/
    switch (RCC->CFGR & RCC_CFGR_SWS) {
 800ad98:	4b59      	ldr	r3, [pc, #356]	@ (800af00 <HAL_RCC_GetSysClockFreq+0x180>)
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	f003 030c 	and.w	r3, r3, #12
 800ada0:	2b08      	cmp	r3, #8
 800ada2:	d00d      	beq.n	800adc0 <HAL_RCC_GetSysClockFreq+0x40>
 800ada4:	2b08      	cmp	r3, #8
 800ada6:	f200 80a1 	bhi.w	800aeec <HAL_RCC_GetSysClockFreq+0x16c>
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d002      	beq.n	800adb4 <HAL_RCC_GetSysClockFreq+0x34>
 800adae:	2b04      	cmp	r3, #4
 800adb0:	d003      	beq.n	800adba <HAL_RCC_GetSysClockFreq+0x3a>
 800adb2:	e09b      	b.n	800aeec <HAL_RCC_GetSysClockFreq+0x16c>
    case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
    {
        sysclockfreq = HSI_VALUE;
 800adb4:	4b53      	ldr	r3, [pc, #332]	@ (800af04 <HAL_RCC_GetSysClockFreq+0x184>)
 800adb6:	63bb      	str	r3, [r7, #56]	@ 0x38
        break;
 800adb8:	e09b      	b.n	800aef2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
    {
        sysclockfreq = HSE_VALUE;
 800adba:	4b53      	ldr	r3, [pc, #332]	@ (800af08 <HAL_RCC_GetSysClockFreq+0x188>)
 800adbc:	63bb      	str	r3, [r7, #56]	@ 0x38
        break;
 800adbe:	e098      	b.n	800aef2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
    {
        /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP */
        pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800adc0:	4b4f      	ldr	r3, [pc, #316]	@ (800af00 <HAL_RCC_GetSysClockFreq+0x180>)
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800adc8:	637b      	str	r3, [r7, #52]	@ 0x34
        if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 800adca:	4b4d      	ldr	r3, [pc, #308]	@ (800af00 <HAL_RCC_GetSysClockFreq+0x180>)
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800add2:	2b00      	cmp	r3, #0
 800add4:	d028      	beq.n	800ae28 <HAL_RCC_GetSysClockFreq+0xa8>
            /* HSE used as PLL clock source */
            pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800add6:	4b4a      	ldr	r3, [pc, #296]	@ (800af00 <HAL_RCC_GetSysClockFreq+0x180>)
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	099b      	lsrs	r3, r3, #6
 800addc:	2200      	movs	r2, #0
 800adde:	623b      	str	r3, [r7, #32]
 800ade0:	627a      	str	r2, [r7, #36]	@ 0x24
 800ade2:	6a3b      	ldr	r3, [r7, #32]
 800ade4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800ade8:	2100      	movs	r1, #0
 800adea:	4b47      	ldr	r3, [pc, #284]	@ (800af08 <HAL_RCC_GetSysClockFreq+0x188>)
 800adec:	fb03 f201 	mul.w	r2, r3, r1
 800adf0:	2300      	movs	r3, #0
 800adf2:	fb00 f303 	mul.w	r3, r0, r3
 800adf6:	4413      	add	r3, r2
 800adf8:	4a43      	ldr	r2, [pc, #268]	@ (800af08 <HAL_RCC_GetSysClockFreq+0x188>)
 800adfa:	fba0 1202 	umull	r1, r2, r0, r2
 800adfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae00:	460a      	mov	r2, r1
 800ae02:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ae04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae06:	4413      	add	r3, r2
 800ae08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	61bb      	str	r3, [r7, #24]
 800ae10:	61fa      	str	r2, [r7, #28]
 800ae12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ae1a:	f7fd fa31 	bl	8008280 <__aeabi_uldivmod>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	460b      	mov	r3, r1
 800ae22:	4613      	mov	r3, r2
 800ae24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae26:	e053      	b.n	800aed0 <HAL_RCC_GetSysClockFreq+0x150>
        } else {
            /* HSI used as PLL clock source */
            pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800ae28:	4b35      	ldr	r3, [pc, #212]	@ (800af00 <HAL_RCC_GetSysClockFreq+0x180>)
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	099b      	lsrs	r3, r3, #6
 800ae2e:	2200      	movs	r2, #0
 800ae30:	613b      	str	r3, [r7, #16]
 800ae32:	617a      	str	r2, [r7, #20]
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ae3a:	f04f 0b00 	mov.w	fp, #0
 800ae3e:	4652      	mov	r2, sl
 800ae40:	465b      	mov	r3, fp
 800ae42:	f04f 0000 	mov.w	r0, #0
 800ae46:	f04f 0100 	mov.w	r1, #0
 800ae4a:	0159      	lsls	r1, r3, #5
 800ae4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ae50:	0150      	lsls	r0, r2, #5
 800ae52:	4602      	mov	r2, r0
 800ae54:	460b      	mov	r3, r1
 800ae56:	ebb2 080a 	subs.w	r8, r2, sl
 800ae5a:	eb63 090b 	sbc.w	r9, r3, fp
 800ae5e:	f04f 0200 	mov.w	r2, #0
 800ae62:	f04f 0300 	mov.w	r3, #0
 800ae66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ae6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ae6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ae72:	ebb2 0408 	subs.w	r4, r2, r8
 800ae76:	eb63 0509 	sbc.w	r5, r3, r9
 800ae7a:	f04f 0200 	mov.w	r2, #0
 800ae7e:	f04f 0300 	mov.w	r3, #0
 800ae82:	00eb      	lsls	r3, r5, #3
 800ae84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ae88:	00e2      	lsls	r2, r4, #3
 800ae8a:	4614      	mov	r4, r2
 800ae8c:	461d      	mov	r5, r3
 800ae8e:	eb14 030a 	adds.w	r3, r4, sl
 800ae92:	603b      	str	r3, [r7, #0]
 800ae94:	eb45 030b 	adc.w	r3, r5, fp
 800ae98:	607b      	str	r3, [r7, #4]
 800ae9a:	f04f 0200 	mov.w	r2, #0
 800ae9e:	f04f 0300 	mov.w	r3, #0
 800aea2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800aea6:	4629      	mov	r1, r5
 800aea8:	028b      	lsls	r3, r1, #10
 800aeaa:	4621      	mov	r1, r4
 800aeac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	028a      	lsls	r2, r1, #10
 800aeb4:	4610      	mov	r0, r2
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeba:	2200      	movs	r2, #0
 800aebc:	60bb      	str	r3, [r7, #8]
 800aebe:	60fa      	str	r2, [r7, #12]
 800aec0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aec4:	f7fd f9dc 	bl	8008280 <__aeabi_uldivmod>
 800aec8:	4602      	mov	r2, r0
 800aeca:	460b      	mov	r3, r1
 800aecc:	4613      	mov	r3, r2
 800aece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800aed0:	4b0b      	ldr	r3, [pc, #44]	@ (800af00 <HAL_RCC_GetSysClockFreq+0x180>)
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	0c1b      	lsrs	r3, r3, #16
 800aed6:	f003 0303 	and.w	r3, r3, #3
 800aeda:	3301      	adds	r3, #1
 800aedc:	005b      	lsls	r3, r3, #1
 800aede:	633b      	str	r3, [r7, #48]	@ 0x30

        sysclockfreq = pllvco / pllp;
 800aee0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aee8:	63bb      	str	r3, [r7, #56]	@ 0x38
        break;
 800aeea:	e002      	b.n	800aef2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default: {
        sysclockfreq = HSI_VALUE;
 800aeec:	4b05      	ldr	r3, [pc, #20]	@ (800af04 <HAL_RCC_GetSysClockFreq+0x184>)
 800aeee:	63bb      	str	r3, [r7, #56]	@ 0x38
        break;
 800aef0:	bf00      	nop
    }
    }
    return sysclockfreq;
 800aef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3740      	adds	r7, #64	@ 0x40
 800aef8:	46bd      	mov	sp, r7
 800aefa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aefe:	bf00      	nop
 800af00:	40023800 	.word	0x40023800
 800af04:	00f42400 	.word	0x00f42400
 800af08:	017d7840 	.word	0x017d7840

0800af0c <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 800af0c:	b480      	push	{r7}
 800af0e:	af00      	add	r7, sp, #0
    return SystemCoreClock;
 800af10:	4b03      	ldr	r3, [pc, #12]	@ (800af20 <HAL_RCC_GetHCLKFreq+0x14>)
 800af12:	681b      	ldr	r3, [r3, #0]
}
 800af14:	4618      	mov	r0, r3
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	20000000 	.word	0x20000000

0800af24 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 800af24:	b580      	push	{r7, lr}
 800af26:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800af28:	f7ff fff0 	bl	800af0c <HAL_RCC_GetHCLKFreq>
 800af2c:	4602      	mov	r2, r0
 800af2e:	4b05      	ldr	r3, [pc, #20]	@ (800af44 <HAL_RCC_GetPCLK1Freq+0x20>)
 800af30:	689b      	ldr	r3, [r3, #8]
 800af32:	0a9b      	lsrs	r3, r3, #10
 800af34:	f003 0307 	and.w	r3, r3, #7
 800af38:	4903      	ldr	r1, [pc, #12]	@ (800af48 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af3a:	5ccb      	ldrb	r3, [r1, r3]
 800af3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af40:	4618      	mov	r0, r3
 800af42:	bd80      	pop	{r7, pc}
 800af44:	40023800 	.word	0x40023800
 800af48:	0801075c 	.word	0x0801075c

0800af4c <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 800af4c:	b580      	push	{r7, lr}
 800af4e:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
    return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800af50:	f7ff ffdc 	bl	800af0c <HAL_RCC_GetHCLKFreq>
 800af54:	4602      	mov	r2, r0
 800af56:	4b05      	ldr	r3, [pc, #20]	@ (800af6c <HAL_RCC_GetPCLK2Freq+0x20>)
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	0b5b      	lsrs	r3, r3, #13
 800af5c:	f003 0307 	and.w	r3, r3, #7
 800af60:	4903      	ldr	r1, [pc, #12]	@ (800af70 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af62:	5ccb      	ldrb	r3, [r1, r3]
 800af64:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af68:	4618      	mov	r0, r3
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	40023800 	.word	0x40023800
 800af70:	0801075c 	.word	0x0801075c

0800af74 <HAL_UART_Init>:
 *         the UART_InitTypeDef and create the associated handle.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
    /* Check the UART handle allocation */
    if (huart == NULL) {
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <HAL_UART_Init+0x12>
        return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e042      	b.n	800b00c <HAL_UART_Init+0x98>
        assert_param(IS_UART_INSTANCE(huart->Instance));
    }
    assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
    assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

    if (huart->gState == HAL_UART_STATE_RESET) {
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d106      	bne.n	800afa0 <HAL_UART_Init+0x2c>
        /* Allocate lock resource and initialize it */
        huart->Lock = HAL_UNLOCKED;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
        /* Init the low level hardware : GPIO, CLOCK */
        HAL_UART_MspInit(huart);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f7fd fd6e 	bl	8008a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
    }

    huart->gState = HAL_UART_STATE_BUSY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2224      	movs	r2, #36	@ 0x24
 800afa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the peripheral */
    __HAL_UART_DISABLE(huart);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68da      	ldr	r2, [r3, #12]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800afb6:	60da      	str	r2, [r3, #12]

    /* Set the UART Communication parameters */
    UART_SetConfig(huart);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 f973 	bl	800b2a4 <UART_SetConfig>

    /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
    CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	691a      	ldr	r2, [r3, #16]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800afcc:	611a      	str	r2, [r3, #16]
    CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	695a      	ldr	r2, [r3, #20]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800afdc:	615a      	str	r2, [r3, #20]

    /* Enable the peripheral */
    __HAL_UART_ENABLE(huart);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68da      	ldr	r2, [r3, #12]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800afec:	60da      	str	r2, [r3, #12]

    /* Initialize the UART state */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_READY;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2220      	movs	r2, #32
 800aff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2220      	movs	r2, #32
 800b000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	635a      	str	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3708      	adds	r7, #8
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <HAL_UART_Transmit>:
 * @param  pData Pointer to data buffer (u8 or u16 data elements).
 * @param  Size  Amount of data elements (u8 or u16) to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 800b014:	b580      	push	{r7, lr}
 800b016:	b08a      	sub	sp, #40	@ 0x28
 800b018:	af02      	add	r7, sp, #8
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	603b      	str	r3, [r7, #0]
 800b020:	4613      	mov	r3, r2
 800b022:	80fb      	strh	r3, [r7, #6]
    const uint8_t *pdata8bits;
    const uint16_t *pdata16bits;
    uint32_t tickstart = 0U;
 800b024:	2300      	movs	r3, #0
 800b026:	617b      	str	r3, [r7, #20]

    /* Check that a Tx process is not already ongoing */
    if (huart->gState == HAL_UART_STATE_READY) {
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	2b20      	cmp	r3, #32
 800b032:	d175      	bne.n	800b120 <HAL_UART_Transmit+0x10c>
        if ((pData == NULL) || (Size == 0U)) {
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d002      	beq.n	800b040 <HAL_UART_Transmit+0x2c>
 800b03a:	88fb      	ldrh	r3, [r7, #6]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d101      	bne.n	800b044 <HAL_UART_Transmit+0x30>
            return HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	e06e      	b.n	800b122 <HAL_UART_Transmit+0x10e>
        }

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2200      	movs	r2, #0
 800b048:	645a      	str	r2, [r3, #68]	@ 0x44
        huart->gState = HAL_UART_STATE_BUSY_TX;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2221      	movs	r2, #33	@ 0x21
 800b04e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Init tickstart for timeout management */
        tickstart = HAL_GetTick();
 800b052:	f7fd fdeb 	bl	8008c2c <HAL_GetTick>
 800b056:	6178      	str	r0, [r7, #20]

        huart->TxXferSize = Size;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	88fa      	ldrh	r2, [r7, #6]
 800b05c:	849a      	strh	r2, [r3, #36]	@ 0x24
        huart->TxXferCount = Size;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	88fa      	ldrh	r2, [r7, #6]
 800b062:	84da      	strh	r2, [r3, #38]	@ 0x26

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE)) {
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b06c:	d108      	bne.n	800b080 <HAL_UART_Transmit+0x6c>
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d104      	bne.n	800b080 <HAL_UART_Transmit+0x6c>
            pdata8bits = NULL;
 800b076:	2300      	movs	r3, #0
 800b078:	61fb      	str	r3, [r7, #28]
            pdata16bits = (const uint16_t*) pData;
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	61bb      	str	r3, [r7, #24]
 800b07e:	e003      	b.n	800b088 <HAL_UART_Transmit+0x74>
        } else {
            pdata8bits = pData;
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	61fb      	str	r3, [r7, #28]
            pdata16bits = NULL;
 800b084:	2300      	movs	r3, #0
 800b086:	61bb      	str	r3, [r7, #24]
        }

        while (huart->TxXferCount > 0U) {
 800b088:	e02e      	b.n	800b0e8 <HAL_UART_Transmit+0xd4>
            if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK) {
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	2200      	movs	r2, #0
 800b092:	2180      	movs	r1, #128	@ 0x80
 800b094:	68f8      	ldr	r0, [r7, #12]
 800b096:	f000 f848 	bl	800b12a <UART_WaitOnFlagUntilTimeout>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d005      	beq.n	800b0ac <HAL_UART_Transmit+0x98>
                huart->gState = HAL_UART_STATE_READY;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2220      	movs	r2, #32
 800b0a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

                return HAL_TIMEOUT;
 800b0a8:	2303      	movs	r3, #3
 800b0aa:	e03a      	b.n	800b122 <HAL_UART_Transmit+0x10e>
            }
            if (pdata8bits == NULL) {
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d10b      	bne.n	800b0ca <HAL_UART_Transmit+0xb6>
                huart->Instance->DR = (uint16_t) (*pdata16bits & 0x01FFU);
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	881b      	ldrh	r3, [r3, #0]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0c0:	605a      	str	r2, [r3, #4]
                pdata16bits++;
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	3302      	adds	r3, #2
 800b0c6:	61bb      	str	r3, [r7, #24]
 800b0c8:	e007      	b.n	800b0da <HAL_UART_Transmit+0xc6>
            } else {
                huart->Instance->DR = (uint8_t) (*pdata8bits & 0xFFU);
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	781a      	ldrb	r2, [r3, #0]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	605a      	str	r2, [r3, #4]
                pdata8bits++;
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	61fb      	str	r3, [r7, #28]
            }
            huart->TxXferCount--;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	84da      	strh	r2, [r3, #38]	@ 0x26
        while (huart->TxXferCount > 0U) {
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1cb      	bne.n	800b08a <HAL_UART_Transmit+0x76>
        }

        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK) {
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	9300      	str	r3, [sp, #0]
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	2140      	movs	r1, #64	@ 0x40
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f000 f814 	bl	800b12a <UART_WaitOnFlagUntilTimeout>
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d005      	beq.n	800b114 <HAL_UART_Transmit+0x100>
            huart->gState = HAL_UART_STATE_READY;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2220      	movs	r2, #32
 800b10c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            return HAL_TIMEOUT;
 800b110:	2303      	movs	r3, #3
 800b112:	e006      	b.n	800b122 <HAL_UART_Transmit+0x10e>
        }

        /* At end of Tx process, restore huart->gState to Ready */
        huart->gState = HAL_UART_STATE_READY;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2220      	movs	r2, #32
 800b118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_OK;
 800b11c:	2300      	movs	r3, #0
 800b11e:	e000      	b.n	800b122 <HAL_UART_Transmit+0x10e>
    } else {
        return HAL_BUSY;
 800b120:	2302      	movs	r3, #2
    }
}
 800b122:	4618      	mov	r0, r3
 800b124:	3720      	adds	r7, #32
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <UART_WaitOnFlagUntilTimeout>:
 * @param  Status The actual Flag status (SET or RESET).
 * @param  Tickstart Tick start value
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b086      	sub	sp, #24
 800b12e:	af00      	add	r7, sp, #0
 800b130:	60f8      	str	r0, [r7, #12]
 800b132:	60b9      	str	r1, [r7, #8]
 800b134:	603b      	str	r3, [r7, #0]
 800b136:	4613      	mov	r3, r2
 800b138:	71fb      	strb	r3, [r7, #7]
    /* Wait until flag is set */
    while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 800b13a:	e03b      	b.n	800b1b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 800b13c:	6a3b      	ldr	r3, [r7, #32]
 800b13e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b142:	d037      	beq.n	800b1b4 <UART_WaitOnFlagUntilTimeout+0x8a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 800b144:	f7fd fd72 	bl	8008c2c <HAL_GetTick>
 800b148:	4602      	mov	r2, r0
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	6a3a      	ldr	r2, [r7, #32]
 800b150:	429a      	cmp	r2, r3
 800b152:	d302      	bcc.n	800b15a <UART_WaitOnFlagUntilTimeout+0x30>
 800b154:	6a3b      	ldr	r3, [r7, #32]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d101      	bne.n	800b15e <UART_WaitOnFlagUntilTimeout+0x34>

                return HAL_TIMEOUT;
 800b15a:	2303      	movs	r3, #3
 800b15c:	e03a      	b.n	800b1d4 <UART_WaitOnFlagUntilTimeout+0xaa>
            }

            if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC)) {
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	f003 0304 	and.w	r3, r3, #4
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d023      	beq.n	800b1b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2b80      	cmp	r3, #128	@ 0x80
 800b170:	d020      	beq.n	800b1b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	2b40      	cmp	r3, #64	@ 0x40
 800b176:	d01d      	beq.n	800b1b4 <UART_WaitOnFlagUntilTimeout+0x8a>
                if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET) {
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 0308 	and.w	r3, r3, #8
 800b182:	2b08      	cmp	r3, #8
 800b184:	d116      	bne.n	800b1b4 <UART_WaitOnFlagUntilTimeout+0x8a>
                    /* Clear Overrun Error flag*/
                    __HAL_UART_CLEAR_OREFLAG(huart);
 800b186:	2300      	movs	r3, #0
 800b188:	617b      	str	r3, [r7, #20]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	617b      	str	r3, [r7, #20]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	617b      	str	r3, [r7, #20]
 800b19a:	697b      	ldr	r3, [r7, #20]

                    /* Blocking error : transfer is aborted
                     Set the UART state ready to be able to start again the process,
                     Disable Rx Interrupts if ongoing */
                    UART_EndRxTransfer(huart);
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f000 f81d 	bl	800b1dc <UART_EndRxTransfer>

                    huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2208      	movs	r2, #8
 800b1a6:	645a      	str	r2, [r3, #68]	@ 0x44

                    /* Process Unlocked */
                    __HAL_UNLOCK(huart);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

                    return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e00f      	b.n	800b1d4 <UART_WaitOnFlagUntilTimeout+0xaa>
    while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	4013      	ands	r3, r2
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	bf0c      	ite	eq
 800b1c4:	2301      	moveq	r3, #1
 800b1c6:	2300      	movne	r3, #0
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	79fb      	ldrb	r3, [r7, #7]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d0b4      	beq.n	800b13c <UART_WaitOnFlagUntilTimeout+0x12>
                }
            }
        }
    }
    return HAL_OK;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3718      	adds	r7, #24
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <UART_EndRxTransfer>:
/**
 * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
 800b1dc:	b480      	push	{r7}
 800b1de:	b095      	sub	sp, #84	@ 0x54
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	330c      	adds	r3, #12
 800b1ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ee:	e853 3f00 	ldrex	r3, [r3]
 800b1f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	330c      	adds	r3, #12
 800b202:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b204:	643a      	str	r2, [r7, #64]	@ 0x40
 800b206:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b208:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b20a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b20c:	e841 2300 	strex	r3, r2, [r1]
 800b210:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1e5      	bne.n	800b1e4 <UART_EndRxTransfer+0x8>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	3314      	adds	r3, #20
 800b21e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b220:	6a3b      	ldr	r3, [r7, #32]
 800b222:	e853 3f00 	ldrex	r3, [r3]
 800b226:	61fb      	str	r3, [r7, #28]
   return(result);
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	f023 0301 	bic.w	r3, r3, #1
 800b22e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	3314      	adds	r3, #20
 800b236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b238:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b23a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b23e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b240:	e841 2300 	strex	r3, r2, [r1]
 800b244:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1e5      	bne.n	800b218 <UART_EndRxTransfer+0x3c>

    /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b250:	2b01      	cmp	r3, #1
 800b252:	d119      	bne.n	800b288 <UART_EndRxTransfer+0xac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	330c      	adds	r3, #12
 800b25a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	e853 3f00 	ldrex	r3, [r3]
 800b262:	60bb      	str	r3, [r7, #8]
   return(result);
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	f023 0310 	bic.w	r3, r3, #16
 800b26a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	330c      	adds	r3, #12
 800b272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b274:	61ba      	str	r2, [r7, #24]
 800b276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b278:	6979      	ldr	r1, [r7, #20]
 800b27a:	69ba      	ldr	r2, [r7, #24]
 800b27c:	e841 2300 	strex	r3, r2, [r1]
 800b280:	613b      	str	r3, [r7, #16]
   return(result);
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1e5      	bne.n	800b254 <UART_EndRxTransfer+0x78>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2220      	movs	r2, #32
 800b28c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b296:	bf00      	nop
 800b298:	3754      	adds	r7, #84	@ 0x54
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
	...

0800b2a4 <UART_SetConfig>:
 * @brief  Configures the UART peripheral.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef *huart) {
 800b2a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2a8:	b0c0      	sub	sp, #256	@ 0x100
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    assert_param(IS_UART_MODE(huart->Init.Mode));

    /*-------------------------- USART CR2 Configuration -----------------------*/
    /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	691b      	ldr	r3, [r3, #16]
 800b2b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2c0:	68d9      	ldr	r1, [r3, #12]
 800b2c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	ea40 0301 	orr.w	r3, r0, r1
 800b2cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

    tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b2ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2d2:	689a      	ldr	r2, [r3, #8]
 800b2d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	431a      	orrs	r2, r3
 800b2dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2e8:	69db      	ldr	r3, [r3, #28]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    MODIFY_REG(huart->Instance->CR1, (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), tmpreg);
 800b2f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b2fc:	f021 010c 	bic.w	r1, r1, #12
 800b300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b30a:	430b      	orrs	r3, r1
 800b30c:	60d3      	str	r3, [r2, #12]

    /*-------------------------- USART CR3 Configuration -----------------------*/
    /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
    MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b30e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	695b      	ldr	r3, [r3, #20]
 800b316:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b31a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b31e:	6999      	ldr	r1, [r3, #24]
 800b320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	ea40 0301 	orr.w	r3, r0, r1
 800b32a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 800b32c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	4b8f      	ldr	r3, [pc, #572]	@ (800b570 <UART_SetConfig+0x2cc>)
 800b334:	429a      	cmp	r2, r3
 800b336:	d005      	beq.n	800b344 <UART_SetConfig+0xa0>
 800b338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	4b8d      	ldr	r3, [pc, #564]	@ (800b574 <UART_SetConfig+0x2d0>)
 800b340:	429a      	cmp	r2, r3
 800b342:	d104      	bne.n	800b34e <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b344:	f7ff fe02 	bl	800af4c <HAL_RCC_GetPCLK2Freq>
 800b348:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b34c:	e003      	b.n	800b356 <UART_SetConfig+0xb2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else {
        pclk = HAL_RCC_GetPCLK1Freq();
 800b34e:	f7ff fde9 	bl	800af24 <HAL_RCC_GetPCLK1Freq>
 800b352:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
    /*-------------------------- USART BRR Configuration ---------------------*/
    if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 800b356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b35a:	69db      	ldr	r3, [r3, #28]
 800b35c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b360:	f040 810c 	bne.w	800b57c <UART_SetConfig+0x2d8>
        huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b368:	2200      	movs	r2, #0
 800b36a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b36e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b372:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b376:	4622      	mov	r2, r4
 800b378:	462b      	mov	r3, r5
 800b37a:	1891      	adds	r1, r2, r2
 800b37c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b37e:	415b      	adcs	r3, r3
 800b380:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b382:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b386:	4621      	mov	r1, r4
 800b388:	eb12 0801 	adds.w	r8, r2, r1
 800b38c:	4629      	mov	r1, r5
 800b38e:	eb43 0901 	adc.w	r9, r3, r1
 800b392:	f04f 0200 	mov.w	r2, #0
 800b396:	f04f 0300 	mov.w	r3, #0
 800b39a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b39e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b3a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b3a6:	4690      	mov	r8, r2
 800b3a8:	4699      	mov	r9, r3
 800b3aa:	4623      	mov	r3, r4
 800b3ac:	eb18 0303 	adds.w	r3, r8, r3
 800b3b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b3b4:	462b      	mov	r3, r5
 800b3b6:	eb49 0303 	adc.w	r3, r9, r3
 800b3ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b3be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b3ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b3ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	18db      	adds	r3, r3, r3
 800b3d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b3d8:	4613      	mov	r3, r2
 800b3da:	eb42 0303 	adc.w	r3, r2, r3
 800b3de:	657b      	str	r3, [r7, #84]	@ 0x54
 800b3e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b3e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b3e8:	f7fc ff4a 	bl	8008280 <__aeabi_uldivmod>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	4b61      	ldr	r3, [pc, #388]	@ (800b578 <UART_SetConfig+0x2d4>)
 800b3f2:	fba3 2302 	umull	r2, r3, r3, r2
 800b3f6:	095b      	lsrs	r3, r3, #5
 800b3f8:	011c      	lsls	r4, r3, #4
 800b3fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b3fe:	2200      	movs	r2, #0
 800b400:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b404:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b408:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b40c:	4642      	mov	r2, r8
 800b40e:	464b      	mov	r3, r9
 800b410:	1891      	adds	r1, r2, r2
 800b412:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b414:	415b      	adcs	r3, r3
 800b416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b418:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b41c:	4641      	mov	r1, r8
 800b41e:	eb12 0a01 	adds.w	sl, r2, r1
 800b422:	4649      	mov	r1, r9
 800b424:	eb43 0b01 	adc.w	fp, r3, r1
 800b428:	f04f 0200 	mov.w	r2, #0
 800b42c:	f04f 0300 	mov.w	r3, #0
 800b430:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b434:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b438:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b43c:	4692      	mov	sl, r2
 800b43e:	469b      	mov	fp, r3
 800b440:	4643      	mov	r3, r8
 800b442:	eb1a 0303 	adds.w	r3, sl, r3
 800b446:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b44a:	464b      	mov	r3, r9
 800b44c:	eb4b 0303 	adc.w	r3, fp, r3
 800b450:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b460:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b464:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b468:	460b      	mov	r3, r1
 800b46a:	18db      	adds	r3, r3, r3
 800b46c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b46e:	4613      	mov	r3, r2
 800b470:	eb42 0303 	adc.w	r3, r2, r3
 800b474:	647b      	str	r3, [r7, #68]	@ 0x44
 800b476:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b47a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b47e:	f7fc feff 	bl	8008280 <__aeabi_uldivmod>
 800b482:	4602      	mov	r2, r0
 800b484:	460b      	mov	r3, r1
 800b486:	4611      	mov	r1, r2
 800b488:	4b3b      	ldr	r3, [pc, #236]	@ (800b578 <UART_SetConfig+0x2d4>)
 800b48a:	fba3 2301 	umull	r2, r3, r3, r1
 800b48e:	095b      	lsrs	r3, r3, #5
 800b490:	2264      	movs	r2, #100	@ 0x64
 800b492:	fb02 f303 	mul.w	r3, r2, r3
 800b496:	1acb      	subs	r3, r1, r3
 800b498:	00db      	lsls	r3, r3, #3
 800b49a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b49e:	4b36      	ldr	r3, [pc, #216]	@ (800b578 <UART_SetConfig+0x2d4>)
 800b4a0:	fba3 2302 	umull	r2, r3, r3, r2
 800b4a4:	095b      	lsrs	r3, r3, #5
 800b4a6:	005b      	lsls	r3, r3, #1
 800b4a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b4ac:	441c      	add	r4, r3
 800b4ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b4b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b4bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b4c0:	4642      	mov	r2, r8
 800b4c2:	464b      	mov	r3, r9
 800b4c4:	1891      	adds	r1, r2, r2
 800b4c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b4c8:	415b      	adcs	r3, r3
 800b4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b4d0:	4641      	mov	r1, r8
 800b4d2:	1851      	adds	r1, r2, r1
 800b4d4:	6339      	str	r1, [r7, #48]	@ 0x30
 800b4d6:	4649      	mov	r1, r9
 800b4d8:	414b      	adcs	r3, r1
 800b4da:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4dc:	f04f 0200 	mov.w	r2, #0
 800b4e0:	f04f 0300 	mov.w	r3, #0
 800b4e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b4e8:	4659      	mov	r1, fp
 800b4ea:	00cb      	lsls	r3, r1, #3
 800b4ec:	4651      	mov	r1, sl
 800b4ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4f2:	4651      	mov	r1, sl
 800b4f4:	00ca      	lsls	r2, r1, #3
 800b4f6:	4610      	mov	r0, r2
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	4642      	mov	r2, r8
 800b4fe:	189b      	adds	r3, r3, r2
 800b500:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b504:	464b      	mov	r3, r9
 800b506:	460a      	mov	r2, r1
 800b508:	eb42 0303 	adc.w	r3, r2, r3
 800b50c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b51c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b520:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b524:	460b      	mov	r3, r1
 800b526:	18db      	adds	r3, r3, r3
 800b528:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b52a:	4613      	mov	r3, r2
 800b52c:	eb42 0303 	adc.w	r3, r2, r3
 800b530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b532:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b536:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b53a:	f7fc fea1 	bl	8008280 <__aeabi_uldivmod>
 800b53e:	4602      	mov	r2, r0
 800b540:	460b      	mov	r3, r1
 800b542:	4b0d      	ldr	r3, [pc, #52]	@ (800b578 <UART_SetConfig+0x2d4>)
 800b544:	fba3 1302 	umull	r1, r3, r3, r2
 800b548:	095b      	lsrs	r3, r3, #5
 800b54a:	2164      	movs	r1, #100	@ 0x64
 800b54c:	fb01 f303 	mul.w	r3, r1, r3
 800b550:	1ad3      	subs	r3, r2, r3
 800b552:	00db      	lsls	r3, r3, #3
 800b554:	3332      	adds	r3, #50	@ 0x32
 800b556:	4a08      	ldr	r2, [pc, #32]	@ (800b578 <UART_SetConfig+0x2d4>)
 800b558:	fba2 2303 	umull	r2, r3, r2, r3
 800b55c:	095b      	lsrs	r3, r3, #5
 800b55e:	f003 0207 	and.w	r2, r3, #7
 800b562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4422      	add	r2, r4
 800b56a:	609a      	str	r2, [r3, #8]
    } else {
        huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
}
 800b56c:	e106      	b.n	800b77c <UART_SetConfig+0x4d8>
 800b56e:	bf00      	nop
 800b570:	40011000 	.word	0x40011000
 800b574:	40011400 	.word	0x40011400
 800b578:	51eb851f 	.word	0x51eb851f
        huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b57c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b580:	2200      	movs	r2, #0
 800b582:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b586:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b58a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b58e:	4642      	mov	r2, r8
 800b590:	464b      	mov	r3, r9
 800b592:	1891      	adds	r1, r2, r2
 800b594:	6239      	str	r1, [r7, #32]
 800b596:	415b      	adcs	r3, r3
 800b598:	627b      	str	r3, [r7, #36]	@ 0x24
 800b59a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b59e:	4641      	mov	r1, r8
 800b5a0:	1854      	adds	r4, r2, r1
 800b5a2:	4649      	mov	r1, r9
 800b5a4:	eb43 0501 	adc.w	r5, r3, r1
 800b5a8:	f04f 0200 	mov.w	r2, #0
 800b5ac:	f04f 0300 	mov.w	r3, #0
 800b5b0:	00eb      	lsls	r3, r5, #3
 800b5b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b5b6:	00e2      	lsls	r2, r4, #3
 800b5b8:	4614      	mov	r4, r2
 800b5ba:	461d      	mov	r5, r3
 800b5bc:	4643      	mov	r3, r8
 800b5be:	18e3      	adds	r3, r4, r3
 800b5c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b5c4:	464b      	mov	r3, r9
 800b5c6:	eb45 0303 	adc.w	r3, r5, r3
 800b5ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b5ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b5da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b5de:	f04f 0200 	mov.w	r2, #0
 800b5e2:	f04f 0300 	mov.w	r3, #0
 800b5e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	008b      	lsls	r3, r1, #2
 800b5ee:	4621      	mov	r1, r4
 800b5f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5f4:	4621      	mov	r1, r4
 800b5f6:	008a      	lsls	r2, r1, #2
 800b5f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b5fc:	f7fc fe40 	bl	8008280 <__aeabi_uldivmod>
 800b600:	4602      	mov	r2, r0
 800b602:	460b      	mov	r3, r1
 800b604:	4b60      	ldr	r3, [pc, #384]	@ (800b788 <UART_SetConfig+0x4e4>)
 800b606:	fba3 2302 	umull	r2, r3, r3, r2
 800b60a:	095b      	lsrs	r3, r3, #5
 800b60c:	011c      	lsls	r4, r3, #4
 800b60e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b612:	2200      	movs	r2, #0
 800b614:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b618:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b61c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b620:	4642      	mov	r2, r8
 800b622:	464b      	mov	r3, r9
 800b624:	1891      	adds	r1, r2, r2
 800b626:	61b9      	str	r1, [r7, #24]
 800b628:	415b      	adcs	r3, r3
 800b62a:	61fb      	str	r3, [r7, #28]
 800b62c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b630:	4641      	mov	r1, r8
 800b632:	1851      	adds	r1, r2, r1
 800b634:	6139      	str	r1, [r7, #16]
 800b636:	4649      	mov	r1, r9
 800b638:	414b      	adcs	r3, r1
 800b63a:	617b      	str	r3, [r7, #20]
 800b63c:	f04f 0200 	mov.w	r2, #0
 800b640:	f04f 0300 	mov.w	r3, #0
 800b644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b648:	4659      	mov	r1, fp
 800b64a:	00cb      	lsls	r3, r1, #3
 800b64c:	4651      	mov	r1, sl
 800b64e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b652:	4651      	mov	r1, sl
 800b654:	00ca      	lsls	r2, r1, #3
 800b656:	4610      	mov	r0, r2
 800b658:	4619      	mov	r1, r3
 800b65a:	4603      	mov	r3, r0
 800b65c:	4642      	mov	r2, r8
 800b65e:	189b      	adds	r3, r3, r2
 800b660:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b664:	464b      	mov	r3, r9
 800b666:	460a      	mov	r2, r1
 800b668:	eb42 0303 	adc.w	r3, r2, r3
 800b66c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b67a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b67c:	f04f 0200 	mov.w	r2, #0
 800b680:	f04f 0300 	mov.w	r3, #0
 800b684:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b688:	4649      	mov	r1, r9
 800b68a:	008b      	lsls	r3, r1, #2
 800b68c:	4641      	mov	r1, r8
 800b68e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b692:	4641      	mov	r1, r8
 800b694:	008a      	lsls	r2, r1, #2
 800b696:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b69a:	f7fc fdf1 	bl	8008280 <__aeabi_uldivmod>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	4611      	mov	r1, r2
 800b6a4:	4b38      	ldr	r3, [pc, #224]	@ (800b788 <UART_SetConfig+0x4e4>)
 800b6a6:	fba3 2301 	umull	r2, r3, r3, r1
 800b6aa:	095b      	lsrs	r3, r3, #5
 800b6ac:	2264      	movs	r2, #100	@ 0x64
 800b6ae:	fb02 f303 	mul.w	r3, r2, r3
 800b6b2:	1acb      	subs	r3, r1, r3
 800b6b4:	011b      	lsls	r3, r3, #4
 800b6b6:	3332      	adds	r3, #50	@ 0x32
 800b6b8:	4a33      	ldr	r2, [pc, #204]	@ (800b788 <UART_SetConfig+0x4e4>)
 800b6ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b6be:	095b      	lsrs	r3, r3, #5
 800b6c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b6c4:	441c      	add	r4, r3
 800b6c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	673b      	str	r3, [r7, #112]	@ 0x70
 800b6ce:	677a      	str	r2, [r7, #116]	@ 0x74
 800b6d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b6d4:	4642      	mov	r2, r8
 800b6d6:	464b      	mov	r3, r9
 800b6d8:	1891      	adds	r1, r2, r2
 800b6da:	60b9      	str	r1, [r7, #8]
 800b6dc:	415b      	adcs	r3, r3
 800b6de:	60fb      	str	r3, [r7, #12]
 800b6e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6e4:	4641      	mov	r1, r8
 800b6e6:	1851      	adds	r1, r2, r1
 800b6e8:	6039      	str	r1, [r7, #0]
 800b6ea:	4649      	mov	r1, r9
 800b6ec:	414b      	adcs	r3, r1
 800b6ee:	607b      	str	r3, [r7, #4]
 800b6f0:	f04f 0200 	mov.w	r2, #0
 800b6f4:	f04f 0300 	mov.w	r3, #0
 800b6f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b6fc:	4659      	mov	r1, fp
 800b6fe:	00cb      	lsls	r3, r1, #3
 800b700:	4651      	mov	r1, sl
 800b702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b706:	4651      	mov	r1, sl
 800b708:	00ca      	lsls	r2, r1, #3
 800b70a:	4610      	mov	r0, r2
 800b70c:	4619      	mov	r1, r3
 800b70e:	4603      	mov	r3, r0
 800b710:	4642      	mov	r2, r8
 800b712:	189b      	adds	r3, r3, r2
 800b714:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b716:	464b      	mov	r3, r9
 800b718:	460a      	mov	r2, r1
 800b71a:	eb42 0303 	adc.w	r3, r2, r3
 800b71e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	663b      	str	r3, [r7, #96]	@ 0x60
 800b72a:	667a      	str	r2, [r7, #100]	@ 0x64
 800b72c:	f04f 0200 	mov.w	r2, #0
 800b730:	f04f 0300 	mov.w	r3, #0
 800b734:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b738:	4649      	mov	r1, r9
 800b73a:	008b      	lsls	r3, r1, #2
 800b73c:	4641      	mov	r1, r8
 800b73e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b742:	4641      	mov	r1, r8
 800b744:	008a      	lsls	r2, r1, #2
 800b746:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b74a:	f7fc fd99 	bl	8008280 <__aeabi_uldivmod>
 800b74e:	4602      	mov	r2, r0
 800b750:	460b      	mov	r3, r1
 800b752:	4b0d      	ldr	r3, [pc, #52]	@ (800b788 <UART_SetConfig+0x4e4>)
 800b754:	fba3 1302 	umull	r1, r3, r3, r2
 800b758:	095b      	lsrs	r3, r3, #5
 800b75a:	2164      	movs	r1, #100	@ 0x64
 800b75c:	fb01 f303 	mul.w	r3, r1, r3
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	011b      	lsls	r3, r3, #4
 800b764:	3332      	adds	r3, #50	@ 0x32
 800b766:	4a08      	ldr	r2, [pc, #32]	@ (800b788 <UART_SetConfig+0x4e4>)
 800b768:	fba2 2303 	umull	r2, r3, r2, r3
 800b76c:	095b      	lsrs	r3, r3, #5
 800b76e:	f003 020f 	and.w	r2, r3, #15
 800b772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4422      	add	r2, r4
 800b77a:	609a      	str	r2, [r3, #8]
}
 800b77c:	bf00      	nop
 800b77e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b782:	46bd      	mov	sp, r7
 800b784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b788:	51eb851f 	.word	0x51eb851f

0800b78c <USB_CoreInit>:
 * @param  USBx USB Instance
 * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg) {
 800b78c:	b084      	sub	sp, #16
 800b78e:	b580      	push	{r7, lr}
 800b790:	b084      	sub	sp, #16
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
 800b796:	f107 001c 	add.w	r0, r7, #28
 800b79a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    HAL_StatusTypeDef ret;
    if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 800b79e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d123      	bne.n	800b7ee <USB_CoreInit+0x62>
        USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Init The ULPI Interface */
        USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800b7ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	60d3      	str	r3, [r2, #12]

        /* Select vbus source */
        USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	60da      	str	r2, [r3, #12]
        if (cfg.use_external_vbus == 1U) {
 800b7ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d105      	bne.n	800b7e2 <USB_CoreInit+0x56>
            USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	60da      	str	r2, [r3, #12]
        }

        /* Reset after a PHY select */
        ret = USB_CoreReset(USBx);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f001 fae8 	bl	800cdb8 <USB_CoreReset>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	73fb      	strb	r3, [r7, #15]
 800b7ec:	e01b      	b.n	800b826 <USB_CoreInit+0x9a>
    } else /* FS interface (embedded Phy) */
    {
        /* Select FS Embedded PHY */
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	60da      	str	r2, [r3, #12]

        /* Reset after a PHY select */
        ret = USB_CoreReset(USBx);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f001 fadc 	bl	800cdb8 <USB_CoreReset>
 800b800:	4603      	mov	r3, r0
 800b802:	73fb      	strb	r3, [r7, #15]

        if (cfg.battery_charging_enable == 0U) {
 800b804:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d106      	bne.n	800b81a <USB_CoreInit+0x8e>
            /* Activate the USB Transceiver */
            USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b810:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	639a      	str	r2, [r3, #56]	@ 0x38
 800b818:	e005      	b.n	800b826 <USB_CoreInit+0x9a>
        } else {
            /* Deactivate the USB Transceiver */
            USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b81e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	639a      	str	r2, [r3, #56]	@ 0x38
        }
    }

    if (cfg.dma_enable == 1U) {
 800b826:	7fbb      	ldrb	r3, [r7, #30]
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d10b      	bne.n	800b844 <USB_CoreInit+0xb8>
        USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	f043 0206 	orr.w	r2, r3, #6
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	609a      	str	r2, [r3, #8]
        USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	f043 0220 	orr.w	r2, r3, #32
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	609a      	str	r2, [r3, #8]
    }

    return ret;
 800b844:	7bfb      	ldrb	r3, [r7, #15]
}
 800b846:	4618      	mov	r0, r3
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b850:	b004      	add	sp, #16
 800b852:	4770      	bx	lr

0800b854 <USB_SetTurnaroundTime>:
 * @brief  Set the USB turnaround time
 * @param  USBx USB Instance
 * @param  hclk: AHB clock frequency
 * @retval USB turnaround time In PHY Clocks number
 */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx, uint32_t hclk, uint8_t speed) {
 800b854:	b480      	push	{r7}
 800b856:	b087      	sub	sp, #28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	4613      	mov	r3, r2
 800b860:	71fb      	strb	r3, [r7, #7]

    /* The USBTRD is configured according to the tables below, depending on AHB frequency
     used by application. In the low AHB frequency range it is used to stretch enough the USB response
     time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
     latency to the Data FIFO */
    if (speed == USBD_FS_SPEED) {
 800b862:	79fb      	ldrb	r3, [r7, #7]
 800b864:	2b02      	cmp	r3, #2
 800b866:	d165      	bne.n	800b934 <USB_SetTurnaroundTime+0xe0>
        if ((hclk >= 14200000U) && (hclk < 15000000U)) {
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	4a41      	ldr	r2, [pc, #260]	@ (800b970 <USB_SetTurnaroundTime+0x11c>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d906      	bls.n	800b87e <USB_SetTurnaroundTime+0x2a>
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	4a40      	ldr	r2, [pc, #256]	@ (800b974 <USB_SetTurnaroundTime+0x120>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d202      	bcs.n	800b87e <USB_SetTurnaroundTime+0x2a>
            /* hclk Clock Range between 14.2-15 MHz */
            UsbTrd = 0xFU;
 800b878:	230f      	movs	r3, #15
 800b87a:	617b      	str	r3, [r7, #20]
 800b87c:	e062      	b.n	800b944 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 15000000U) && (hclk < 16000000U)) {
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	4a3c      	ldr	r2, [pc, #240]	@ (800b974 <USB_SetTurnaroundTime+0x120>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d306      	bcc.n	800b894 <USB_SetTurnaroundTime+0x40>
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	4a3b      	ldr	r2, [pc, #236]	@ (800b978 <USB_SetTurnaroundTime+0x124>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d202      	bcs.n	800b894 <USB_SetTurnaroundTime+0x40>
            /* hclk Clock Range between 15-16 MHz */
            UsbTrd = 0xEU;
 800b88e:	230e      	movs	r3, #14
 800b890:	617b      	str	r3, [r7, #20]
 800b892:	e057      	b.n	800b944 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 16000000U) && (hclk < 17200000U)) {
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	4a38      	ldr	r2, [pc, #224]	@ (800b978 <USB_SetTurnaroundTime+0x124>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d306      	bcc.n	800b8aa <USB_SetTurnaroundTime+0x56>
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	4a37      	ldr	r2, [pc, #220]	@ (800b97c <USB_SetTurnaroundTime+0x128>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d202      	bcs.n	800b8aa <USB_SetTurnaroundTime+0x56>
            /* hclk Clock Range between 16-17.2 MHz */
            UsbTrd = 0xDU;
 800b8a4:	230d      	movs	r3, #13
 800b8a6:	617b      	str	r3, [r7, #20]
 800b8a8:	e04c      	b.n	800b944 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 17200000U) && (hclk < 18500000U)) {
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	4a33      	ldr	r2, [pc, #204]	@ (800b97c <USB_SetTurnaroundTime+0x128>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d306      	bcc.n	800b8c0 <USB_SetTurnaroundTime+0x6c>
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	4a32      	ldr	r2, [pc, #200]	@ (800b980 <USB_SetTurnaroundTime+0x12c>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d802      	bhi.n	800b8c0 <USB_SetTurnaroundTime+0x6c>
            /* hclk Clock Range between 17.2-18.5 MHz */
            UsbTrd = 0xCU;
 800b8ba:	230c      	movs	r3, #12
 800b8bc:	617b      	str	r3, [r7, #20]
 800b8be:	e041      	b.n	800b944 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 18500000U) && (hclk < 20000000U)) {
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	4a2f      	ldr	r2, [pc, #188]	@ (800b980 <USB_SetTurnaroundTime+0x12c>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d906      	bls.n	800b8d6 <USB_SetTurnaroundTime+0x82>
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	4a2e      	ldr	r2, [pc, #184]	@ (800b984 <USB_SetTurnaroundTime+0x130>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d802      	bhi.n	800b8d6 <USB_SetTurnaroundTime+0x82>
            /* hclk Clock Range between 18.5-20 MHz */
            UsbTrd = 0xBU;
 800b8d0:	230b      	movs	r3, #11
 800b8d2:	617b      	str	r3, [r7, #20]
 800b8d4:	e036      	b.n	800b944 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 20000000U) && (hclk < 21800000U)) {
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	4a2a      	ldr	r2, [pc, #168]	@ (800b984 <USB_SetTurnaroundTime+0x130>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d906      	bls.n	800b8ec <USB_SetTurnaroundTime+0x98>
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	4a29      	ldr	r2, [pc, #164]	@ (800b988 <USB_SetTurnaroundTime+0x134>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d802      	bhi.n	800b8ec <USB_SetTurnaroundTime+0x98>
            /* hclk Clock Range between 20-21.8 MHz */
            UsbTrd = 0xAU;
 800b8e6:	230a      	movs	r3, #10
 800b8e8:	617b      	str	r3, [r7, #20]
 800b8ea:	e02b      	b.n	800b944 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 21800000U) && (hclk < 24000000U)) {
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	4a26      	ldr	r2, [pc, #152]	@ (800b988 <USB_SetTurnaroundTime+0x134>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d906      	bls.n	800b902 <USB_SetTurnaroundTime+0xae>
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	4a25      	ldr	r2, [pc, #148]	@ (800b98c <USB_SetTurnaroundTime+0x138>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d202      	bcs.n	800b902 <USB_SetTurnaroundTime+0xae>
            /* hclk Clock Range between 21.8-24 MHz */
            UsbTrd = 0x9U;
 800b8fc:	2309      	movs	r3, #9
 800b8fe:	617b      	str	r3, [r7, #20]
 800b900:	e020      	b.n	800b944 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 24000000U) && (hclk < 27700000U)) {
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	4a21      	ldr	r2, [pc, #132]	@ (800b98c <USB_SetTurnaroundTime+0x138>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d306      	bcc.n	800b918 <USB_SetTurnaroundTime+0xc4>
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	4a20      	ldr	r2, [pc, #128]	@ (800b990 <USB_SetTurnaroundTime+0x13c>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d802      	bhi.n	800b918 <USB_SetTurnaroundTime+0xc4>
            /* hclk Clock Range between 24-27.7 MHz */
            UsbTrd = 0x8U;
 800b912:	2308      	movs	r3, #8
 800b914:	617b      	str	r3, [r7, #20]
 800b916:	e015      	b.n	800b944 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 27700000U) && (hclk < 32000000U)) {
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	4a1d      	ldr	r2, [pc, #116]	@ (800b990 <USB_SetTurnaroundTime+0x13c>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d906      	bls.n	800b92e <USB_SetTurnaroundTime+0xda>
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	4a1c      	ldr	r2, [pc, #112]	@ (800b994 <USB_SetTurnaroundTime+0x140>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d202      	bcs.n	800b92e <USB_SetTurnaroundTime+0xda>
            /* hclk Clock Range between 27.7-32 MHz */
            UsbTrd = 0x7U;
 800b928:	2307      	movs	r3, #7
 800b92a:	617b      	str	r3, [r7, #20]
 800b92c:	e00a      	b.n	800b944 <USB_SetTurnaroundTime+0xf0>
        } else /* if(hclk >= 32000000) */
        {
            /* hclk Clock Range between 32-200 MHz */
            UsbTrd = 0x6U;
 800b92e:	2306      	movs	r3, #6
 800b930:	617b      	str	r3, [r7, #20]
 800b932:	e007      	b.n	800b944 <USB_SetTurnaroundTime+0xf0>
        }
    } else if (speed == USBD_HS_SPEED) {
 800b934:	79fb      	ldrb	r3, [r7, #7]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d102      	bne.n	800b940 <USB_SetTurnaroundTime+0xec>
        UsbTrd = USBD_HS_TRDT_VALUE;
 800b93a:	2309      	movs	r3, #9
 800b93c:	617b      	str	r3, [r7, #20]
 800b93e:	e001      	b.n	800b944 <USB_SetTurnaroundTime+0xf0>
    } else {
        UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b940:	2309      	movs	r3, #9
 800b942:	617b      	str	r3, [r7, #20]
    }

    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	60da      	str	r2, [r3, #12]
    USBx->GUSBCFG |= (uint32_t) ((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	68da      	ldr	r2, [r3, #12]
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	029b      	lsls	r3, r3, #10
 800b958:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b95c:	431a      	orrs	r2, r3
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	371c      	adds	r7, #28
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr
 800b970:	00d8acbf 	.word	0x00d8acbf
 800b974:	00e4e1c0 	.word	0x00e4e1c0
 800b978:	00f42400 	.word	0x00f42400
 800b97c:	01067380 	.word	0x01067380
 800b980:	011a499f 	.word	0x011a499f
 800b984:	01312cff 	.word	0x01312cff
 800b988:	014ca43f 	.word	0x014ca43f
 800b98c:	016e3600 	.word	0x016e3600
 800b990:	01a6ab1f 	.word	0x01a6ab1f
 800b994:	01e84800 	.word	0x01e84800

0800b998 <USB_EnableGlobalInt>:
 * @brief  USB_EnableGlobalInt
 *         Enables the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	f043 0201 	orr.w	r2, r3, #1
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	370c      	adds	r7, #12
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr

0800b9ba <USB_DisableGlobalInt>:
 * @brief  USB_DisableGlobalInt
 *         Disable the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 800b9ba:	b480      	push	{r7}
 800b9bc:	b083      	sub	sp, #12
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
    USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	689b      	ldr	r3, [r3, #8]
 800b9c6:	f023 0201 	bic.w	r2, r3, #1
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <USB_SetCurrentMode>:
 *          This parameter can be one of these values:
 *            @arg USB_DEVICE_MODE Peripheral mode
 *            @arg USB_HOST_MODE Host mode
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode) {
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	70fb      	strb	r3, [r7, #3]
    uint32_t ms = 0U;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	60fb      	str	r3, [r7, #12]

    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	60da      	str	r2, [r3, #12]

    if (mode == USB_HOST_MODE) {
 800b9f8:	78fb      	ldrb	r3, [r7, #3]
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d115      	bne.n	800ba2a <USB_SetCurrentMode+0x4e>
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	60da      	str	r2, [r3, #12]

        do {
            HAL_Delay(10U);
 800ba0a:	200a      	movs	r0, #10
 800ba0c:	f7fd f91a 	bl	8008c44 <HAL_Delay>
            ms += 10U;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	330a      	adds	r3, #10
 800ba14:	60fb      	str	r3, [r7, #12]
        } while ((USB_GetMode(USBx) != (uint32_t) USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f001 f93f 	bl	800cc9a <USB_GetMode>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d01e      	beq.n	800ba60 <USB_SetCurrentMode+0x84>
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2bc7      	cmp	r3, #199	@ 0xc7
 800ba26:	d9f0      	bls.n	800ba0a <USB_SetCurrentMode+0x2e>
 800ba28:	e01a      	b.n	800ba60 <USB_SetCurrentMode+0x84>
    } else if (mode == USB_DEVICE_MODE) {
 800ba2a:	78fb      	ldrb	r3, [r7, #3]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d115      	bne.n	800ba5c <USB_SetCurrentMode+0x80>
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	60da      	str	r2, [r3, #12]

        do {
            HAL_Delay(10U);
 800ba3c:	200a      	movs	r0, #10
 800ba3e:	f7fd f901 	bl	8008c44 <HAL_Delay>
            ms += 10U;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	330a      	adds	r3, #10
 800ba46:	60fb      	str	r3, [r7, #12]
        } while ((USB_GetMode(USBx) != (uint32_t) USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f001 f926 	bl	800cc9a <USB_GetMode>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d005      	beq.n	800ba60 <USB_SetCurrentMode+0x84>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2bc7      	cmp	r3, #199	@ 0xc7
 800ba58:	d9f0      	bls.n	800ba3c <USB_SetCurrentMode+0x60>
 800ba5a:	e001      	b.n	800ba60 <USB_SetCurrentMode+0x84>
    } else {
        return HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e005      	b.n	800ba6c <USB_SetCurrentMode+0x90>
    }

    if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS) {
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2bc8      	cmp	r3, #200	@ 0xc8
 800ba64:	d101      	bne.n	800ba6a <USB_SetCurrentMode+0x8e>
        return HAL_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	e000      	b.n	800ba6c <USB_SetCurrentMode+0x90>
    }

    return HAL_OK;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3710      	adds	r7, #16
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <USB_DevInit>:
 * @param  USBx  Selected device
 * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg) {
 800ba74:	b084      	sub	sp, #16
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b086      	sub	sp, #24
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ba82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    HAL_StatusTypeDef ret = HAL_OK;
 800ba86:	2300      	movs	r3, #0
 800ba88:	75fb      	strb	r3, [r7, #23]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	60fb      	str	r3, [r7, #12]
    uint32_t i;

    for (i = 0U; i < 15U; i++) {
 800ba8e:	2300      	movs	r3, #0
 800ba90:	613b      	str	r3, [r7, #16]
 800ba92:	e009      	b.n	800baa8 <USB_DevInit+0x34>
        USBx->DIEPTXF[i] = 0U;
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	3340      	adds	r3, #64	@ 0x40
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	2200      	movs	r2, #0
 800baa0:	605a      	str	r2, [r3, #4]
    for (i = 0U; i < 15U; i++) {
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	3301      	adds	r3, #1
 800baa6:	613b      	str	r3, [r7, #16]
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	2b0e      	cmp	r3, #14
 800baac:	d9f2      	bls.n	800ba94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
    /* VBUS Sensing setup */
    if (cfg.vbus_sensing_enable == 0U) {
 800baae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d11c      	bne.n	800baf0 <USB_DevInit+0x7c>
        /*
         * Disable HW VBUS sensing. VBUS is internally considered to be always
         * at VBUS-Valid level (5V).
         */
        USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bac4:	f043 0302 	orr.w	r3, r3, #2
 800bac8:	6053      	str	r3, [r2, #4]
        USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bace:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	639a      	str	r2, [r3, #56]	@ 0x38
        USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bada:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	639a      	str	r2, [r3, #56]	@ 0x38
        USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bae6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	639a      	str	r2, [r3, #56]	@ 0x38
 800baee:	e00b      	b.n	800bb08 <USB_DevInit+0x94>
    } else {
        /* Enable HW VBUS sensing */
        USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baf4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	639a      	str	r2, [r3, #56]	@ 0x38
        USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb00:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

    /* Restart the Phy Clock */
    USBx_PCGCCTL = 0U;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bb0e:	461a      	mov	r2, r3
 800bb10:	2300      	movs	r3, #0
 800bb12:	6013      	str	r3, [r2, #0]

    if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 800bb14:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d10d      	bne.n	800bb38 <USB_DevInit+0xc4>
        if (cfg.speed == USBD_HS_SPEED) {
 800bb1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d104      	bne.n	800bb2e <USB_DevInit+0xba>
            /* Set Core speed to High speed mode */
            (void) USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bb24:	2100      	movs	r1, #0
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 f968 	bl	800bdfc <USB_SetDevSpeed>
 800bb2c:	e008      	b.n	800bb40 <USB_DevInit+0xcc>
        } else {
            /* Set Core speed to Full speed mode */
            (void) USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bb2e:	2101      	movs	r1, #1
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 f963 	bl	800bdfc <USB_SetDevSpeed>
 800bb36:	e003      	b.n	800bb40 <USB_DevInit+0xcc>
        }
    } else {
        /* Set Core speed to Full speed mode */
        (void) USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bb38:	2103      	movs	r1, #3
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 f95e 	bl	800bdfc <USB_SetDevSpeed>
    }

    /* Flush the FIFOs */
    if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bb40:	2110      	movs	r1, #16
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f8fa 	bl	800bd3c <USB_FlushTxFifo>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d001      	beq.n	800bb52 <USB_DevInit+0xde>
    {
        ret = HAL_ERROR;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	75fb      	strb	r3, [r7, #23]
    }

    if (USB_FlushRxFifo(USBx) != HAL_OK) {
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f924 	bl	800bda0 <USB_FlushRxFifo>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <USB_DevInit+0xee>
        ret = HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	75fb      	strb	r3, [r7, #23]
    }

    /* Clear all pending Device Interrupts */
    USBx_DEVICE->DIEPMSK = 0U;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb68:	461a      	mov	r2, r3
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	6113      	str	r3, [r2, #16]
    USBx_DEVICE->DOEPMSK = 0U;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb74:	461a      	mov	r2, r3
 800bb76:	2300      	movs	r3, #0
 800bb78:	6153      	str	r3, [r2, #20]
    USBx_DEVICE->DAINTMSK = 0U;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb80:	461a      	mov	r2, r3
 800bb82:	2300      	movs	r3, #0
 800bb84:	61d3      	str	r3, [r2, #28]

    for (i = 0U; i < cfg.dev_endpoints; i++) {
 800bb86:	2300      	movs	r3, #0
 800bb88:	613b      	str	r3, [r7, #16]
 800bb8a:	e043      	b.n	800bc14 <USB_DevInit+0x1a0>
        if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	015a      	lsls	r2, r3, #5
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	4413      	add	r3, r2
 800bb94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bba2:	d118      	bne.n	800bbd6 <USB_DevInit+0x162>
            if (i == 0U) {
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10a      	bne.n	800bbc0 <USB_DevInit+0x14c>
                USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	015a      	lsls	r2, r3, #5
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bbbc:	6013      	str	r3, [r2, #0]
 800bbbe:	e013      	b.n	800bbe8 <USB_DevInit+0x174>
            } else {
                USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	015a      	lsls	r2, r3, #5
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	4413      	add	r3, r2
 800bbc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbcc:	461a      	mov	r2, r3
 800bbce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bbd2:	6013      	str	r3, [r2, #0]
 800bbd4:	e008      	b.n	800bbe8 <USB_DevInit+0x174>
            }
        } else {
            USBx_INEP(i)->DIEPCTL = 0U;
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	015a      	lsls	r2, r3, #5
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	4413      	add	r3, r2
 800bbde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	6013      	str	r3, [r2, #0]
        }

        USBx_INEP(i)->DIEPTSIZ = 0U;
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	015a      	lsls	r2, r3, #5
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	4413      	add	r3, r2
 800bbf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	6113      	str	r3, [r2, #16]
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	015a      	lsls	r2, r3, #5
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	4413      	add	r3, r2
 800bc02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc06:	461a      	mov	r2, r3
 800bc08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bc0c:	6093      	str	r3, [r2, #8]
    for (i = 0U; i < cfg.dev_endpoints; i++) {
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	3301      	adds	r3, #1
 800bc12:	613b      	str	r3, [r7, #16]
 800bc14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bc18:	461a      	mov	r2, r3
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d3b5      	bcc.n	800bb8c <USB_DevInit+0x118>
    }

    for (i = 0U; i < cfg.dev_endpoints; i++) {
 800bc20:	2300      	movs	r3, #0
 800bc22:	613b      	str	r3, [r7, #16]
 800bc24:	e043      	b.n	800bcae <USB_DevInit+0x23a>
        if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	015a      	lsls	r2, r3, #5
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc3c:	d118      	bne.n	800bc70 <USB_DevInit+0x1fc>
            if (i == 0U) {
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d10a      	bne.n	800bc5a <USB_DevInit+0x1e6>
                USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	015a      	lsls	r2, r3, #5
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc50:	461a      	mov	r2, r3
 800bc52:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bc56:	6013      	str	r3, [r2, #0]
 800bc58:	e013      	b.n	800bc82 <USB_DevInit+0x20e>
            } else {
                USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	015a      	lsls	r2, r3, #5
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	4413      	add	r3, r2
 800bc62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc66:	461a      	mov	r2, r3
 800bc68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bc6c:	6013      	str	r3, [r2, #0]
 800bc6e:	e008      	b.n	800bc82 <USB_DevInit+0x20e>
            }
        } else {
            USBx_OUTEP(i)->DOEPCTL = 0U;
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	015a      	lsls	r2, r3, #5
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	4413      	add	r3, r2
 800bc78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	2300      	movs	r3, #0
 800bc80:	6013      	str	r3, [r2, #0]
        }

        USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	015a      	lsls	r2, r3, #5
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	4413      	add	r3, r2
 800bc8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc8e:	461a      	mov	r2, r3
 800bc90:	2300      	movs	r3, #0
 800bc92:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	015a      	lsls	r2, r3, #5
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bca0:	461a      	mov	r2, r3
 800bca2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bca6:	6093      	str	r3, [r2, #8]
    for (i = 0U; i < cfg.dev_endpoints; i++) {
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	613b      	str	r3, [r7, #16]
 800bcae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d3b5      	bcc.n	800bc26 <USB_DevInit+0x1b2>
    }

    USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcc0:	691b      	ldr	r3, [r3, #16]
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bcc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bccc:	6113      	str	r3, [r2, #16]

    /* Disable all interrupts. */
    USBx->GINTMSK = 0U;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	619a      	str	r2, [r3, #24]

    /* Clear any pending interrupts */
    USBx->GINTSTS = 0xBFFFFFFFU;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bcda:	615a      	str	r2, [r3, #20]

    /* Enable the common interrupts */
    if (cfg.dma_enable == 0U) {
 800bcdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d105      	bne.n	800bcf0 <USB_DevInit+0x27c>
        USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	699b      	ldr	r3, [r3, #24]
 800bce8:	f043 0210 	orr.w	r2, r3, #16
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	619a      	str	r2, [r3, #24]
    }

    /* Enable interrupts matching to the Device mode ONLY */
    USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	699a      	ldr	r2, [r3, #24]
 800bcf4:	4b10      	ldr	r3, [pc, #64]	@ (800bd38 <USB_DevInit+0x2c4>)
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	6193      	str	r3, [r2, #24]
    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
    USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IISOIXFRM |
    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

    if (cfg.Sof_enable != 0U) {
 800bcfc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d005      	beq.n	800bd10 <USB_DevInit+0x29c>
        USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	699b      	ldr	r3, [r3, #24]
 800bd08:	f043 0208 	orr.w	r2, r3, #8
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	619a      	str	r2, [r3, #24]
    }

    if (cfg.vbus_sensing_enable == 1U) {
 800bd10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d107      	bne.n	800bd28 <USB_DevInit+0x2b4>
        USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	699b      	ldr	r3, [r3, #24]
 800bd1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bd20:	f043 0304 	orr.w	r3, r3, #4
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	6193      	str	r3, [r2, #24]
    }

    return ret;
 800bd28:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3718      	adds	r7, #24
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd34:	b004      	add	sp, #16
 800bd36:	4770      	bx	lr
 800bd38:	803c3800 	.word	0x803c3800

0800bd3c <USB_FlushTxFifo>:
 * @param  num  FIFO number
 *         This parameter can be a value from 1 to 15
 15 means Flush all Tx FIFOs
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num) {
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
    __IO uint32_t count = 0U;
 800bd46:	2300      	movs	r3, #0
 800bd48:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	60fb      	str	r3, [r7, #12]

        if (count > HAL_USB_TIMEOUT) {
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd56:	d901      	bls.n	800bd5c <USB_FlushTxFifo+0x20>
            return HAL_TIMEOUT;
 800bd58:	2303      	movs	r3, #3
 800bd5a:	e01b      	b.n	800bd94 <USB_FlushTxFifo+0x58>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	daf2      	bge.n	800bd4a <USB_FlushTxFifo+0xe>

    /* Flush TX Fifo */
    count = 0U;
 800bd64:	2300      	movs	r3, #0
 800bd66:	60fb      	str	r3, [r7, #12]
    USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	019b      	lsls	r3, r3, #6
 800bd6c:	f043 0220 	orr.w	r2, r3, #32
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	611a      	str	r2, [r3, #16]

    do {
        count++;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	3301      	adds	r3, #1
 800bd78:	60fb      	str	r3, [r7, #12]

        if (count > HAL_USB_TIMEOUT) {
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd80:	d901      	bls.n	800bd86 <USB_FlushTxFifo+0x4a>
            return HAL_TIMEOUT;
 800bd82:	2303      	movs	r3, #3
 800bd84:	e006      	b.n	800bd94 <USB_FlushTxFifo+0x58>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	f003 0320 	and.w	r3, r3, #32
 800bd8e:	2b20      	cmp	r3, #32
 800bd90:	d0f0      	beq.n	800bd74 <USB_FlushTxFifo+0x38>

    return HAL_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <USB_FlushRxFifo>:
/**
 * @brief  USB_FlushRxFifo  Flush Rx FIFO
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx) {
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
    __IO uint32_t count = 0U;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	3301      	adds	r3, #1
 800bdb0:	60fb      	str	r3, [r7, #12]

        if (count > HAL_USB_TIMEOUT) {
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bdb8:	d901      	bls.n	800bdbe <USB_FlushRxFifo+0x1e>
            return HAL_TIMEOUT;
 800bdba:	2303      	movs	r3, #3
 800bdbc:	e018      	b.n	800bdf0 <USB_FlushRxFifo+0x50>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	daf2      	bge.n	800bdac <USB_FlushRxFifo+0xc>

    /* Flush RX Fifo */
    count = 0U;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	60fb      	str	r3, [r7, #12]
    USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2210      	movs	r2, #16
 800bdce:	611a      	str	r2, [r3, #16]

    do {
        count++;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	60fb      	str	r3, [r7, #12]

        if (count > HAL_USB_TIMEOUT) {
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bddc:	d901      	bls.n	800bde2 <USB_FlushRxFifo+0x42>
            return HAL_TIMEOUT;
 800bdde:	2303      	movs	r3, #3
 800bde0:	e006      	b.n	800bdf0 <USB_FlushRxFifo+0x50>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	691b      	ldr	r3, [r3, #16]
 800bde6:	f003 0310 	and.w	r3, r3, #16
 800bdea:	2b10      	cmp	r3, #16
 800bdec:	d0f0      	beq.n	800bdd0 <USB_FlushRxFifo+0x30>

    return HAL_OK;
 800bdee:	2300      	movs	r3, #0
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <USB_SetDevSpeed>:
 *            @arg USB_OTG_SPEED_HIGH: High speed mode
 *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
 *            @arg USB_OTG_SPEED_FULL: Full speed mode
 * @retval  Hal status
 */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed) {
 800bdfc:	b480      	push	{r7}
 800bdfe:	b085      	sub	sp, #20
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	460b      	mov	r3, r1
 800be06:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	60fb      	str	r3, [r7, #12]

    USBx_DEVICE->DCFG |= speed;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	78fb      	ldrb	r3, [r7, #3]
 800be16:	68f9      	ldr	r1, [r7, #12]
 800be18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800be1c:	4313      	orrs	r3, r2
 800be1e:	600b      	str	r3, [r1, #0]
    return HAL_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3714      	adds	r7, #20
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr

0800be2e <USB_GetDevSpeed>:
 * @retval speed  device speed
 *          This parameter can be one of these values:
 *            @arg USBD_HS_SPEED: High speed mode
 *            @arg USBD_FS_SPEED: Full speed mode
 */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx) {
 800be2e:	b480      	push	{r7}
 800be30:	b087      	sub	sp, #28
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	613b      	str	r3, [r7, #16]
    uint8_t speed;
    uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	f003 0306 	and.w	r3, r3, #6
 800be46:	60fb      	str	r3, [r7, #12]

    if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ) {
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d102      	bne.n	800be54 <USB_GetDevSpeed+0x26>
        speed = USBD_HS_SPEED;
 800be4e:	2300      	movs	r3, #0
 800be50:	75fb      	strb	r3, [r7, #23]
 800be52:	e00a      	b.n	800be6a <USB_GetDevSpeed+0x3c>
    } else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) || (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ)) {
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2b02      	cmp	r3, #2
 800be58:	d002      	beq.n	800be60 <USB_GetDevSpeed+0x32>
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2b06      	cmp	r3, #6
 800be5e:	d102      	bne.n	800be66 <USB_GetDevSpeed+0x38>
        speed = USBD_FS_SPEED;
 800be60:	2302      	movs	r3, #2
 800be62:	75fb      	strb	r3, [r7, #23]
 800be64:	e001      	b.n	800be6a <USB_GetDevSpeed+0x3c>
    } else {
        speed = 0xFU;
 800be66:	230f      	movs	r3, #15
 800be68:	75fb      	strb	r3, [r7, #23]
    }

    return speed;
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	371c      	adds	r7, #28
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <USB_ActivateEndpoint>:
 * @brief  Activate and configure an endpoint
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep) {
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t) ep->num;
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	785b      	ldrb	r3, [r3, #1]
 800be90:	2b01      	cmp	r3, #1
 800be92:	d13a      	bne.n	800bf0a <USB_ActivateEndpoint+0x92>
        USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t) (1UL << (ep->num & EP_ADDR_MSK));
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be9a:	69da      	ldr	r2, [r3, #28]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	f003 030f 	and.w	r3, r3, #15
 800bea4:	2101      	movs	r1, #1
 800bea6:	fa01 f303 	lsl.w	r3, r1, r3
 800beaa:	b29b      	uxth	r3, r3
 800beac:	68f9      	ldr	r1, [r7, #12]
 800beae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800beb2:	4313      	orrs	r3, r2
 800beb4:	61cb      	str	r3, [r1, #28]

        if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U) {
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	015a      	lsls	r2, r3, #5
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	4413      	add	r3, r2
 800bebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d155      	bne.n	800bf78 <USB_ActivateEndpoint+0x100>
            USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) | ((uint32_t) ep->type << 18) | (epnum << 22) |
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	015a      	lsls	r2, r3, #5
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	4413      	add	r3, r2
 800bed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	791b      	ldrb	r3, [r3, #4]
 800bee6:	049b      	lsls	r3, r3, #18
 800bee8:	4319      	orrs	r1, r3
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	059b      	lsls	r3, r3, #22
 800beee:	430b      	orrs	r3, r1
 800bef0:	4313      	orrs	r3, r2
 800bef2:	68ba      	ldr	r2, [r7, #8]
 800bef4:	0151      	lsls	r1, r2, #5
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	440a      	add	r2, r1
 800befa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800befe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bf02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf06:	6013      	str	r3, [r2, #0]
 800bf08:	e036      	b.n	800bf78 <USB_ActivateEndpoint+0x100>
            USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
            USB_OTG_DIEPCTL_USBAEP;
        }
    } else {
        USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t) (1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf10:	69da      	ldr	r2, [r3, #28]
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	f003 030f 	and.w	r3, r3, #15
 800bf1a:	2101      	movs	r1, #1
 800bf1c:	fa01 f303 	lsl.w	r3, r1, r3
 800bf20:	041b      	lsls	r3, r3, #16
 800bf22:	68f9      	ldr	r1, [r7, #12]
 800bf24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	61cb      	str	r3, [r1, #28]

        if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U) {
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	015a      	lsls	r2, r3, #5
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	4413      	add	r3, r2
 800bf34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d11a      	bne.n	800bf78 <USB_ActivateEndpoint+0x100>
            USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) | ((uint32_t) ep->type << 18) |
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	015a      	lsls	r2, r3, #5
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	4413      	add	r3, r2
 800bf4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	791b      	ldrb	r3, [r3, #4]
 800bf5c:	049b      	lsls	r3, r3, #18
 800bf5e:	430b      	orrs	r3, r1
 800bf60:	4313      	orrs	r3, r2
 800bf62:	68ba      	ldr	r2, [r7, #8]
 800bf64:	0151      	lsls	r1, r2, #5
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	440a      	add	r2, r1
 800bf6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bf72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf76:	6013      	str	r3, [r2, #0]
            USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
            USB_OTG_DOEPCTL_USBAEP;
        }
    }
    return HAL_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3714      	adds	r7, #20
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr
	...

0800bf88 <USB_DeactivateEndpoint>:
 * @brief  De-activate and de-initialize an endpoint
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep) {
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t) ep->num;
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	60bb      	str	r3, [r7, #8]

    /* Read DEPCTLn register */
    if (ep->is_in == 1U) {
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	785b      	ldrb	r3, [r3, #1]
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d161      	bne.n	800c068 <USB_DeactivateEndpoint+0xe0>
        if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	015a      	lsls	r2, r3, #5
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	4413      	add	r3, r2
 800bfac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bfb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bfba:	d11f      	bne.n	800bffc <USB_DeactivateEndpoint+0x74>
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	015a      	lsls	r2, r3, #5
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	68ba      	ldr	r2, [r7, #8]
 800bfcc:	0151      	lsls	r1, r2, #5
 800bfce:	68fa      	ldr	r2, [r7, #12]
 800bfd0:	440a      	add	r2, r1
 800bfd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bfd6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bfda:	6013      	str	r3, [r2, #0]
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	015a      	lsls	r2, r3, #5
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	68ba      	ldr	r2, [r7, #8]
 800bfec:	0151      	lsls	r1, r2, #5
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	440a      	add	r2, r1
 800bff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bff6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bffa:	6013      	str	r3, [r2, #0]
        }

        USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t) (1UL << (ep->num & EP_ADDR_MSK)));
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	f003 030f 	and.w	r3, r3, #15
 800c00c:	2101      	movs	r1, #1
 800c00e:	fa01 f303 	lsl.w	r3, r1, r3
 800c012:	b29b      	uxth	r3, r3
 800c014:	43db      	mvns	r3, r3
 800c016:	68f9      	ldr	r1, [r7, #12]
 800c018:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c01c:	4013      	ands	r3, r2
 800c01e:	63cb      	str	r3, [r1, #60]	@ 0x3c
        USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t) (1UL << (ep->num & EP_ADDR_MSK)));
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c026:	69da      	ldr	r2, [r3, #28]
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	f003 030f 	and.w	r3, r3, #15
 800c030:	2101      	movs	r1, #1
 800c032:	fa01 f303 	lsl.w	r3, r1, r3
 800c036:	b29b      	uxth	r3, r3
 800c038:	43db      	mvns	r3, r3
 800c03a:	68f9      	ldr	r1, [r7, #12]
 800c03c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c040:	4013      	ands	r3, r2
 800c042:	61cb      	str	r3, [r1, #28]
        USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	015a      	lsls	r2, r3, #5
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	4413      	add	r3, r2
 800c04c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	0159      	lsls	r1, r3, #5
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	440b      	add	r3, r1
 800c05a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c05e:	4619      	mov	r1, r3
 800c060:	4b35      	ldr	r3, [pc, #212]	@ (800c138 <USB_DeactivateEndpoint+0x1b0>)
 800c062:	4013      	ands	r3, r2
 800c064:	600b      	str	r3, [r1, #0]
 800c066:	e060      	b.n	800c12a <USB_DeactivateEndpoint+0x1a2>
        USB_OTG_DIEPCTL_MPSIZ |
        USB_OTG_DIEPCTL_TXFNUM |
        USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
        USB_OTG_DIEPCTL_EPTYP);
    } else {
        if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	015a      	lsls	r2, r3, #5
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	4413      	add	r3, r2
 800c070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c07a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c07e:	d11f      	bne.n	800c0c0 <USB_DeactivateEndpoint+0x138>
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	015a      	lsls	r2, r3, #5
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	4413      	add	r3, r2
 800c088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	68ba      	ldr	r2, [r7, #8]
 800c090:	0151      	lsls	r1, r2, #5
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	440a      	add	r2, r1
 800c096:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c09a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c09e:	6013      	str	r3, [r2, #0]
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	015a      	lsls	r2, r3, #5
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	68ba      	ldr	r2, [r7, #8]
 800c0b0:	0151      	lsls	r1, r2, #5
 800c0b2:	68fa      	ldr	r2, [r7, #12]
 800c0b4:	440a      	add	r2, r1
 800c0b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c0ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c0be:	6013      	str	r3, [r2, #0]
        }

        USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t) (1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	f003 030f 	and.w	r3, r3, #15
 800c0d0:	2101      	movs	r1, #1
 800c0d2:	fa01 f303 	lsl.w	r3, r1, r3
 800c0d6:	041b      	lsls	r3, r3, #16
 800c0d8:	43db      	mvns	r3, r3
 800c0da:	68f9      	ldr	r1, [r7, #12]
 800c0dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c0e0:	4013      	ands	r3, r2
 800c0e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
        USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t) (1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0ea:	69da      	ldr	r2, [r3, #28]
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	f003 030f 	and.w	r3, r3, #15
 800c0f4:	2101      	movs	r1, #1
 800c0f6:	fa01 f303 	lsl.w	r3, r1, r3
 800c0fa:	041b      	lsls	r3, r3, #16
 800c0fc:	43db      	mvns	r3, r3
 800c0fe:	68f9      	ldr	r1, [r7, #12]
 800c100:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c104:	4013      	ands	r3, r2
 800c106:	61cb      	str	r3, [r1, #28]
        USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	015a      	lsls	r2, r3, #5
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	4413      	add	r3, r2
 800c110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	0159      	lsls	r1, r3, #5
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	440b      	add	r3, r1
 800c11e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c122:	4619      	mov	r1, r3
 800c124:	4b05      	ldr	r3, [pc, #20]	@ (800c13c <USB_DeactivateEndpoint+0x1b4>)
 800c126:	4013      	ands	r3, r2
 800c128:	600b      	str	r3, [r1, #0]
        USB_OTG_DOEPCTL_MPSIZ |
        USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
        USB_OTG_DOEPCTL_EPTYP);
    }

    return HAL_OK;
 800c12a:	2300      	movs	r3, #0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3714      	adds	r7, #20
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr
 800c138:	ec337800 	.word	0xec337800
 800c13c:	eff37800 	.word	0xeff37800

0800c140 <USB_EPStartXfer>:
 *          This parameter can be one of these values:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma) {
 800c140:	b580      	push	{r7, lr}
 800c142:	b08a      	sub	sp, #40	@ 0x28
 800c144:	af02      	add	r7, sp, #8
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	4613      	mov	r3, r2
 800c14c:	71fb      	strb	r3, [r7, #7]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	61fb      	str	r3, [r7, #28]
    uint32_t epnum = (uint32_t) ep->num;
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	61bb      	str	r3, [r7, #24]
    uint16_t pktcnt;

    /* IN endpoint */
    if (ep->is_in == 1U) {
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	785b      	ldrb	r3, [r3, #1]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	f040 817f 	bne.w	800c460 <USB_EPStartXfer+0x320>
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U) {
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	691b      	ldr	r3, [r3, #16]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d132      	bne.n	800c1d0 <USB_EPStartXfer+0x90>
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	015a      	lsls	r2, r3, #5
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	4413      	add	r3, r2
 800c172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c176:	691b      	ldr	r3, [r3, #16]
 800c178:	69ba      	ldr	r2, [r7, #24]
 800c17a:	0151      	lsls	r1, r2, #5
 800c17c:	69fa      	ldr	r2, [r7, #28]
 800c17e:	440a      	add	r2, r1
 800c180:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c184:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800c188:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800c18c:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	015a      	lsls	r2, r3, #5
 800c192:	69fb      	ldr	r3, [r7, #28]
 800c194:	4413      	add	r3, r2
 800c196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c19a:	691b      	ldr	r3, [r3, #16]
 800c19c:	69ba      	ldr	r2, [r7, #24]
 800c19e:	0151      	lsls	r1, r2, #5
 800c1a0:	69fa      	ldr	r2, [r7, #28]
 800c1a2:	440a      	add	r2, r1
 800c1a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c1ac:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	015a      	lsls	r2, r3, #5
 800c1b2:	69fb      	ldr	r3, [r7, #28]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1ba:	691b      	ldr	r3, [r3, #16]
 800c1bc:	69ba      	ldr	r2, [r7, #24]
 800c1be:	0151      	lsls	r1, r2, #5
 800c1c0:	69fa      	ldr	r2, [r7, #28]
 800c1c2:	440a      	add	r2, r1
 800c1c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1c8:	0cdb      	lsrs	r3, r3, #19
 800c1ca:	04db      	lsls	r3, r3, #19
 800c1cc:	6113      	str	r3, [r2, #16]
 800c1ce:	e097      	b.n	800c300 <USB_EPStartXfer+0x1c0>
            /* Program the transfer size and packet count
             * as follows: xfersize = N * maxpacket +
             * short_packet pktcnt = N + (short_packet
             * exist ? 1 : 0)
             */
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	015a      	lsls	r2, r3, #5
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	69ba      	ldr	r2, [r7, #24]
 800c1e0:	0151      	lsls	r1, r2, #5
 800c1e2:	69fa      	ldr	r2, [r7, #28]
 800c1e4:	440a      	add	r2, r1
 800c1e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1ea:	0cdb      	lsrs	r3, r3, #19
 800c1ec:	04db      	lsls	r3, r3, #19
 800c1ee:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	015a      	lsls	r2, r3, #5
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1fc:	691b      	ldr	r3, [r3, #16]
 800c1fe:	69ba      	ldr	r2, [r7, #24]
 800c200:	0151      	lsls	r1, r2, #5
 800c202:	69fa      	ldr	r2, [r7, #28]
 800c204:	440a      	add	r2, r1
 800c206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c20a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800c20e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800c212:	6113      	str	r3, [r2, #16]

            if (epnum == 0U) {
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d11a      	bne.n	800c250 <USB_EPStartXfer+0x110>
                if (ep->xfer_len > ep->maxpacket) {
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	691a      	ldr	r2, [r3, #16]
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	429a      	cmp	r2, r3
 800c224:	d903      	bls.n	800c22e <USB_EPStartXfer+0xee>
                    ep->xfer_len = ep->maxpacket;
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	689a      	ldr	r2, [r3, #8]
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	611a      	str	r2, [r3, #16]
                }

                USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	015a      	lsls	r2, r3, #5
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	4413      	add	r3, r2
 800c236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	69ba      	ldr	r2, [r7, #24]
 800c23e:	0151      	lsls	r1, r2, #5
 800c240:	69fa      	ldr	r2, [r7, #28]
 800c242:	440a      	add	r2, r1
 800c244:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c248:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c24c:	6113      	str	r3, [r2, #16]
 800c24e:	e044      	b.n	800c2da <USB_EPStartXfer+0x19a>
            } else {
                pktcnt = (uint16_t) ((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	691a      	ldr	r2, [r3, #16]
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	4413      	add	r3, r2
 800c25a:	1e5a      	subs	r2, r3, #1
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	fbb2 f3f3 	udiv	r3, r2, r3
 800c264:	82fb      	strh	r3, [r7, #22]
                USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t) pktcnt << 19));
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	015a      	lsls	r2, r3, #5
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	4413      	add	r3, r2
 800c26e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c272:	691a      	ldr	r2, [r3, #16]
 800c274:	8afb      	ldrh	r3, [r7, #22]
 800c276:	04d9      	lsls	r1, r3, #19
 800c278:	4ba4      	ldr	r3, [pc, #656]	@ (800c50c <USB_EPStartXfer+0x3cc>)
 800c27a:	400b      	ands	r3, r1
 800c27c:	69b9      	ldr	r1, [r7, #24]
 800c27e:	0148      	lsls	r0, r1, #5
 800c280:	69f9      	ldr	r1, [r7, #28]
 800c282:	4401      	add	r1, r0
 800c284:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c288:	4313      	orrs	r3, r2
 800c28a:	610b      	str	r3, [r1, #16]

                if (ep->type == EP_TYPE_ISOC) {
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	791b      	ldrb	r3, [r3, #4]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d122      	bne.n	800c2da <USB_EPStartXfer+0x19a>
                    USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	015a      	lsls	r2, r3, #5
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	4413      	add	r3, r2
 800c29c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	69ba      	ldr	r2, [r7, #24]
 800c2a4:	0151      	lsls	r1, r2, #5
 800c2a6:	69fa      	ldr	r2, [r7, #28]
 800c2a8:	440a      	add	r2, r1
 800c2aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c2ae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c2b2:	6113      	str	r3, [r2, #16]
                    USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t) pktcnt << 29));
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	015a      	lsls	r2, r3, #5
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2c0:	691a      	ldr	r2, [r3, #16]
 800c2c2:	8afb      	ldrh	r3, [r7, #22]
 800c2c4:	075b      	lsls	r3, r3, #29
 800c2c6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800c2ca:	69b9      	ldr	r1, [r7, #24]
 800c2cc:	0148      	lsls	r0, r1, #5
 800c2ce:	69f9      	ldr	r1, [r7, #28]
 800c2d0:	4401      	add	r1, r0
 800c2d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	610b      	str	r3, [r1, #16]
                }
            }

            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c2da:	69bb      	ldr	r3, [r7, #24]
 800c2dc:	015a      	lsls	r2, r3, #5
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2e6:	691a      	ldr	r2, [r3, #16]
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2f0:	69b9      	ldr	r1, [r7, #24]
 800c2f2:	0148      	lsls	r0, r1, #5
 800c2f4:	69f9      	ldr	r1, [r7, #28]
 800c2f6:	4401      	add	r1, r0
 800c2f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	610b      	str	r3, [r1, #16]
        }

        if (dma == 1U) {
 800c300:	79fb      	ldrb	r3, [r7, #7]
 800c302:	2b01      	cmp	r3, #1
 800c304:	d14b      	bne.n	800c39e <USB_EPStartXfer+0x25e>
            if ((uint32_t) ep->dma_addr != 0U) {
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	69db      	ldr	r3, [r3, #28]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d009      	beq.n	800c322 <USB_EPStartXfer+0x1e2>
                USBx_INEP(epnum)->DIEPDMA = (uint32_t) (ep->dma_addr);
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	015a      	lsls	r2, r3, #5
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	4413      	add	r3, r2
 800c316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c31a:	461a      	mov	r2, r3
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	69db      	ldr	r3, [r3, #28]
 800c320:	6153      	str	r3, [r2, #20]
            }

            if (ep->type == EP_TYPE_ISOC) {
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	791b      	ldrb	r3, [r3, #4]
 800c326:	2b01      	cmp	r3, #1
 800c328:	d128      	bne.n	800c37c <USB_EPStartXfer+0x23c>
                if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c336:	2b00      	cmp	r3, #0
 800c338:	d110      	bne.n	800c35c <USB_EPStartXfer+0x21c>
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	015a      	lsls	r2, r3, #5
 800c33e:	69fb      	ldr	r3, [r7, #28]
 800c340:	4413      	add	r3, r2
 800c342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	69ba      	ldr	r2, [r7, #24]
 800c34a:	0151      	lsls	r1, r2, #5
 800c34c:	69fa      	ldr	r2, [r7, #28]
 800c34e:	440a      	add	r2, r1
 800c350:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c354:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c358:	6013      	str	r3, [r2, #0]
 800c35a:	e00f      	b.n	800c37c <USB_EPStartXfer+0x23c>
                } else {
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	015a      	lsls	r2, r3, #5
 800c360:	69fb      	ldr	r3, [r7, #28]
 800c362:	4413      	add	r3, r2
 800c364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	69ba      	ldr	r2, [r7, #24]
 800c36c:	0151      	lsls	r1, r2, #5
 800c36e:	69fa      	ldr	r2, [r7, #28]
 800c370:	440a      	add	r2, r1
 800c372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c37a:	6013      	str	r3, [r2, #0]
                }
            }

            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	015a      	lsls	r2, r3, #5
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	4413      	add	r3, r2
 800c384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	69ba      	ldr	r2, [r7, #24]
 800c38c:	0151      	lsls	r1, r2, #5
 800c38e:	69fa      	ldr	r2, [r7, #28]
 800c390:	440a      	add	r2, r1
 800c392:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c396:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c39a:	6013      	str	r3, [r2, #0]
 800c39c:	e166      	b.n	800c66c <USB_EPStartXfer+0x52c>
        } else {
            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	015a      	lsls	r2, r3, #5
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	69ba      	ldr	r2, [r7, #24]
 800c3ae:	0151      	lsls	r1, r2, #5
 800c3b0:	69fa      	ldr	r2, [r7, #28]
 800c3b2:	440a      	add	r2, r1
 800c3b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c3b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c3bc:	6013      	str	r3, [r2, #0]

            if (ep->type != EP_TYPE_ISOC) {
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	791b      	ldrb	r3, [r3, #4]
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d015      	beq.n	800c3f2 <USB_EPStartXfer+0x2b2>
                /* Enable the Tx FIFO Empty Interrupt for this EP */
                if (ep->xfer_len > 0U) {
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	691b      	ldr	r3, [r3, #16]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	f000 814e 	beq.w	800c66c <USB_EPStartXfer+0x52c>
                    USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	f003 030f 	and.w	r3, r3, #15
 800c3e0:	2101      	movs	r1, #1
 800c3e2:	fa01 f303 	lsl.w	r3, r1, r3
 800c3e6:	69f9      	ldr	r1, [r7, #28]
 800c3e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	634b      	str	r3, [r1, #52]	@ 0x34
 800c3f0:	e13c      	b.n	800c66c <USB_EPStartXfer+0x52c>
                }
            } else {
                if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d110      	bne.n	800c424 <USB_EPStartXfer+0x2e4>
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	015a      	lsls	r2, r3, #5
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	4413      	add	r3, r2
 800c40a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	69ba      	ldr	r2, [r7, #24]
 800c412:	0151      	lsls	r1, r2, #5
 800c414:	69fa      	ldr	r2, [r7, #28]
 800c416:	440a      	add	r2, r1
 800c418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c41c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c420:	6013      	str	r3, [r2, #0]
 800c422:	e00f      	b.n	800c444 <USB_EPStartXfer+0x304>
                } else {
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	015a      	lsls	r2, r3, #5
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	4413      	add	r3, r2
 800c42c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	69ba      	ldr	r2, [r7, #24]
 800c434:	0151      	lsls	r1, r2, #5
 800c436:	69fa      	ldr	r2, [r7, #28]
 800c438:	440a      	add	r2, r1
 800c43a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c43e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c442:	6013      	str	r3, [r2, #0]
                }

                (void) USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t) ep->xfer_len, dma);
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	68d9      	ldr	r1, [r3, #12]
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	781a      	ldrb	r2, [r3, #0]
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	b298      	uxth	r0, r3
 800c452:	79fb      	ldrb	r3, [r7, #7]
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	4603      	mov	r3, r0
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f000 f9b9 	bl	800c7d0 <USB_WritePacket>
 800c45e:	e105      	b.n	800c66c <USB_EPStartXfer+0x52c>
    {
        /* Program the transfer size and packet count as follows:
         * pktcnt = N
         * xfersize = N * maxpacket
         */
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	015a      	lsls	r2, r3, #5
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	4413      	add	r3, r2
 800c468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c46c:	691b      	ldr	r3, [r3, #16]
 800c46e:	69ba      	ldr	r2, [r7, #24]
 800c470:	0151      	lsls	r1, r2, #5
 800c472:	69fa      	ldr	r2, [r7, #28]
 800c474:	440a      	add	r2, r1
 800c476:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c47a:	0cdb      	lsrs	r3, r3, #19
 800c47c:	04db      	lsls	r3, r3, #19
 800c47e:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	015a      	lsls	r2, r3, #5
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	4413      	add	r3, r2
 800c488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c48c:	691b      	ldr	r3, [r3, #16]
 800c48e:	69ba      	ldr	r2, [r7, #24]
 800c490:	0151      	lsls	r1, r2, #5
 800c492:	69fa      	ldr	r2, [r7, #28]
 800c494:	440a      	add	r2, r1
 800c496:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c49a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800c49e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800c4a2:	6113      	str	r3, [r2, #16]

        if (epnum == 0U) {
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d132      	bne.n	800c510 <USB_EPStartXfer+0x3d0>
            if (ep->xfer_len > 0U) {
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	691b      	ldr	r3, [r3, #16]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d003      	beq.n	800c4ba <USB_EPStartXfer+0x37a>
                ep->xfer_len = ep->maxpacket;
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	689a      	ldr	r2, [r3, #8]
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	611a      	str	r2, [r3, #16]
            }

            /* Store transfer size, for EP0 this is equal to endpoint max packet size */
            ep->xfer_size = ep->maxpacket;
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	689a      	ldr	r2, [r3, #8]
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	621a      	str	r2, [r3, #32]

            USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	015a      	lsls	r2, r3, #5
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4ce:	691a      	ldr	r2, [r3, #16]
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	6a1b      	ldr	r3, [r3, #32]
 800c4d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4d8:	69b9      	ldr	r1, [r7, #24]
 800c4da:	0148      	lsls	r0, r1, #5
 800c4dc:	69f9      	ldr	r1, [r7, #28]
 800c4de:	4401      	add	r1, r0
 800c4e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	610b      	str	r3, [r1, #16]
            USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	015a      	lsls	r2, r3, #5
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4f4:	691b      	ldr	r3, [r3, #16]
 800c4f6:	69ba      	ldr	r2, [r7, #24]
 800c4f8:	0151      	lsls	r1, r2, #5
 800c4fa:	69fa      	ldr	r2, [r7, #28]
 800c4fc:	440a      	add	r2, r1
 800c4fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c502:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c506:	6113      	str	r3, [r2, #16]
 800c508:	e062      	b.n	800c5d0 <USB_EPStartXfer+0x490>
 800c50a:	bf00      	nop
 800c50c:	1ff80000 	.word	0x1ff80000
        } else {
            if (ep->xfer_len == 0U) {
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d123      	bne.n	800c560 <USB_EPStartXfer+0x420>
                USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	015a      	lsls	r2, r3, #5
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	4413      	add	r3, r2
 800c520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c524:	691a      	ldr	r2, [r3, #16]
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c52e:	69b9      	ldr	r1, [r7, #24]
 800c530:	0148      	lsls	r0, r1, #5
 800c532:	69f9      	ldr	r1, [r7, #28]
 800c534:	4401      	add	r1, r0
 800c536:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c53a:	4313      	orrs	r3, r2
 800c53c:	610b      	str	r3, [r1, #16]
                USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c53e:	69bb      	ldr	r3, [r7, #24]
 800c540:	015a      	lsls	r2, r3, #5
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	4413      	add	r3, r2
 800c546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	69ba      	ldr	r2, [r7, #24]
 800c54e:	0151      	lsls	r1, r2, #5
 800c550:	69fa      	ldr	r2, [r7, #28]
 800c552:	440a      	add	r2, r1
 800c554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c558:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c55c:	6113      	str	r3, [r2, #16]
 800c55e:	e037      	b.n	800c5d0 <USB_EPStartXfer+0x490>
            } else {
                pktcnt = (uint16_t) ((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	691a      	ldr	r2, [r3, #16]
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	4413      	add	r3, r2
 800c56a:	1e5a      	subs	r2, r3, #1
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	fbb2 f3f3 	udiv	r3, r2, r3
 800c574:	82fb      	strh	r3, [r7, #22]
                ep->xfer_size = ep->maxpacket * pktcnt;
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	8afa      	ldrh	r2, [r7, #22]
 800c57c:	fb03 f202 	mul.w	r2, r3, r2
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	621a      	str	r2, [r3, #32]

                USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t) pktcnt << 19);
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	015a      	lsls	r2, r3, #5
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	4413      	add	r3, r2
 800c58c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c590:	691a      	ldr	r2, [r3, #16]
 800c592:	8afb      	ldrh	r3, [r7, #22]
 800c594:	04d9      	lsls	r1, r3, #19
 800c596:	4b38      	ldr	r3, [pc, #224]	@ (800c678 <USB_EPStartXfer+0x538>)
 800c598:	400b      	ands	r3, r1
 800c59a:	69b9      	ldr	r1, [r7, #24]
 800c59c:	0148      	lsls	r0, r1, #5
 800c59e:	69f9      	ldr	r1, [r7, #28]
 800c5a0:	4401      	add	r1, r0
 800c5a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	610b      	str	r3, [r1, #16]
                USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	015a      	lsls	r2, r3, #5
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5b6:	691a      	ldr	r2, [r3, #16]
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	6a1b      	ldr	r3, [r3, #32]
 800c5bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c5c0:	69b9      	ldr	r1, [r7, #24]
 800c5c2:	0148      	lsls	r0, r1, #5
 800c5c4:	69f9      	ldr	r1, [r7, #28]
 800c5c6:	4401      	add	r1, r0
 800c5c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	610b      	str	r3, [r1, #16]
            }
        }

        if (dma == 1U) {
 800c5d0:	79fb      	ldrb	r3, [r7, #7]
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d10d      	bne.n	800c5f2 <USB_EPStartXfer+0x4b2>
            if ((uint32_t) ep->xfer_buff != 0U) {
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d009      	beq.n	800c5f2 <USB_EPStartXfer+0x4b2>
                USBx_OUTEP(epnum)->DOEPDMA = (uint32_t) (ep->xfer_buff);
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	68d9      	ldr	r1, [r3, #12]
 800c5e2:	69bb      	ldr	r3, [r7, #24]
 800c5e4:	015a      	lsls	r2, r3, #5
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5ee:	460a      	mov	r2, r1
 800c5f0:	615a      	str	r2, [r3, #20]
            }
        }

        if (ep->type == EP_TYPE_ISOC) {
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	791b      	ldrb	r3, [r3, #4]
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	d128      	bne.n	800c64c <USB_EPStartXfer+0x50c>
            if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c606:	2b00      	cmp	r3, #0
 800c608:	d110      	bne.n	800c62c <USB_EPStartXfer+0x4ec>
                USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	015a      	lsls	r2, r3, #5
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	4413      	add	r3, r2
 800c612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	69ba      	ldr	r2, [r7, #24]
 800c61a:	0151      	lsls	r1, r2, #5
 800c61c:	69fa      	ldr	r2, [r7, #28]
 800c61e:	440a      	add	r2, r1
 800c620:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c624:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c628:	6013      	str	r3, [r2, #0]
 800c62a:	e00f      	b.n	800c64c <USB_EPStartXfer+0x50c>
            } else {
                USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c62c:	69bb      	ldr	r3, [r7, #24]
 800c62e:	015a      	lsls	r2, r3, #5
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	4413      	add	r3, r2
 800c634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	69ba      	ldr	r2, [r7, #24]
 800c63c:	0151      	lsls	r1, r2, #5
 800c63e:	69fa      	ldr	r2, [r7, #28]
 800c640:	440a      	add	r2, r1
 800c642:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c64a:	6013      	str	r3, [r2, #0]
            }
        }
        /* EP enable */
        USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c64c:	69bb      	ldr	r3, [r7, #24]
 800c64e:	015a      	lsls	r2, r3, #5
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	4413      	add	r3, r2
 800c654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	69ba      	ldr	r2, [r7, #24]
 800c65c:	0151      	lsls	r1, r2, #5
 800c65e:	69fa      	ldr	r2, [r7, #28]
 800c660:	440a      	add	r2, r1
 800c662:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c666:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c66a:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3720      	adds	r7, #32
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	1ff80000 	.word	0x1ff80000

0800c67c <USB_EPStopXfer>:
 * @brief  USB_EPStoptXfer  Stop transfer on an EP
 * @param  USBx  usb device instance
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep) {
 800c67c:	b480      	push	{r7}
 800c67e:	b087      	sub	sp, #28
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
    __IO uint32_t count = 0U;
 800c686:	2300      	movs	r3, #0
 800c688:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef ret = HAL_OK;
 800c68a:	2300      	movs	r3, #0
 800c68c:	75fb      	strb	r3, [r7, #23]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	613b      	str	r3, [r7, #16]

    /* IN endpoint */
    if (ep->is_in == 1U) {
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	785b      	ldrb	r3, [r3, #1]
 800c696:	2b01      	cmp	r3, #1
 800c698:	d14a      	bne.n	800c730 <USB_EPStopXfer+0xb4>
        /* EP enable, IN data in FIFO */
        if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	015a      	lsls	r2, r3, #5
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	4413      	add	r3, r2
 800c6a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c6ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c6b2:	f040 8086 	bne.w	800c7c2 <USB_EPStopXfer+0x146>
            USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	015a      	lsls	r2, r3, #5
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	4413      	add	r3, r2
 800c6c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	683a      	ldr	r2, [r7, #0]
 800c6c8:	7812      	ldrb	r2, [r2, #0]
 800c6ca:	0151      	lsls	r1, r2, #5
 800c6cc:	693a      	ldr	r2, [r7, #16]
 800c6ce:	440a      	add	r2, r1
 800c6d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c6d8:	6013      	str	r3, [r2, #0]
            USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	015a      	lsls	r2, r3, #5
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	4413      	add	r3, r2
 800c6e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	7812      	ldrb	r2, [r2, #0]
 800c6ee:	0151      	lsls	r1, r2, #5
 800c6f0:	693a      	ldr	r2, [r7, #16]
 800c6f2:	440a      	add	r2, r1
 800c6f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c6fc:	6013      	str	r3, [r2, #0]

            do {
                count++;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	3301      	adds	r3, #1
 800c702:	60fb      	str	r3, [r7, #12]

                if (count > 10000U) {
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d902      	bls.n	800c714 <USB_EPStopXfer+0x98>
                    ret = HAL_ERROR;
 800c70e:	2301      	movs	r3, #1
 800c710:	75fb      	strb	r3, [r7, #23]
                    break;
 800c712:	e056      	b.n	800c7c2 <USB_EPStopXfer+0x146>
                }
            } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA);
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	015a      	lsls	r2, r3, #5
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	4413      	add	r3, r2
 800c71e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c72c:	d0e7      	beq.n	800c6fe <USB_EPStopXfer+0x82>
 800c72e:	e048      	b.n	800c7c2 <USB_EPStopXfer+0x146>
        }
    } else /* OUT endpoint */
    {
        if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	015a      	lsls	r2, r3, #5
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	4413      	add	r3, r2
 800c73a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c748:	d13b      	bne.n	800c7c2 <USB_EPStopXfer+0x146>
            USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	015a      	lsls	r2, r3, #5
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	4413      	add	r3, r2
 800c754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	683a      	ldr	r2, [r7, #0]
 800c75c:	7812      	ldrb	r2, [r2, #0]
 800c75e:	0151      	lsls	r1, r2, #5
 800c760:	693a      	ldr	r2, [r7, #16]
 800c762:	440a      	add	r2, r1
 800c764:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c768:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c76c:	6013      	str	r3, [r2, #0]
            USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	015a      	lsls	r2, r3, #5
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	4413      	add	r3, r2
 800c778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	683a      	ldr	r2, [r7, #0]
 800c780:	7812      	ldrb	r2, [r2, #0]
 800c782:	0151      	lsls	r1, r2, #5
 800c784:	693a      	ldr	r2, [r7, #16]
 800c786:	440a      	add	r2, r1
 800c788:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c78c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c790:	6013      	str	r3, [r2, #0]

            do {
                count++;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	3301      	adds	r3, #1
 800c796:	60fb      	str	r3, [r7, #12]

                if (count > 10000U) {
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d902      	bls.n	800c7a8 <USB_EPStopXfer+0x12c>
                    ret = HAL_ERROR;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	75fb      	strb	r3, [r7, #23]
                    break;
 800c7a6:	e00c      	b.n	800c7c2 <USB_EPStopXfer+0x146>
                }
            } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA);
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	015a      	lsls	r2, r3, #5
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c7bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c7c0:	d0e7      	beq.n	800c792 <USB_EPStopXfer+0x116>
        }
    }

    return ret;
 800c7c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	371c      	adds	r7, #28
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <USB_WritePacket>:
 *          This parameter can be one of these values:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma) {
 800c7d0:	b480      	push	{r7}
 800c7d2:	b089      	sub	sp, #36	@ 0x24
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	4611      	mov	r1, r2
 800c7dc:	461a      	mov	r2, r3
 800c7de:	460b      	mov	r3, r1
 800c7e0:	71fb      	strb	r3, [r7, #7]
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	80bb      	strh	r3, [r7, #4]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	617b      	str	r3, [r7, #20]
    uint8_t *pSrc = src;
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	61fb      	str	r3, [r7, #28]
    uint32_t count32b;
    uint32_t i;

    if (dma == 0U) {
 800c7ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d123      	bne.n	800c83e <USB_WritePacket+0x6e>
        count32b = ((uint32_t) len + 3U) / 4U;
 800c7f6:	88bb      	ldrh	r3, [r7, #4]
 800c7f8:	3303      	adds	r3, #3
 800c7fa:	089b      	lsrs	r3, r3, #2
 800c7fc:	613b      	str	r3, [r7, #16]
        for (i = 0U; i < count32b; i++) {
 800c7fe:	2300      	movs	r3, #0
 800c800:	61bb      	str	r3, [r7, #24]
 800c802:	e018      	b.n	800c836 <USB_WritePacket+0x66>
            USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c804:	79fb      	ldrb	r3, [r7, #7]
 800c806:	031a      	lsls	r2, r3, #12
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	4413      	add	r3, r2
 800c80c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c810:	461a      	mov	r2, r3
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	6013      	str	r3, [r2, #0]
            pSrc++;
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	3301      	adds	r3, #1
 800c81c:	61fb      	str	r3, [r7, #28]
            pSrc++;
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	3301      	adds	r3, #1
 800c822:	61fb      	str	r3, [r7, #28]
            pSrc++;
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	3301      	adds	r3, #1
 800c828:	61fb      	str	r3, [r7, #28]
            pSrc++;
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	3301      	adds	r3, #1
 800c82e:	61fb      	str	r3, [r7, #28]
        for (i = 0U; i < count32b; i++) {
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	3301      	adds	r3, #1
 800c834:	61bb      	str	r3, [r7, #24]
 800c836:	69ba      	ldr	r2, [r7, #24]
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d3e2      	bcc.n	800c804 <USB_WritePacket+0x34>
        }
    }

    return HAL_OK;
 800c83e:	2300      	movs	r3, #0
}
 800c840:	4618      	mov	r0, r3
 800c842:	3724      	adds	r7, #36	@ 0x24
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <USB_ReadPacket>:
 * @param  USBx  Selected device
 * @param  dest  source pointer
 * @param  len  Number of bytes to read
 * @retval pointer to destination buffer
 */
void* USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len) {
 800c84c:	b480      	push	{r7}
 800c84e:	b08b      	sub	sp, #44	@ 0x2c
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	4613      	mov	r3, r2
 800c858:	80fb      	strh	r3, [r7, #6]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	61bb      	str	r3, [r7, #24]
    uint8_t *pDest = dest;
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t pData;
    uint32_t i;
    uint32_t count32b = (uint32_t) len >> 2U;
 800c862:	88fb      	ldrh	r3, [r7, #6]
 800c864:	089b      	lsrs	r3, r3, #2
 800c866:	b29b      	uxth	r3, r3
 800c868:	617b      	str	r3, [r7, #20]
    uint16_t remaining_bytes = len % 4U;
 800c86a:	88fb      	ldrh	r3, [r7, #6]
 800c86c:	f003 0303 	and.w	r3, r3, #3
 800c870:	83fb      	strh	r3, [r7, #30]

    for (i = 0U; i < count32b; i++) {
 800c872:	2300      	movs	r3, #0
 800c874:	623b      	str	r3, [r7, #32]
 800c876:	e014      	b.n	800c8a2 <USB_ReadPacket+0x56>
        __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c882:	601a      	str	r2, [r3, #0]
        pDest++;
 800c884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c886:	3301      	adds	r3, #1
 800c888:	627b      	str	r3, [r7, #36]	@ 0x24
        pDest++;
 800c88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88c:	3301      	adds	r3, #1
 800c88e:	627b      	str	r3, [r7, #36]	@ 0x24
        pDest++;
 800c890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c892:	3301      	adds	r3, #1
 800c894:	627b      	str	r3, [r7, #36]	@ 0x24
        pDest++;
 800c896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c898:	3301      	adds	r3, #1
 800c89a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 0U; i < count32b; i++) {
 800c89c:	6a3b      	ldr	r3, [r7, #32]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	623b      	str	r3, [r7, #32]
 800c8a2:	6a3a      	ldr	r2, [r7, #32]
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d3e6      	bcc.n	800c878 <USB_ReadPacket+0x2c>
    }

    /* When Number of data is not word aligned, read the remaining byte */
    if (remaining_bytes != 0U) {
 800c8aa:	8bfb      	ldrh	r3, [r7, #30]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d01e      	beq.n	800c8ee <USB_ReadPacket+0xa2>
        i = 0U;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	623b      	str	r3, [r7, #32]
        __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	f107 0310 	add.w	r3, r7, #16
 800c8c0:	6812      	ldr	r2, [r2, #0]
 800c8c2:	601a      	str	r2, [r3, #0]

        do {
            *(uint8_t*) pDest = (uint8_t) (pData >> (8U * (uint8_t) (i)));
 800c8c4:	693a      	ldr	r2, [r7, #16]
 800c8c6:	6a3b      	ldr	r3, [r7, #32]
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	00db      	lsls	r3, r3, #3
 800c8cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c8d0:	b2da      	uxtb	r2, r3
 800c8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d4:	701a      	strb	r2, [r3, #0]
            i++;
 800c8d6:	6a3b      	ldr	r3, [r7, #32]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	623b      	str	r3, [r7, #32]
            pDest++;
 800c8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8de:	3301      	adds	r3, #1
 800c8e0:	627b      	str	r3, [r7, #36]	@ 0x24
            remaining_bytes--;
 800c8e2:	8bfb      	ldrh	r3, [r7, #30]
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	83fb      	strh	r3, [r7, #30]
        } while (remaining_bytes != 0U);
 800c8e8:	8bfb      	ldrh	r3, [r7, #30]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d1ea      	bne.n	800c8c4 <USB_ReadPacket+0x78>
    }

    return ((void*) pDest);
 800c8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	372c      	adds	r7, #44	@ 0x2c
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr

0800c8fc <USB_EPSetStall>:
 * @brief  USB_EPSetStall : set a stall condition over an EP
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep) {
 800c8fc:	b480      	push	{r7}
 800c8fe:	b085      	sub	sp, #20
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t) ep->num;
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	785b      	ldrb	r3, [r3, #1]
 800c914:	2b01      	cmp	r3, #1
 800c916:	d12c      	bne.n	800c972 <USB_EPSetStall+0x76>
        if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U)) {
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	015a      	lsls	r2, r3, #5
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	4413      	add	r3, r2
 800c920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	db12      	blt.n	800c950 <USB_EPSetStall+0x54>
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d00f      	beq.n	800c950 <USB_EPSetStall+0x54>
            USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	015a      	lsls	r2, r3, #5
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	4413      	add	r3, r2
 800c938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	0151      	lsls	r1, r2, #5
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	440a      	add	r2, r1
 800c946:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c94a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c94e:	6013      	str	r3, [r2, #0]
        }
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	015a      	lsls	r2, r3, #5
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	4413      	add	r3, r2
 800c958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	0151      	lsls	r1, r2, #5
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	440a      	add	r2, r1
 800c966:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c96a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c96e:	6013      	str	r3, [r2, #0]
 800c970:	e02b      	b.n	800c9ca <USB_EPSetStall+0xce>
    } else {
        if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U)) {
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	015a      	lsls	r2, r3, #5
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	4413      	add	r3, r2
 800c97a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	db12      	blt.n	800c9aa <USB_EPSetStall+0xae>
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d00f      	beq.n	800c9aa <USB_EPSetStall+0xae>
            USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	015a      	lsls	r2, r3, #5
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	4413      	add	r3, r2
 800c992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	68ba      	ldr	r2, [r7, #8]
 800c99a:	0151      	lsls	r1, r2, #5
 800c99c:	68fa      	ldr	r2, [r7, #12]
 800c99e:	440a      	add	r2, r1
 800c9a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c9a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c9a8:	6013      	str	r3, [r2, #0]
        }
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	015a      	lsls	r2, r3, #5
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	0151      	lsls	r1, r2, #5
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	440a      	add	r2, r1
 800c9c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c9c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c9c8:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 800c9ca:	2300      	movs	r3, #0
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3714      	adds	r7, #20
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <USB_EPClearStall>:
 * @brief  USB_EPClearStall : Clear a stall condition over an EP
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep) {
 800c9d8:	b480      	push	{r7}
 800c9da:	b085      	sub	sp, #20
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t) ep->num;
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	785b      	ldrb	r3, [r3, #1]
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d128      	bne.n	800ca46 <USB_EPClearStall+0x6e>
        USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	015a      	lsls	r2, r3, #5
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	68ba      	ldr	r2, [r7, #8]
 800ca04:	0151      	lsls	r1, r2, #5
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	440a      	add	r2, r1
 800ca0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ca12:	6013      	str	r3, [r2, #0]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	791b      	ldrb	r3, [r3, #4]
 800ca18:	2b03      	cmp	r3, #3
 800ca1a:	d003      	beq.n	800ca24 <USB_EPClearStall+0x4c>
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	791b      	ldrb	r3, [r3, #4]
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	d138      	bne.n	800ca96 <USB_EPClearStall+0xbe>
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	015a      	lsls	r2, r3, #5
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	4413      	add	r3, r2
 800ca2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	68ba      	ldr	r2, [r7, #8]
 800ca34:	0151      	lsls	r1, r2, #5
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	440a      	add	r2, r1
 800ca3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca42:	6013      	str	r3, [r2, #0]
 800ca44:	e027      	b.n	800ca96 <USB_EPClearStall+0xbe>
        }
    } else {
        USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	015a      	lsls	r2, r3, #5
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	4413      	add	r3, r2
 800ca4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	68ba      	ldr	r2, [r7, #8]
 800ca56:	0151      	lsls	r1, r2, #5
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	440a      	add	r2, r1
 800ca5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ca64:	6013      	str	r3, [r2, #0]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	791b      	ldrb	r3, [r3, #4]
 800ca6a:	2b03      	cmp	r3, #3
 800ca6c:	d003      	beq.n	800ca76 <USB_EPClearStall+0x9e>
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	791b      	ldrb	r3, [r3, #4]
 800ca72:	2b02      	cmp	r3, #2
 800ca74:	d10f      	bne.n	800ca96 <USB_EPClearStall+0xbe>
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	015a      	lsls	r2, r3, #5
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	68ba      	ldr	r2, [r7, #8]
 800ca86:	0151      	lsls	r1, r2, #5
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	440a      	add	r2, r1
 800ca8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca94:	6013      	str	r3, [r2, #0]
        }
    }
    return HAL_OK;
 800ca96:	2300      	movs	r3, #0
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3714      	adds	r7, #20
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <USB_SetDevAddress>:
 * @param  USBx  Selected device
 * @param  address  new device address to be assigned
 *          This parameter can be a value from 0 to 255
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address) {
 800caa4:	b480      	push	{r7}
 800caa6:	b085      	sub	sp, #20
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	460b      	mov	r3, r1
 800caae:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	60fb      	str	r3, [r7, #12]

    USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cac2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800cac6:	6013      	str	r3, [r2, #0]
    USBx_DEVICE->DCFG |= ((uint32_t) address << 4) & USB_OTG_DCFG_DAD;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	78fb      	ldrb	r3, [r7, #3]
 800cad2:	011b      	lsls	r3, r3, #4
 800cad4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800cad8:	68f9      	ldr	r1, [r7, #12]
 800cada:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cade:	4313      	orrs	r3, r2
 800cae0:	600b      	str	r3, [r1, #0]

    return HAL_OK;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3714      	adds	r7, #20
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <USB_DevConnect>:
/**
 * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx) {
 800caf0:	b480      	push	{r7}
 800caf2:	b085      	sub	sp, #20
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	60fb      	str	r3, [r7, #12]

    /* In case phy is stopped, ensure to ungate and restore the phy CLK */
    USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cb0a:	f023 0303 	bic.w	r3, r3, #3
 800cb0e:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cb1e:	f023 0302 	bic.w	r3, r3, #2
 800cb22:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3714      	adds	r7, #20
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr

0800cb32 <USB_DevDisconnect>:
/**
 * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx) {
 800cb32:	b480      	push	{r7}
 800cb34:	b085      	sub	sp, #20
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	60fb      	str	r3, [r7, #12]

    /* In case phy is stopped, ensure to ungate and restore the phy CLK */
    USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	68fa      	ldr	r2, [r7, #12]
 800cb48:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cb4c:	f023 0303 	bic.w	r3, r3, #3
 800cb50:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	68fa      	ldr	r2, [r7, #12]
 800cb5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cb60:	f043 0302 	orr.w	r3, r3, #2
 800cb64:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3714      	adds	r7, #20
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr

0800cb74 <USB_ReadInterrupts>:
/**
 * @brief  USB_ReadInterrupts: return the global USB interrupt status
 * @param  USBx  Selected device
 * @retval USB Global Interrupt status
 */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx) {
 800cb74:	b480      	push	{r7}
 800cb76:	b085      	sub	sp, #20
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
    uint32_t tmpreg;

    tmpreg = USBx->GINTSTS;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	695b      	ldr	r3, [r3, #20]
 800cb80:	60fb      	str	r3, [r7, #12]
    tmpreg &= USBx->GINTMSK;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	699b      	ldr	r3, [r3, #24]
 800cb86:	68fa      	ldr	r2, [r7, #12]
 800cb88:	4013      	ands	r3, r2
 800cb8a:	60fb      	str	r3, [r7, #12]

    return tmpreg;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3714      	adds	r7, #20
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr

0800cb9a <USB_ReadDevAllOutEpInterrupt>:
/**
 * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
 * @param  USBx  Selected device
 * @retval USB Device OUT EP interrupt status
 */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx) {
 800cb9a:	b480      	push	{r7}
 800cb9c:	b085      	sub	sp, #20
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_DEVICE->DAINT;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbac:	699b      	ldr	r3, [r3, #24]
 800cbae:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DAINTMSK;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbb6:	69db      	ldr	r3, [r3, #28]
 800cbb8:	68ba      	ldr	r2, [r7, #8]
 800cbba:	4013      	ands	r3, r2
 800cbbc:	60bb      	str	r3, [r7, #8]

    return ((tmpreg & 0xffff0000U) >> 16);
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	0c1b      	lsrs	r3, r3, #16
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3714      	adds	r7, #20
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr

0800cbce <USB_ReadDevAllInEpInterrupt>:
/**
 * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
 * @param  USBx  Selected device
 * @retval USB Device IN EP interrupt status
 */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx) {
 800cbce:	b480      	push	{r7}
 800cbd0:	b085      	sub	sp, #20
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_DEVICE->DAINT;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbe0:	699b      	ldr	r3, [r3, #24]
 800cbe2:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DAINTMSK;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbea:	69db      	ldr	r3, [r3, #28]
 800cbec:	68ba      	ldr	r2, [r7, #8]
 800cbee:	4013      	ands	r3, r2
 800cbf0:	60bb      	str	r3, [r7, #8]

    return ((tmpreg & 0xFFFFU));
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	b29b      	uxth	r3, r3
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3714      	adds	r7, #20
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr

0800cc02 <USB_ReadDevOutEPInterrupt>:
 * @param  USBx  Selected device
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device OUT EP Interrupt register
 */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum) {
 800cc02:	b480      	push	{r7}
 800cc04:	b085      	sub	sp, #20
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cc12:	78fb      	ldrb	r3, [r7, #3]
 800cc14:	015a      	lsls	r2, r3, #5
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	4413      	add	r3, r2
 800cc1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DOEPMSK;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc28:	695b      	ldr	r3, [r3, #20]
 800cc2a:	68ba      	ldr	r2, [r7, #8]
 800cc2c:	4013      	ands	r3, r2
 800cc2e:	60bb      	str	r3, [r7, #8]

    return tmpreg;
 800cc30:	68bb      	ldr	r3, [r7, #8]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr

0800cc3e <USB_ReadDevInEPInterrupt>:
 * @param  USBx  Selected device
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device IN EP Interrupt register
 */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum) {
 800cc3e:	b480      	push	{r7}
 800cc40:	b087      	sub	sp, #28
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
 800cc46:	460b      	mov	r3, r1
 800cc48:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	617b      	str	r3, [r7, #20]
    uint32_t tmpreg;
    uint32_t msk;
    uint32_t emp;

    msk = USBx_DEVICE->DIEPMSK;
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc54:	691b      	ldr	r3, [r3, #16]
 800cc56:	613b      	str	r3, [r7, #16]
    emp = USBx_DEVICE->DIEPEMPMSK;
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc60:	60fb      	str	r3, [r7, #12]
    msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cc62:	78fb      	ldrb	r3, [r7, #3]
 800cc64:	f003 030f 	and.w	r3, r3, #15
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	fa22 f303 	lsr.w	r3, r2, r3
 800cc6e:	01db      	lsls	r3, r3, #7
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	693a      	ldr	r2, [r7, #16]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	613b      	str	r3, [r7, #16]
    tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cc78:	78fb      	ldrb	r3, [r7, #3]
 800cc7a:	015a      	lsls	r2, r3, #5
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	4413      	add	r3, r2
 800cc80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc84:	689b      	ldr	r3, [r3, #8]
 800cc86:	693a      	ldr	r2, [r7, #16]
 800cc88:	4013      	ands	r3, r2
 800cc8a:	60bb      	str	r3, [r7, #8]

    return tmpreg;
 800cc8c:	68bb      	ldr	r3, [r7, #8]
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	371c      	adds	r7, #28
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr

0800cc9a <USB_GetMode>:
 * @retval return core mode : Host or Device
 *          This parameter can be one of these values:
 *           1 : Host
 *           0 : Device
 */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx) {
 800cc9a:	b480      	push	{r7}
 800cc9c:	b083      	sub	sp, #12
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
    return ((USBx->GINTSTS) & 0x1U);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	695b      	ldr	r3, [r3, #20]
 800cca6:	f003 0301 	and.w	r3, r3, #1
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	370c      	adds	r7, #12
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr

0800ccb6 <USB_ActivateSetup>:
/**
 * @brief  Activate EP0 for Setup transactions
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx) {
 800ccb6:	b480      	push	{r7}
 800ccb8:	b085      	sub	sp, #20
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	60fb      	str	r3, [r7, #12]

    /* Set the MPS of the IN EP0 to 64 bytes */
    USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	68fa      	ldr	r2, [r7, #12]
 800cccc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ccd0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ccd4:	f023 0307 	bic.w	r3, r3, #7
 800ccd8:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ccec:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3714      	adds	r7, #20
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <USB_EP0_OutStart>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @param  psetup  pointer to setup packet
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup) {
 800ccfc:	b480      	push	{r7}
 800ccfe:	b087      	sub	sp, #28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	460b      	mov	r3, r1
 800cd06:	607a      	str	r2, [r7, #4]
 800cd08:	72fb      	strb	r3, [r7, #11]
    uint32_t USBx_BASE = (uint32_t) USBx;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	617b      	str	r3, [r7, #20]
    uint32_t gSNPSiD = *(__IO const uint32_t*) (&USBx->CID + 0x1U);
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	333c      	adds	r3, #60	@ 0x3c
 800cd12:	3304      	adds	r3, #4
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	613b      	str	r3, [r7, #16]

    if (gSNPSiD > USB_OTG_CORE_ID_300A) {
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	4a26      	ldr	r2, [pc, #152]	@ (800cdb4 <USB_EP0_OutStart+0xb8>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d90a      	bls.n	800cd36 <USB_EP0_OutStart+0x3a>
        if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cd2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cd30:	d101      	bne.n	800cd36 <USB_EP0_OutStart+0x3a>
            return HAL_OK;
 800cd32:	2300      	movs	r3, #0
 800cd34:	e037      	b.n	800cda6 <USB_EP0_OutStart+0xaa>
        }
    }

    USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	2300      	movs	r3, #0
 800cd40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd48:	691b      	ldr	r3, [r3, #16]
 800cd4a:	697a      	ldr	r2, [r7, #20]
 800cd4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cd54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd5c:	691b      	ldr	r3, [r3, #16]
 800cd5e:	697a      	ldr	r2, [r7, #20]
 800cd60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd64:	f043 0318 	orr.w	r3, r3, #24
 800cd68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_STUPCNT;
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd70:	691b      	ldr	r3, [r3, #16]
 800cd72:	697a      	ldr	r2, [r7, #20]
 800cd74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd78:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800cd7c:	6113      	str	r3, [r2, #16]

    if (dma == 1U) {
 800cd7e:	7afb      	ldrb	r3, [r7, #11]
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d10f      	bne.n	800cda4 <USB_EP0_OutStart+0xa8>
        USBx_OUTEP(0U)->DOEPDMA = (uint32_t) psetup;
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6153      	str	r3, [r2, #20]
        /* EP enable */
        USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	697a      	ldr	r2, [r7, #20]
 800cd9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd9e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800cda2:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	371c      	adds	r7, #28
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop
 800cdb4:	4f54300a 	.word	0x4f54300a

0800cdb8 <USB_CoreReset>:
/**
 * @brief  Reset the USB Core (needed after USB clock settings change)
 * @param  USBx  Selected device
 * @retval HAL status
 */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx) {
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
    __IO uint32_t count = 0U;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	60fb      	str	r3, [r7, #12]

        if (count > HAL_USB_TIMEOUT) {
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cdd0:	d901      	bls.n	800cdd6 <USB_CoreReset+0x1e>
            return HAL_TIMEOUT;
 800cdd2:	2303      	movs	r3, #3
 800cdd4:	e022      	b.n	800ce1c <USB_CoreReset+0x64>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	691b      	ldr	r3, [r3, #16]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	daf2      	bge.n	800cdc4 <USB_CoreReset+0xc>

    count = 10U;
 800cdde:	230a      	movs	r3, #10
 800cde0:	60fb      	str	r3, [r7, #12]

    /* few cycles before setting core reset */
    while (count > 0U) {
 800cde2:	e002      	b.n	800cdea <USB_CoreReset+0x32>
        count--;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	3b01      	subs	r3, #1
 800cde8:	60fb      	str	r3, [r7, #12]
    while (count > 0U) {
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d1f9      	bne.n	800cde4 <USB_CoreReset+0x2c>
    }

    /* Core Soft Reset */
    USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	691b      	ldr	r3, [r3, #16]
 800cdf4:	f043 0201 	orr.w	r2, r3, #1
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	611a      	str	r2, [r3, #16]

    do {
        count++;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	3301      	adds	r3, #1
 800ce00:	60fb      	str	r3, [r7, #12]

        if (count > HAL_USB_TIMEOUT) {
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ce08:	d901      	bls.n	800ce0e <USB_CoreReset+0x56>
            return HAL_TIMEOUT;
 800ce0a:	2303      	movs	r3, #3
 800ce0c:	e006      	b.n	800ce1c <USB_CoreReset+0x64>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	691b      	ldr	r3, [r3, #16]
 800ce12:	f003 0301 	and.w	r3, r3, #1
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	d0f0      	beq.n	800cdfc <USB_CoreReset+0x44>

    return HAL_OK;
 800ce1a:	2300      	movs	r3, #0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3714      	adds	r7, #20
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <USBD_CDC_Init>:
 *         Initialize the CDC interface
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	460b      	mov	r3, r1
 800ce32:	70fb      	strb	r3, [r7, #3]
    UNUSED(cfgidx);
    USBD_CDC_HandleTypeDef *hcdc;

    hcdc = (USBD_CDC_HandleTypeDef*) USBD_malloc (sizeof(USBD_CDC_HandleTypeDef));
 800ce34:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ce38:	f002 fc4c 	bl	800f6d4 <USBD_static_malloc>
 800ce3c:	60f8      	str	r0, [r7, #12]

    if (hcdc == NULL) {
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d109      	bne.n	800ce58 <USBD_CDC_Init+0x30>
        pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	32b0      	adds	r2, #176	@ 0xb0
 800ce4e:	2100      	movs	r1, #0
 800ce50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        return (uint8_t) USBD_EMEM;
 800ce54:	2302      	movs	r3, #2
 800ce56:	e0d4      	b.n	800d002 <USBD_CDC_Init+0x1da>
    }

    (void) USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ce58:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	68f8      	ldr	r0, [r7, #12]
 800ce60:	f002 fe86 	bl	800fb70 <memset>

    pdev->pClassDataCmsit[pdev->classId] = (void*) hcdc;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	32b0      	adds	r2, #176	@ 0xb0
 800ce6e:	68f9      	ldr	r1, [r7, #12]
 800ce70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	32b0      	adds	r2, #176	@ 0xb0
 800ce7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	7c1b      	ldrb	r3, [r3, #16]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d138      	bne.n	800cf02 <USBD_CDC_Init+0xda>
        /* Open EP IN */
        (void) USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ce90:	4b5e      	ldr	r3, [pc, #376]	@ (800d00c <USBD_CDC_Init+0x1e4>)
 800ce92:	7819      	ldrb	r1, [r3, #0]
 800ce94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ce98:	2202      	movs	r2, #2
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f002 faf7 	bl	800f48e <USBD_LL_OpenEP>
        CDC_DATA_HS_IN_PACKET_SIZE);

        pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cea0:	4b5a      	ldr	r3, [pc, #360]	@ (800d00c <USBD_CDC_Init+0x1e4>)
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	f003 020f 	and.w	r2, r3, #15
 800cea8:	6879      	ldr	r1, [r7, #4]
 800ceaa:	4613      	mov	r3, r2
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	4413      	add	r3, r2
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	440b      	add	r3, r1
 800ceb4:	3323      	adds	r3, #35	@ 0x23
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	701a      	strb	r2, [r3, #0]

        /* Open EP OUT */
        (void) USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ceba:	4b55      	ldr	r3, [pc, #340]	@ (800d010 <USBD_CDC_Init+0x1e8>)
 800cebc:	7819      	ldrb	r1, [r3, #0]
 800cebe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cec2:	2202      	movs	r2, #2
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f002 fae2 	bl	800f48e <USBD_LL_OpenEP>
        CDC_DATA_HS_OUT_PACKET_SIZE);

        pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ceca:	4b51      	ldr	r3, [pc, #324]	@ (800d010 <USBD_CDC_Init+0x1e8>)
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	f003 020f 	and.w	r2, r3, #15
 800ced2:	6879      	ldr	r1, [r7, #4]
 800ced4:	4613      	mov	r3, r2
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	4413      	add	r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	440b      	add	r3, r1
 800cede:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800cee2:	2201      	movs	r2, #1
 800cee4:	701a      	strb	r2, [r3, #0]

        /* Set bInterval for CDC CMD Endpoint */
        pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cee6:	4b4b      	ldr	r3, [pc, #300]	@ (800d014 <USBD_CDC_Init+0x1ec>)
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	f003 020f 	and.w	r2, r3, #15
 800ceee:	6879      	ldr	r1, [r7, #4]
 800cef0:	4613      	mov	r3, r2
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	4413      	add	r3, r2
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	440b      	add	r3, r1
 800cefa:	331c      	adds	r3, #28
 800cefc:	2210      	movs	r2, #16
 800cefe:	601a      	str	r2, [r3, #0]
 800cf00:	e035      	b.n	800cf6e <USBD_CDC_Init+0x146>
    } else {
        /* Open EP IN */
        (void) USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cf02:	4b42      	ldr	r3, [pc, #264]	@ (800d00c <USBD_CDC_Init+0x1e4>)
 800cf04:	7819      	ldrb	r1, [r3, #0]
 800cf06:	2340      	movs	r3, #64	@ 0x40
 800cf08:	2202      	movs	r2, #2
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f002 fabf 	bl	800f48e <USBD_LL_OpenEP>
        CDC_DATA_FS_IN_PACKET_SIZE);

        pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cf10:	4b3e      	ldr	r3, [pc, #248]	@ (800d00c <USBD_CDC_Init+0x1e4>)
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	f003 020f 	and.w	r2, r3, #15
 800cf18:	6879      	ldr	r1, [r7, #4]
 800cf1a:	4613      	mov	r3, r2
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	4413      	add	r3, r2
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	440b      	add	r3, r1
 800cf24:	3323      	adds	r3, #35	@ 0x23
 800cf26:	2201      	movs	r2, #1
 800cf28:	701a      	strb	r2, [r3, #0]

        /* Open EP OUT */
        (void) USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cf2a:	4b39      	ldr	r3, [pc, #228]	@ (800d010 <USBD_CDC_Init+0x1e8>)
 800cf2c:	7819      	ldrb	r1, [r3, #0]
 800cf2e:	2340      	movs	r3, #64	@ 0x40
 800cf30:	2202      	movs	r2, #2
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f002 faab 	bl	800f48e <USBD_LL_OpenEP>
        CDC_DATA_FS_OUT_PACKET_SIZE);

        pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cf38:	4b35      	ldr	r3, [pc, #212]	@ (800d010 <USBD_CDC_Init+0x1e8>)
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	f003 020f 	and.w	r2, r3, #15
 800cf40:	6879      	ldr	r1, [r7, #4]
 800cf42:	4613      	mov	r3, r2
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	4413      	add	r3, r2
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	440b      	add	r3, r1
 800cf4c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800cf50:	2201      	movs	r2, #1
 800cf52:	701a      	strb	r2, [r3, #0]

        /* Set bInterval for CMD Endpoint */
        pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cf54:	4b2f      	ldr	r3, [pc, #188]	@ (800d014 <USBD_CDC_Init+0x1ec>)
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	f003 020f 	and.w	r2, r3, #15
 800cf5c:	6879      	ldr	r1, [r7, #4]
 800cf5e:	4613      	mov	r3, r2
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	4413      	add	r3, r2
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	440b      	add	r3, r1
 800cf68:	331c      	adds	r3, #28
 800cf6a:	2210      	movs	r2, #16
 800cf6c:	601a      	str	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void) USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cf6e:	4b29      	ldr	r3, [pc, #164]	@ (800d014 <USBD_CDC_Init+0x1ec>)
 800cf70:	7819      	ldrb	r1, [r3, #0]
 800cf72:	2308      	movs	r3, #8
 800cf74:	2203      	movs	r2, #3
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f002 fa89 	bl	800f48e <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cf7c:	4b25      	ldr	r3, [pc, #148]	@ (800d014 <USBD_CDC_Init+0x1ec>)
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	f003 020f 	and.w	r2, r3, #15
 800cf84:	6879      	ldr	r1, [r7, #4]
 800cf86:	4613      	mov	r3, r2
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	4413      	add	r3, r2
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	440b      	add	r3, r1
 800cf90:	3323      	adds	r3, #35	@ 0x23
 800cf92:	2201      	movs	r2, #1
 800cf94:	701a      	strb	r2, [r3, #0]

    hcdc->RxBuffer = NULL;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef*) pdev->pUserData[pdev->classId])->Init();
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	33b0      	adds	r3, #176	@ 0xb0
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	4413      	add	r3, r2
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (hcdc->RxBuffer == NULL) {
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d101      	bne.n	800cfd0 <USBD_CDC_Init+0x1a8>
        return (uint8_t) USBD_EMEM;
 800cfcc:	2302      	movs	r3, #2
 800cfce:	e018      	b.n	800d002 <USBD_CDC_Init+0x1da>
    }

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	7c1b      	ldrb	r3, [r3, #16]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d10a      	bne.n	800cfee <USBD_CDC_Init+0x1c6>
        /* Prepare Out endpoint to receive next packet */
        (void) USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cfd8:	4b0d      	ldr	r3, [pc, #52]	@ (800d010 <USBD_CDC_Init+0x1e8>)
 800cfda:	7819      	ldrb	r1, [r3, #0]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cfe2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f002 fb40 	bl	800f66c <USBD_LL_PrepareReceive>
 800cfec:	e008      	b.n	800d000 <USBD_CDC_Init+0x1d8>
        CDC_DATA_HS_OUT_PACKET_SIZE);
    } else {
        /* Prepare Out endpoint to receive next packet */
        (void) USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cfee:	4b08      	ldr	r3, [pc, #32]	@ (800d010 <USBD_CDC_Init+0x1e8>)
 800cff0:	7819      	ldrb	r1, [r3, #0]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cff8:	2340      	movs	r3, #64	@ 0x40
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f002 fb36 	bl	800f66c <USBD_LL_PrepareReceive>
        CDC_DATA_FS_OUT_PACKET_SIZE);
    }

    return (uint8_t) USBD_OK;
 800d000:	2300      	movs	r3, #0
}
 800d002:	4618      	mov	r0, r3
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	20000093 	.word	0x20000093
 800d010:	20000094 	.word	0x20000094
 800d014:	20000095 	.word	0x20000095

0800d018 <USBD_CDC_DeInit>:
 *         DeInitialize the CDC layer
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	460b      	mov	r3, r1
 800d022:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

    /* Close EP IN */
    (void) USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d024:	4b3a      	ldr	r3, [pc, #232]	@ (800d110 <USBD_CDC_DeInit+0xf8>)
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	4619      	mov	r1, r3
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f002 fa55 	bl	800f4da <USBD_LL_CloseEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d030:	4b37      	ldr	r3, [pc, #220]	@ (800d110 <USBD_CDC_DeInit+0xf8>)
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	f003 020f 	and.w	r2, r3, #15
 800d038:	6879      	ldr	r1, [r7, #4]
 800d03a:	4613      	mov	r3, r2
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	4413      	add	r3, r2
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	440b      	add	r3, r1
 800d044:	3323      	adds	r3, #35	@ 0x23
 800d046:	2200      	movs	r2, #0
 800d048:	701a      	strb	r2, [r3, #0]

    /* Close EP OUT */
    (void) USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d04a:	4b32      	ldr	r3, [pc, #200]	@ (800d114 <USBD_CDC_DeInit+0xfc>)
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	4619      	mov	r1, r3
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f002 fa42 	bl	800f4da <USBD_LL_CloseEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d056:	4b2f      	ldr	r3, [pc, #188]	@ (800d114 <USBD_CDC_DeInit+0xfc>)
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	f003 020f 	and.w	r2, r3, #15
 800d05e:	6879      	ldr	r1, [r7, #4]
 800d060:	4613      	mov	r3, r2
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	4413      	add	r3, r2
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	440b      	add	r3, r1
 800d06a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d06e:	2200      	movs	r2, #0
 800d070:	701a      	strb	r2, [r3, #0]

    /* Close Command IN EP */
    (void) USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d072:	4b29      	ldr	r3, [pc, #164]	@ (800d118 <USBD_CDC_DeInit+0x100>)
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	4619      	mov	r1, r3
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f002 fa2e 	bl	800f4da <USBD_LL_CloseEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d07e:	4b26      	ldr	r3, [pc, #152]	@ (800d118 <USBD_CDC_DeInit+0x100>)
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	f003 020f 	and.w	r2, r3, #15
 800d086:	6879      	ldr	r1, [r7, #4]
 800d088:	4613      	mov	r3, r2
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	4413      	add	r3, r2
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	440b      	add	r3, r1
 800d092:	3323      	adds	r3, #35	@ 0x23
 800d094:	2200      	movs	r2, #0
 800d096:	701a      	strb	r2, [r3, #0]
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d098:	4b1f      	ldr	r3, [pc, #124]	@ (800d118 <USBD_CDC_DeInit+0x100>)
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	f003 020f 	and.w	r2, r3, #15
 800d0a0:	6879      	ldr	r1, [r7, #4]
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	4413      	add	r3, r2
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	440b      	add	r3, r1
 800d0ac:	331c      	adds	r3, #28
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	601a      	str	r2, [r3, #0]

    /* DeInit  physical Interface components */
    if (pdev->pClassDataCmsit[pdev->classId] != NULL) {
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	32b0      	adds	r2, #176	@ 0xb0
 800d0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d01f      	beq.n	800d104 <USBD_CDC_DeInit+0xec>
        ((USBD_CDC_ItfTypeDef*) pdev->pUserData[pdev->classId])->DeInit();
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	33b0      	adds	r3, #176	@ 0xb0
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	4413      	add	r3, r2
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	4798      	blx	r3
        (void) USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	32b0      	adds	r2, #176	@ 0xb0
 800d0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f002 fb02 	bl	800f6f0 <USBD_static_free>
        pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	32b0      	adds	r2, #176	@ 0xb0
 800d0f6:	2100      	movs	r1, #0
 800d0f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pdev->pClassData = NULL;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    }

    return (uint8_t) USBD_OK;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	20000093 	.word	0x20000093
 800d114:	20000094 	.word	0x20000094
 800d118:	20000095 	.word	0x20000095

0800d11c <USBD_CDC_Setup>:
 *         Handle the CDC specific requests
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b086      	sub	sp, #24
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	32b0      	adds	r2, #176	@ 0xb0
 800d130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d134:	613b      	str	r3, [r7, #16]
    uint16_t len;
    uint8_t ifalt = 0U;
 800d136:	2300      	movs	r3, #0
 800d138:	737b      	strb	r3, [r7, #13]
    uint16_t status_info = 0U;
 800d13a:	2300      	movs	r3, #0
 800d13c:	817b      	strh	r3, [r7, #10]
    USBD_StatusTypeDef ret = USBD_OK;
 800d13e:	2300      	movs	r3, #0
 800d140:	75fb      	strb	r3, [r7, #23]

    if (hcdc == NULL) {
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d101      	bne.n	800d14c <USBD_CDC_Setup+0x30>
        return (uint8_t) USBD_FAIL;
 800d148:	2303      	movs	r3, #3
 800d14a:	e0bf      	b.n	800d2cc <USBD_CDC_Setup+0x1b0>
    }

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d154:	2b00      	cmp	r3, #0
 800d156:	d050      	beq.n	800d1fa <USBD_CDC_Setup+0xde>
 800d158:	2b20      	cmp	r3, #32
 800d15a:	f040 80af 	bne.w	800d2bc <USBD_CDC_Setup+0x1a0>
    case USB_REQ_TYPE_CLASS:
        if (req->wLength != 0U) {
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	88db      	ldrh	r3, [r3, #6]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d03a      	beq.n	800d1dc <USBD_CDC_Setup+0xc0>
            if ((req->bmRequest & 0x80U) != 0U) {
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	b25b      	sxtb	r3, r3
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	da1b      	bge.n	800d1a8 <USBD_CDC_Setup+0x8c>
                ((USBD_CDC_ItfTypeDef*) pdev->pUserData[pdev->classId])->Control(req->bRequest, (uint8_t*) hcdc->data, req->wLength);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d176:	687a      	ldr	r2, [r7, #4]
 800d178:	33b0      	adds	r3, #176	@ 0xb0
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	4413      	add	r3, r2
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	7850      	ldrb	r0, [r2, #1]
 800d186:	6939      	ldr	r1, [r7, #16]
 800d188:	683a      	ldr	r2, [r7, #0]
 800d18a:	88d2      	ldrh	r2, [r2, #6]
 800d18c:	4798      	blx	r3

                len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	88db      	ldrh	r3, [r3, #6]
 800d192:	2b07      	cmp	r3, #7
 800d194:	bf28      	it	cs
 800d196:	2307      	movcs	r3, #7
 800d198:	81fb      	strh	r3, [r7, #14]
                (void) USBD_CtlSendData(pdev, (uint8_t*) hcdc->data, len);
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	89fa      	ldrh	r2, [r7, #14]
 800d19e:	4619      	mov	r1, r3
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f001 fd69 	bl	800ec78 <USBD_CtlSendData>
                (void) USBD_CtlPrepareRx(pdev, (uint8_t*) hcdc->data, hcdc->CmdLength);
            }
        } else {
            ((USBD_CDC_ItfTypeDef*) pdev->pUserData[pdev->classId])->Control(req->bRequest, (uint8_t*) req, 0U);
        }
        break;
 800d1a6:	e090      	b.n	800d2ca <USBD_CDC_Setup+0x1ae>
                hcdc->CmdOpCode = req->bRequest;
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	785a      	ldrb	r2, [r3, #1]
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
                hcdc->CmdLength = (uint8_t) MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	88db      	ldrh	r3, [r3, #6]
 800d1b6:	2b3f      	cmp	r3, #63	@ 0x3f
 800d1b8:	d803      	bhi.n	800d1c2 <USBD_CDC_Setup+0xa6>
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	88db      	ldrh	r3, [r3, #6]
 800d1be:	b2da      	uxtb	r2, r3
 800d1c0:	e000      	b.n	800d1c4 <USBD_CDC_Setup+0xa8>
 800d1c2:	2240      	movs	r2, #64	@ 0x40
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
                (void) USBD_CtlPrepareRx(pdev, (uint8_t*) hcdc->data, hcdc->CmdLength);
 800d1ca:	6939      	ldr	r1, [r7, #16]
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f001 fd7e 	bl	800ecd6 <USBD_CtlPrepareRx>
        break;
 800d1da:	e076      	b.n	800d2ca <USBD_CDC_Setup+0x1ae>
            ((USBD_CDC_ItfTypeDef*) pdev->pUserData[pdev->classId])->Control(req->bRequest, (uint8_t*) req, 0U);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	33b0      	adds	r3, #176	@ 0xb0
 800d1e6:	009b      	lsls	r3, r3, #2
 800d1e8:	4413      	add	r3, r2
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	689b      	ldr	r3, [r3, #8]
 800d1ee:	683a      	ldr	r2, [r7, #0]
 800d1f0:	7850      	ldrb	r0, [r2, #1]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	6839      	ldr	r1, [r7, #0]
 800d1f6:	4798      	blx	r3
        break;
 800d1f8:	e067      	b.n	800d2ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	785b      	ldrb	r3, [r3, #1]
 800d1fe:	2b0b      	cmp	r3, #11
 800d200:	d851      	bhi.n	800d2a6 <USBD_CDC_Setup+0x18a>
 800d202:	a201      	add	r2, pc, #4	@ (adr r2, 800d208 <USBD_CDC_Setup+0xec>)
 800d204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d208:	0800d239 	.word	0x0800d239
 800d20c:	0800d2b5 	.word	0x0800d2b5
 800d210:	0800d2a7 	.word	0x0800d2a7
 800d214:	0800d2a7 	.word	0x0800d2a7
 800d218:	0800d2a7 	.word	0x0800d2a7
 800d21c:	0800d2a7 	.word	0x0800d2a7
 800d220:	0800d2a7 	.word	0x0800d2a7
 800d224:	0800d2a7 	.word	0x0800d2a7
 800d228:	0800d2a7 	.word	0x0800d2a7
 800d22c:	0800d2a7 	.word	0x0800d2a7
 800d230:	0800d263 	.word	0x0800d263
 800d234:	0800d28d 	.word	0x0800d28d
        case USB_REQ_GET_STATUS:
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	2b03      	cmp	r3, #3
 800d242:	d107      	bne.n	800d254 <USBD_CDC_Setup+0x138>
                (void) USBD_CtlSendData(pdev, (uint8_t*) &status_info, 2U);
 800d244:	f107 030a 	add.w	r3, r7, #10
 800d248:	2202      	movs	r2, #2
 800d24a:	4619      	mov	r1, r3
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f001 fd13 	bl	800ec78 <USBD_CtlSendData>
            } else {
                USBD_CtlError(pdev, req);
                ret = USBD_FAIL;
            }
            break;
 800d252:	e032      	b.n	800d2ba <USBD_CDC_Setup+0x19e>
                USBD_CtlError(pdev, req);
 800d254:	6839      	ldr	r1, [r7, #0]
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f001 fc91 	bl	800eb7e <USBD_CtlError>
                ret = USBD_FAIL;
 800d25c:	2303      	movs	r3, #3
 800d25e:	75fb      	strb	r3, [r7, #23]
            break;
 800d260:	e02b      	b.n	800d2ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	2b03      	cmp	r3, #3
 800d26c:	d107      	bne.n	800d27e <USBD_CDC_Setup+0x162>
                (void) USBD_CtlSendData(pdev, &ifalt, 1U);
 800d26e:	f107 030d 	add.w	r3, r7, #13
 800d272:	2201      	movs	r2, #1
 800d274:	4619      	mov	r1, r3
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f001 fcfe 	bl	800ec78 <USBD_CtlSendData>
            } else {
                USBD_CtlError(pdev, req);
                ret = USBD_FAIL;
            }
            break;
 800d27c:	e01d      	b.n	800d2ba <USBD_CDC_Setup+0x19e>
                USBD_CtlError(pdev, req);
 800d27e:	6839      	ldr	r1, [r7, #0]
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f001 fc7c 	bl	800eb7e <USBD_CtlError>
                ret = USBD_FAIL;
 800d286:	2303      	movs	r3, #3
 800d288:	75fb      	strb	r3, [r7, #23]
            break;
 800d28a:	e016      	b.n	800d2ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
            if (pdev->dev_state != USBD_STATE_CONFIGURED) {
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d292:	b2db      	uxtb	r3, r3
 800d294:	2b03      	cmp	r3, #3
 800d296:	d00f      	beq.n	800d2b8 <USBD_CDC_Setup+0x19c>
                USBD_CtlError(pdev, req);
 800d298:	6839      	ldr	r1, [r7, #0]
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f001 fc6f 	bl	800eb7e <USBD_CtlError>
                ret = USBD_FAIL;
 800d2a0:	2303      	movs	r3, #3
 800d2a2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800d2a4:	e008      	b.n	800d2b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
            break;

        default:
            USBD_CtlError(pdev, req);
 800d2a6:	6839      	ldr	r1, [r7, #0]
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f001 fc68 	bl	800eb7e <USBD_CtlError>
            ret = USBD_FAIL;
 800d2ae:	2303      	movs	r3, #3
 800d2b0:	75fb      	strb	r3, [r7, #23]
            break;
 800d2b2:	e002      	b.n	800d2ba <USBD_CDC_Setup+0x19e>
            break;
 800d2b4:	bf00      	nop
 800d2b6:	e008      	b.n	800d2ca <USBD_CDC_Setup+0x1ae>
            break;
 800d2b8:	bf00      	nop
        }
        break;
 800d2ba:	e006      	b.n	800d2ca <USBD_CDC_Setup+0x1ae>

    default:
        USBD_CtlError(pdev, req);
 800d2bc:	6839      	ldr	r1, [r7, #0]
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f001 fc5d 	bl	800eb7e <USBD_CtlError>
        ret = USBD_FAIL;
 800d2c4:	2303      	movs	r3, #3
 800d2c6:	75fb      	strb	r3, [r7, #23]
        break;
 800d2c8:	bf00      	nop
    }

    return (uint8_t) ret;
 800d2ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3718      	adds	r7, #24
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <USBD_CDC_DataIn>:
 *         Data sent on non-control IN endpoint
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	460b      	mov	r3, r1
 800d2de:	70fb      	strb	r3, [r7, #3]
    USBD_CDC_HandleTypeDef *hcdc;
    PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d2e6:	60fb      	str	r3, [r7, #12]

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	32b0      	adds	r2, #176	@ 0xb0
 800d2f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d101      	bne.n	800d2fe <USBD_CDC_DataIn+0x2a>
        return (uint8_t) USBD_FAIL;
 800d2fa:	2303      	movs	r3, #3
 800d2fc:	e065      	b.n	800d3ca <USBD_CDC_DataIn+0xf6>
    }

    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	32b0      	adds	r2, #176	@ 0xb0
 800d308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d30c:	60bb      	str	r3, [r7, #8]

    if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) && ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U)) {
 800d30e:	78fb      	ldrb	r3, [r7, #3]
 800d310:	f003 020f 	and.w	r2, r3, #15
 800d314:	6879      	ldr	r1, [r7, #4]
 800d316:	4613      	mov	r3, r2
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	4413      	add	r3, r2
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	440b      	add	r3, r1
 800d320:	3314      	adds	r3, #20
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d02f      	beq.n	800d388 <USBD_CDC_DataIn+0xb4>
 800d328:	78fb      	ldrb	r3, [r7, #3]
 800d32a:	f003 020f 	and.w	r2, r3, #15
 800d32e:	6879      	ldr	r1, [r7, #4]
 800d330:	4613      	mov	r3, r2
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	4413      	add	r3, r2
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	440b      	add	r3, r1
 800d33a:	3314      	adds	r3, #20
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	78fb      	ldrb	r3, [r7, #3]
 800d340:	f003 010f 	and.w	r1, r3, #15
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	460b      	mov	r3, r1
 800d348:	00db      	lsls	r3, r3, #3
 800d34a:	440b      	add	r3, r1
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	4403      	add	r3, r0
 800d350:	331c      	adds	r3, #28
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	fbb2 f1f3 	udiv	r1, r2, r3
 800d358:	fb01 f303 	mul.w	r3, r1, r3
 800d35c:	1ad3      	subs	r3, r2, r3
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d112      	bne.n	800d388 <USBD_CDC_DataIn+0xb4>
        /* Update the packet total length */
        pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d362:	78fb      	ldrb	r3, [r7, #3]
 800d364:	f003 020f 	and.w	r2, r3, #15
 800d368:	6879      	ldr	r1, [r7, #4]
 800d36a:	4613      	mov	r3, r2
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	4413      	add	r3, r2
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	440b      	add	r3, r1
 800d374:	3314      	adds	r3, #20
 800d376:	2200      	movs	r2, #0
 800d378:	601a      	str	r2, [r3, #0]

        /* Send ZLP */
        (void) USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d37a:	78f9      	ldrb	r1, [r7, #3]
 800d37c:	2300      	movs	r3, #0
 800d37e:	2200      	movs	r2, #0
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f002 f952 	bl	800f62a <USBD_LL_Transmit>
 800d386:	e01f      	b.n	800d3c8 <USBD_CDC_DataIn+0xf4>
    } else {
        hcdc->TxState = 0U;
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	2200      	movs	r2, #0
 800d38c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

        if (((USBD_CDC_ItfTypeDef*) pdev->pUserData[pdev->classId])->TransmitCplt != NULL) {
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	33b0      	adds	r3, #176	@ 0xb0
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	4413      	add	r3, r2
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d010      	beq.n	800d3c8 <USBD_CDC_DataIn+0xf4>
            ((USBD_CDC_ItfTypeDef*) pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	33b0      	adds	r3, #176	@ 0xb0
 800d3b0:	009b      	lsls	r3, r3, #2
 800d3b2:	4413      	add	r3, r2
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	691b      	ldr	r3, [r3, #16]
 800d3b8:	68ba      	ldr	r2, [r7, #8]
 800d3ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d3be:	68ba      	ldr	r2, [r7, #8]
 800d3c0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d3c4:	78fa      	ldrb	r2, [r7, #3]
 800d3c6:	4798      	blx	r3
        }
    }

    return (uint8_t) USBD_OK;
 800d3c8:	2300      	movs	r3, #0
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <USBD_CDC_DataOut>:
 *         Data received on non-control Out endpoint
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b084      	sub	sp, #16
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
 800d3da:	460b      	mov	r3, r1
 800d3dc:	70fb      	strb	r3, [r7, #3]
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	32b0      	adds	r2, #176	@ 0xb0
 800d3e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3ec:	60fb      	str	r3, [r7, #12]

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	32b0      	adds	r2, #176	@ 0xb0
 800d3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d101      	bne.n	800d404 <USBD_CDC_DataOut+0x32>
        return (uint8_t) USBD_FAIL;
 800d400:	2303      	movs	r3, #3
 800d402:	e01a      	b.n	800d43a <USBD_CDC_DataOut+0x68>
    }

    /* Get the received data length */
    hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d404:	78fb      	ldrb	r3, [r7, #3]
 800d406:	4619      	mov	r1, r3
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f002 f950 	bl	800f6ae <USBD_LL_GetRxDataSize>
 800d40e:	4602      	mov	r2, r0
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

    /* USB data will be immediately processed, this allow next USB traffic being
     NAKed till the end of the application Xfer */

    ((USBD_CDC_ItfTypeDef*) pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d41c:	687a      	ldr	r2, [r7, #4]
 800d41e:	33b0      	adds	r3, #176	@ 0xb0
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	4413      	add	r3, r2
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d42e:	68fa      	ldr	r2, [r7, #12]
 800d430:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d434:	4611      	mov	r1, r2
 800d436:	4798      	blx	r3

    return (uint8_t) USBD_OK;
 800d438:	2300      	movs	r3, #0
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3710      	adds	r7, #16
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}

0800d442 <USBD_CDC_EP0_RxReady>:
 * @brief  USBD_CDC_EP0_RxReady
 *         Handle EP0 Rx Ready event
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev) {
 800d442:	b580      	push	{r7, lr}
 800d444:	b084      	sub	sp, #16
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	32b0      	adds	r2, #176	@ 0xb0
 800d454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d458:	60fb      	str	r3, [r7, #12]

    if (hcdc == NULL) {
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d101      	bne.n	800d464 <USBD_CDC_EP0_RxReady+0x22>
        return (uint8_t) USBD_FAIL;
 800d460:	2303      	movs	r3, #3
 800d462:	e024      	b.n	800d4ae <USBD_CDC_EP0_RxReady+0x6c>
    }

    if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU)) {
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d46a:	687a      	ldr	r2, [r7, #4]
 800d46c:	33b0      	adds	r3, #176	@ 0xb0
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	4413      	add	r3, r2
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d019      	beq.n	800d4ac <USBD_CDC_EP0_RxReady+0x6a>
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d47e:	2bff      	cmp	r3, #255	@ 0xff
 800d480:	d014      	beq.n	800d4ac <USBD_CDC_EP0_RxReady+0x6a>
        ((USBD_CDC_ItfTypeDef*) pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode, (uint8_t*) hcdc->data, (uint16_t) hcdc->CmdLength);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	33b0      	adds	r3, #176	@ 0xb0
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	4413      	add	r3, r2
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	689b      	ldr	r3, [r3, #8]
 800d494:	68fa      	ldr	r2, [r7, #12]
 800d496:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
 800d49a:	68f9      	ldr	r1, [r7, #12]
 800d49c:	68fa      	ldr	r2, [r7, #12]
 800d49e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
 800d4a2:	4798      	blx	r3
        hcdc->CmdOpCode = 0xFFU;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	22ff      	movs	r2, #255	@ 0xff
 800d4a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
    }

    return (uint8_t) USBD_OK;
 800d4ac:	2300      	movs	r3, #0
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
	...

0800d4b8 <USBD_CDC_GetFSCfgDesc>:
 * @brief  USBD_CDC_GetFSCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_CDC_GetFSCfgDesc(uint16_t *length) {
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b086      	sub	sp, #24
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d4c0:	2182      	movs	r1, #130	@ 0x82
 800d4c2:	4818      	ldr	r0, [pc, #96]	@ (800d524 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d4c4:	f000 fd22 	bl	800df0c <USBD_GetEpDesc>
 800d4c8:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d4ca:	2101      	movs	r1, #1
 800d4cc:	4815      	ldr	r0, [pc, #84]	@ (800d524 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d4ce:	f000 fd1d 	bl	800df0c <USBD_GetEpDesc>
 800d4d2:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d4d4:	2181      	movs	r1, #129	@ 0x81
 800d4d6:	4813      	ldr	r0, [pc, #76]	@ (800d524 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d4d8:	f000 fd18 	bl	800df0c <USBD_GetEpDesc>
 800d4dc:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d002      	beq.n	800d4ea <USBD_CDC_GetFSCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	2210      	movs	r2, #16
 800d4e8:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d006      	beq.n	800d4fe <USBD_CDC_GetFSCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d4f8:	711a      	strb	r2, [r3, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d006      	beq.n	800d512 <USBD_CDC_GetFSCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2200      	movs	r2, #0
 800d508:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d50c:	711a      	strb	r2, [r3, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t) sizeof(USBD_CDC_CfgDesc);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2243      	movs	r2, #67	@ 0x43
 800d516:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 800d518:	4b02      	ldr	r3, [pc, #8]	@ (800d524 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3718      	adds	r7, #24
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	20000050 	.word	0x20000050

0800d528 <USBD_CDC_GetHSCfgDesc>:
 * @brief  USBD_CDC_GetHSCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_CDC_GetHSCfgDesc(uint16_t *length) {
 800d528:	b580      	push	{r7, lr}
 800d52a:	b086      	sub	sp, #24
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d530:	2182      	movs	r1, #130	@ 0x82
 800d532:	4818      	ldr	r0, [pc, #96]	@ (800d594 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d534:	f000 fcea 	bl	800df0c <USBD_GetEpDesc>
 800d538:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d53a:	2101      	movs	r1, #1
 800d53c:	4815      	ldr	r0, [pc, #84]	@ (800d594 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d53e:	f000 fce5 	bl	800df0c <USBD_GetEpDesc>
 800d542:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d544:	2181      	movs	r1, #129	@ 0x81
 800d546:	4813      	ldr	r0, [pc, #76]	@ (800d594 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d548:	f000 fce0 	bl	800df0c <USBD_GetEpDesc>
 800d54c:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d002      	beq.n	800d55a <USBD_CDC_GetHSCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	2210      	movs	r2, #16
 800d558:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d006      	beq.n	800d56e <USBD_CDC_GetHSCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	2200      	movs	r2, #0
 800d564:	711a      	strb	r2, [r3, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	f042 0202 	orr.w	r2, r2, #2
 800d56c:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d006      	beq.n	800d582 <USBD_CDC_GetHSCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2200      	movs	r2, #0
 800d578:	711a      	strb	r2, [r3, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	f042 0202 	orr.w	r2, r2, #2
 800d580:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t) sizeof(USBD_CDC_CfgDesc);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2243      	movs	r2, #67	@ 0x43
 800d586:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 800d588:	4b02      	ldr	r3, [pc, #8]	@ (800d594 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3718      	adds	r7, #24
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	20000050 	.word	0x20000050

0800d598 <USBD_CDC_GetOtherSpeedCfgDesc>:
 * @brief  USBD_CDC_GetOtherSpeedCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length) {
 800d598:	b580      	push	{r7, lr}
 800d59a:	b086      	sub	sp, #24
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d5a0:	2182      	movs	r1, #130	@ 0x82
 800d5a2:	4818      	ldr	r0, [pc, #96]	@ (800d604 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d5a4:	f000 fcb2 	bl	800df0c <USBD_GetEpDesc>
 800d5a8:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d5aa:	2101      	movs	r1, #1
 800d5ac:	4815      	ldr	r0, [pc, #84]	@ (800d604 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d5ae:	f000 fcad 	bl	800df0c <USBD_GetEpDesc>
 800d5b2:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d5b4:	2181      	movs	r1, #129	@ 0x81
 800d5b6:	4813      	ldr	r0, [pc, #76]	@ (800d604 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d5b8:	f000 fca8 	bl	800df0c <USBD_GetEpDesc>
 800d5bc:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d002      	beq.n	800d5ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	2210      	movs	r2, #16
 800d5c8:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d006      	beq.n	800d5de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d5d8:	711a      	strb	r2, [r3, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d006      	beq.n	800d5f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d5ec:	711a      	strb	r2, [r3, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t) sizeof(USBD_CDC_CfgDesc);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2243      	movs	r2, #67	@ 0x43
 800d5f6:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 800d5f8:	4b02      	ldr	r3, [pc, #8]	@ (800d604 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3718      	adds	r7, #24
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	20000050 	.word	0x20000050

0800d608 <USBD_CDC_GetDeviceQualifierDescriptor>:
 * @brief  USBD_CDC_GetDeviceQualifierDescriptor
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
uint8_t* USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length) {
 800d608:	b480      	push	{r7}
 800d60a:	b083      	sub	sp, #12
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
    *length = (uint16_t) sizeof(USBD_CDC_DeviceQualifierDesc);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	220a      	movs	r2, #10
 800d614:	801a      	strh	r2, [r3, #0]

    return USBD_CDC_DeviceQualifierDesc;
 800d616:	4b03      	ldr	r3, [pc, #12]	@ (800d624 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d618:	4618      	mov	r0, r3
 800d61a:	370c      	adds	r7, #12
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr
 800d624:	2000000c 	.word	0x2000000c

0800d628 <USBD_CDC_RegisterInterface>:
 * @brief  USBD_CDC_RegisterInterface
 * @param  pdev: device instance
 * @param  fops: CD  Interface callback
 * @retval status
 */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_CDC_ItfTypeDef *fops) {
 800d628:	b480      	push	{r7}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	6039      	str	r1, [r7, #0]
    if (fops == NULL) {
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d101      	bne.n	800d63c <USBD_CDC_RegisterInterface+0x14>
        return (uint8_t) USBD_FAIL;
 800d638:	2303      	movs	r3, #3
 800d63a:	e009      	b.n	800d650 <USBD_CDC_RegisterInterface+0x28>
    }

    pdev->pUserData[pdev->classId] = fops;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	33b0      	adds	r3, #176	@ 0xb0
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	4413      	add	r3, r2
 800d64a:	683a      	ldr	r2, [r7, #0]
 800d64c:	605a      	str	r2, [r3, #4]

    return (uint8_t) USBD_OK;
 800d64e:	2300      	movs	r3, #0
}
 800d650:	4618      	mov	r0, r3
 800d652:	370c      	adds	r7, #12
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr

0800d65c <USBD_CDC_SetTxBuffer>:
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff, uint32_t length) {
 800d65c:	b480      	push	{r7}
 800d65e:	b087      	sub	sp, #28
 800d660:	af00      	add	r7, sp, #0
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	60b9      	str	r1, [r7, #8]
 800d666:	607a      	str	r2, [r7, #4]
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	32b0      	adds	r2, #176	@ 0xb0
 800d672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d676:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

    if (hcdc == NULL) {
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d101      	bne.n	800d682 <USBD_CDC_SetTxBuffer+0x26>
        return (uint8_t) USBD_FAIL;
 800d67e:	2303      	movs	r3, #3
 800d680:	e008      	b.n	800d694 <USBD_CDC_SetTxBuffer+0x38>
    }

    hcdc->TxBuffer = pbuff;
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	68ba      	ldr	r2, [r7, #8]
 800d686:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
    hcdc->TxLength = length;
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

    return (uint8_t) USBD_OK;
 800d692:	2300      	movs	r3, #0
}
 800d694:	4618      	mov	r0, r3
 800d696:	371c      	adds	r7, #28
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <USBD_CDC_SetRxBuffer>:
 * @brief  USBD_CDC_SetRxBuffer
 * @param  pdev: device instance
 * @param  pbuff: Rx Buffer
 * @retval status
 */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff) {
 800d6a0:	b480      	push	{r7}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	32b0      	adds	r2, #176	@ 0xb0
 800d6b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6b8:	60fb      	str	r3, [r7, #12]

    if (hcdc == NULL) {
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d101      	bne.n	800d6c4 <USBD_CDC_SetRxBuffer+0x24>
        return (uint8_t) USBD_FAIL;
 800d6c0:	2303      	movs	r3, #3
 800d6c2:	e004      	b.n	800d6ce <USBD_CDC_SetRxBuffer+0x2e>
    }

    hcdc->RxBuffer = pbuff;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	683a      	ldr	r2, [r7, #0]
 800d6c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

    return (uint8_t) USBD_OK;
 800d6cc:	2300      	movs	r3, #0
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3714      	adds	r7, #20
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr
	...

0800d6dc <USBD_CDC_ReceivePacket>:
 * @brief  USBD_CDC_ReceivePacket
 *         prepare OUT Endpoint for reception
 * @param  pdev: device instance
 * @retval status
 */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev) {
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b084      	sub	sp, #16
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	32b0      	adds	r2, #176	@ 0xb0
 800d6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	32b0      	adds	r2, #176	@ 0xb0
 800d6fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d101      	bne.n	800d70a <USBD_CDC_ReceivePacket+0x2e>
        return (uint8_t) USBD_FAIL;
 800d706:	2303      	movs	r3, #3
 800d708:	e018      	b.n	800d73c <USBD_CDC_ReceivePacket+0x60>
    }

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	7c1b      	ldrb	r3, [r3, #16]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d10a      	bne.n	800d728 <USBD_CDC_ReceivePacket+0x4c>
        /* Prepare Out endpoint to receive next packet */
        (void) USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d712:	4b0c      	ldr	r3, [pc, #48]	@ (800d744 <USBD_CDC_ReceivePacket+0x68>)
 800d714:	7819      	ldrb	r1, [r3, #0]
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d71c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f001 ffa3 	bl	800f66c <USBD_LL_PrepareReceive>
 800d726:	e008      	b.n	800d73a <USBD_CDC_ReceivePacket+0x5e>
        CDC_DATA_HS_OUT_PACKET_SIZE);
    } else {
        /* Prepare Out endpoint to receive next packet */
        (void) USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d728:	4b06      	ldr	r3, [pc, #24]	@ (800d744 <USBD_CDC_ReceivePacket+0x68>)
 800d72a:	7819      	ldrb	r1, [r3, #0]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d732:	2340      	movs	r3, #64	@ 0x40
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f001 ff99 	bl	800f66c <USBD_LL_PrepareReceive>
        CDC_DATA_FS_OUT_PACKET_SIZE);
    }

    return (uint8_t) USBD_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3710      	adds	r7, #16
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}
 800d744:	20000094 	.word	0x20000094

0800d748 <USBD_Init>:
 * @param  pdev: device instance
 * @param  pdesc: Descriptor structure address
 * @param  id: Low level core index
 * @retval status: USBD Status
 */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id) {
 800d748:	b580      	push	{r7, lr}
 800d74a:	b086      	sub	sp, #24
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	4613      	mov	r3, r2
 800d754:	71fb      	strb	r3, [r7, #7]
    USBD_StatusTypeDef ret;

    /* Check whether the USB Host handle is valid */
    if (pdev == NULL) {
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d101      	bne.n	800d760 <USBD_Init+0x18>
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
        return USBD_FAIL;
 800d75c:	2303      	movs	r3, #3
 800d75e:	e01f      	b.n	800d7a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
    /* Unlink previous class*/
    pdev->pClass[0] = NULL;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2200      	movs	r2, #0
 800d764:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
    pdev->pUserData[0] = NULL;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

    pdev->pConfDesc = NULL;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2200      	movs	r2, #0
 800d774:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

    /* Assign USBD Descriptors */
    if (pdesc != NULL) {
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d003      	beq.n	800d786 <USBD_Init+0x3e>
        pdev->pDesc = pdesc;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	68ba      	ldr	r2, [r7, #8]
 800d782:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    }

    /* Set Device initial State */
    pdev->dev_state = USBD_STATE_DEFAULT;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2201      	movs	r2, #1
 800d78a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    pdev->id = id;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	79fa      	ldrb	r2, [r7, #7]
 800d792:	701a      	strb	r2, [r3, #0]

    /* Initialize low level driver */
    ret = USBD_LL_Init(pdev);
 800d794:	68f8      	ldr	r0, [r7, #12]
 800d796:	f001 fe13 	bl	800f3c0 <USBD_LL_Init>
 800d79a:	4603      	mov	r3, r0
 800d79c:	75fb      	strb	r3, [r7, #23]

    return ret;
 800d79e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3718      	adds	r7, #24
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <USBD_RegisterClass>:
 *         Link class driver to Device Core.
 * @param  pdev: Device Handle
 * @param  pclass: Class handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass) {
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	6039      	str	r1, [r7, #0]
    uint16_t len = 0U;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	81fb      	strh	r3, [r7, #14]

    if (pclass == NULL) {
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d101      	bne.n	800d7c0 <USBD_RegisterClass+0x18>
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
        return USBD_FAIL;
 800d7bc:	2303      	movs	r3, #3
 800d7be:	e025      	b.n	800d80c <USBD_RegisterClass+0x64>
    }

    /* link the class to the USB Device handle */
    pdev->pClass[0] = pclass;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	683a      	ldr	r2, [r7, #0]
 800d7c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
    if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL) {
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	32ae      	adds	r2, #174	@ 0xae
 800d7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d00f      	beq.n	800d7fc <USBD_RegisterClass+0x54>
        pdev->pConfDesc = (void*) pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	32ae      	adds	r2, #174	@ 0xae
 800d7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ec:	f107 020e 	add.w	r2, r7, #14
 800d7f0:	4610      	mov	r0, r2
 800d7f2:	4798      	blx	r3
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
    }
#endif /* USE_USB_FS */

    /* Increment the NumClasses */
    pdev->NumClasses++;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d802:	1c5a      	adds	r2, r3, #1
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

    return USBD_OK;
 800d80a:	2300      	movs	r3, #0
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <USBD_Start>:
 * @brief  USBD_Start
 *         Start the USB Device Core.
 * @param  pdev: Device Handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev) {
 800d814:	b580      	push	{r7, lr}
 800d816:	b082      	sub	sp, #8
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

    /* Start the low level driver  */
    return USBD_LL_Start(pdev);
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f001 fe1b 	bl	800f458 <USBD_LL_Start>
 800d822:	4603      	mov	r3, r0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <USBD_RunTestMode>:
 * @brief  USBD_RunTestMode
 *         Launch test mode process
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev) {
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  return ret;
#else
    /* Prevent unused argument compilation warning */
    UNUSED(pdev);

    return USBD_OK;
 800d834:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d836:	4618      	mov	r0, r3
 800d838:	370c      	adds	r7, #12
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr

0800d842 <USBD_SetClassConfig>:
 * @param  pdev: device instance
 * @param  cfgidx: configuration index
 * @retval status
 */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 800d842:	b580      	push	{r7, lr}
 800d844:	b084      	sub	sp, #16
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
 800d84a:	460b      	mov	r3, r1
 800d84c:	70fb      	strb	r3, [r7, #3]
    USBD_StatusTypeDef ret = USBD_OK;
 800d84e:	2300      	movs	r3, #0
 800d850:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
    if (pdev->pClass[0] != NULL) {
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d009      	beq.n	800d870 <USBD_SetClassConfig+0x2e>
        /* Set configuration and Start the Class */
        ret = (USBD_StatusTypeDef) pdev->pClass[0]->Init(pdev, cfgidx);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	78fa      	ldrb	r2, [r7, #3]
 800d866:	4611      	mov	r1, r2
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	4798      	blx	r3
 800d86c:	4603      	mov	r3, r0
 800d86e:	73fb      	strb	r3, [r7, #15]
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 800d870:	7bfb      	ldrb	r3, [r7, #15]
}
 800d872:	4618      	mov	r0, r3
 800d874:	3710      	adds	r7, #16
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <USBD_ClrClassConfig>:
 *         Clear current configuration
 * @param  pdev: device instance
 * @param  cfgidx: configuration index
 * @retval status
 */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b084      	sub	sp, #16
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
 800d882:	460b      	mov	r3, r1
 800d884:	70fb      	strb	r3, [r7, #3]
    USBD_StatusTypeDef ret = USBD_OK;
 800d886:	2300      	movs	r3, #0
 800d888:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
    /* Clear configuration  and De-initialize the Class process */
    if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U) {
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	78fa      	ldrb	r2, [r7, #3]
 800d894:	4611      	mov	r1, r2
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	4798      	blx	r3
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d001      	beq.n	800d8a4 <USBD_ClrClassConfig+0x2a>
        ret = USBD_FAIL;
 800d8a0:	2303      	movs	r3, #3
 800d8a2:	73fb      	strb	r3, [r7, #15]
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 800d8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3710      	adds	r7, #16
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}

0800d8ae <USBD_LL_SetupStage>:
 *         Handle the setup stage
 * @param  pdev: device instance
 * @param  psetup: setup packet buffer pointer
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup) {
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	b084      	sub	sp, #16
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
 800d8b6:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret;

    USBD_ParseSetupRequest(&pdev->request, psetup);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d8be:	6839      	ldr	r1, [r7, #0]
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f001 f922 	bl	800eb0a <USBD_ParseSetupRequest>

    pdev->ep0_state = USBD_EP0_SETUP;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

    pdev->ep0_data_len = pdev->request.wLength;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

    switch (pdev->request.bmRequest & 0x1FU) {
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d8e2:	f003 031f 	and.w	r3, r3, #31
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d01a      	beq.n	800d920 <USBD_LL_SetupStage+0x72>
 800d8ea:	2b02      	cmp	r3, #2
 800d8ec:	d822      	bhi.n	800d934 <USBD_LL_SetupStage+0x86>
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d002      	beq.n	800d8f8 <USBD_LL_SetupStage+0x4a>
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d00a      	beq.n	800d90c <USBD_LL_SetupStage+0x5e>
 800d8f6:	e01d      	b.n	800d934 <USBD_LL_SetupStage+0x86>
    case USB_REQ_RECIPIENT_DEVICE:
        ret = USBD_StdDevReq(pdev, &pdev->request);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d8fe:	4619      	mov	r1, r3
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 fb77 	bl	800dff4 <USBD_StdDevReq>
 800d906:	4603      	mov	r3, r0
 800d908:	73fb      	strb	r3, [r7, #15]
        break;
 800d90a:	e020      	b.n	800d94e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
        ret = USBD_StdItfReq(pdev, &pdev->request);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d912:	4619      	mov	r1, r3
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 fbdf 	bl	800e0d8 <USBD_StdItfReq>
 800d91a:	4603      	mov	r3, r0
 800d91c:	73fb      	strb	r3, [r7, #15]
        break;
 800d91e:	e016      	b.n	800d94e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
        ret = USBD_StdEPReq(pdev, &pdev->request);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d926:	4619      	mov	r1, r3
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 fc41 	bl	800e1b0 <USBD_StdEPReq>
 800d92e:	4603      	mov	r3, r0
 800d930:	73fb      	strb	r3, [r7, #15]
        break;
 800d932:	e00c      	b.n	800d94e <USBD_LL_SetupStage+0xa0>

    default:
        ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d93a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	4619      	mov	r1, r3
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f001 fde8 	bl	800f518 <USBD_LL_StallEP>
 800d948:	4603      	mov	r3, r0
 800d94a:	73fb      	strb	r3, [r7, #15]
        break;
 800d94c:	bf00      	nop
    }

    return ret;
 800d94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d950:	4618      	mov	r0, r3
 800d952:	3710      	adds	r7, #16
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <USBD_LL_DataOutStage>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @param  pdata: data pointer
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev, uint8_t epnum, uint8_t *pdata) {
 800d958:	b580      	push	{r7, lr}
 800d95a:	b086      	sub	sp, #24
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	460b      	mov	r3, r1
 800d962:	607a      	str	r2, [r7, #4]
 800d964:	72fb      	strb	r3, [r7, #11]
    USBD_EndpointTypeDef *pep;
    USBD_StatusTypeDef ret = USBD_OK;
 800d966:	2300      	movs	r3, #0
 800d968:	75fb      	strb	r3, [r7, #23]
    uint8_t idx;

    UNUSED(pdata);

    if (epnum == 0U) {
 800d96a:	7afb      	ldrb	r3, [r7, #11]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d177      	bne.n	800da60 <USBD_LL_DataOutStage+0x108>
        pep = &pdev->ep_out[0];
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d976:	613b      	str	r3, [r7, #16]

        if (pdev->ep0_state == USBD_EP0_DATA_OUT) {
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d97e:	2b03      	cmp	r3, #3
 800d980:	f040 80a1 	bne.w	800dac6 <USBD_LL_DataOutStage+0x16e>
            if (pep->rem_length > pep->maxpacket) {
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	693a      	ldr	r2, [r7, #16]
 800d98a:	8992      	ldrh	r2, [r2, #12]
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d91c      	bls.n	800d9ca <USBD_LL_DataOutStage+0x72>
                pep->rem_length -= pep->maxpacket;
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	693a      	ldr	r2, [r7, #16]
 800d996:	8992      	ldrh	r2, [r2, #12]
 800d998:	1a9a      	subs	r2, r3, r2
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	605a      	str	r2, [r3, #4]
                pep->pbuffer += pep->maxpacket;
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	691b      	ldr	r3, [r3, #16]
 800d9a2:	693a      	ldr	r2, [r7, #16]
 800d9a4:	8992      	ldrh	r2, [r2, #12]
 800d9a6:	441a      	add	r2, r3
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	611a      	str	r2, [r3, #16]

                (void) USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	6919      	ldr	r1, [r3, #16]
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	899b      	ldrh	r3, [r3, #12]
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	bf38      	it	cc
 800d9be:	4613      	movcc	r3, r2
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	68f8      	ldr	r0, [r7, #12]
 800d9c4:	f001 f9a8 	bl	800ed18 <USBD_CtlContinueRx>
 800d9c8:	e07d      	b.n	800dac6 <USBD_LL_DataOutStage+0x16e>
            } else {
                /* Find the class ID relative to the current request */
                switch (pdev->request.bmRequest & 0x1FU) {
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d9d0:	f003 031f 	and.w	r3, r3, #31
 800d9d4:	2b02      	cmp	r3, #2
 800d9d6:	d014      	beq.n	800da02 <USBD_LL_DataOutStage+0xaa>
 800d9d8:	2b02      	cmp	r3, #2
 800d9da:	d81d      	bhi.n	800da18 <USBD_LL_DataOutStage+0xc0>
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d002      	beq.n	800d9e6 <USBD_LL_DataOutStage+0x8e>
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d003      	beq.n	800d9ec <USBD_LL_DataOutStage+0x94>
 800d9e4:	e018      	b.n	800da18 <USBD_LL_DataOutStage+0xc0>
                case USB_REQ_RECIPIENT_DEVICE:
                    /* Device requests must be managed by the first instantiated class
                     (or duplicated by all classes for simplicity) */
                    idx = 0U;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	75bb      	strb	r3, [r7, #22]
                    break;
 800d9ea:	e018      	b.n	800da1e <USBD_LL_DataOutStage+0xc6>

                case USB_REQ_RECIPIENT_INTERFACE:
                    idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	68f8      	ldr	r0, [r7, #12]
 800d9f8:	f000 fa6e 	bl	800ded8 <USBD_CoreFindIF>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	75bb      	strb	r3, [r7, #22]
                    break;
 800da00:	e00d      	b.n	800da1e <USBD_LL_DataOutStage+0xc6>

                case USB_REQ_RECIPIENT_ENDPOINT:
                    idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	4619      	mov	r1, r3
 800da0c:	68f8      	ldr	r0, [r7, #12]
 800da0e:	f000 fa70 	bl	800def2 <USBD_CoreFindEP>
 800da12:	4603      	mov	r3, r0
 800da14:	75bb      	strb	r3, [r7, #22]
                    break;
 800da16:	e002      	b.n	800da1e <USBD_LL_DataOutStage+0xc6>

                default:
                    /* Back to the first class in case of doubt */
                    idx = 0U;
 800da18:	2300      	movs	r3, #0
 800da1a:	75bb      	strb	r3, [r7, #22]
                    break;
 800da1c:	bf00      	nop
                }

                if (idx < USBD_MAX_SUPPORTED_CLASS) {
 800da1e:	7dbb      	ldrb	r3, [r7, #22]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d119      	bne.n	800da58 <USBD_LL_DataOutStage+0x100>
                    /* Setup the class ID and route the request to the relative class function */
                    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	2b03      	cmp	r3, #3
 800da2e:	d113      	bne.n	800da58 <USBD_LL_DataOutStage+0x100>
                        if (pdev->pClass[idx]->EP0_RxReady != NULL) {
 800da30:	7dba      	ldrb	r2, [r7, #22]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	32ae      	adds	r2, #174	@ 0xae
 800da36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da3a:	691b      	ldr	r3, [r3, #16]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d00b      	beq.n	800da58 <USBD_LL_DataOutStage+0x100>
                            pdev->classId = idx;
 800da40:	7dba      	ldrb	r2, [r7, #22]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                            pdev->pClass[idx]->EP0_RxReady(pdev);
 800da48:	7dba      	ldrb	r2, [r7, #22]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	32ae      	adds	r2, #174	@ 0xae
 800da4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da52:	691b      	ldr	r3, [r3, #16]
 800da54:	68f8      	ldr	r0, [r7, #12]
 800da56:	4798      	blx	r3
                        }
                    }
                }

                (void) USBD_CtlSendStatus(pdev);
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f001 f96e 	bl	800ed3a <USBD_CtlSendStatus>
 800da5e:	e032      	b.n	800dac6 <USBD_LL_DataOutStage+0x16e>
            }
        }
    } else {
        /* Get the class index relative to this interface */
        idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800da60:	7afb      	ldrb	r3, [r7, #11]
 800da62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da66:	b2db      	uxtb	r3, r3
 800da68:	4619      	mov	r1, r3
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	f000 fa41 	bl	800def2 <USBD_CoreFindEP>
 800da70:	4603      	mov	r3, r0
 800da72:	75bb      	strb	r3, [r7, #22]

        if (((uint16_t) idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800da74:	7dbb      	ldrb	r3, [r7, #22]
 800da76:	2bff      	cmp	r3, #255	@ 0xff
 800da78:	d025      	beq.n	800dac6 <USBD_LL_DataOutStage+0x16e>
 800da7a:	7dbb      	ldrb	r3, [r7, #22]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d122      	bne.n	800dac6 <USBD_LL_DataOutStage+0x16e>
            /* Call the class data out function to manage the request */
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da86:	b2db      	uxtb	r3, r3
 800da88:	2b03      	cmp	r3, #3
 800da8a:	d117      	bne.n	800dabc <USBD_LL_DataOutStage+0x164>
                if (pdev->pClass[idx]->DataOut != NULL) {
 800da8c:	7dba      	ldrb	r2, [r7, #22]
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	32ae      	adds	r2, #174	@ 0xae
 800da92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da96:	699b      	ldr	r3, [r3, #24]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d00f      	beq.n	800dabc <USBD_LL_DataOutStage+0x164>
                    pdev->classId = idx;
 800da9c:	7dba      	ldrb	r2, [r7, #22]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                    ret = (USBD_StatusTypeDef) pdev->pClass[idx]->DataOut(pdev, epnum);
 800daa4:	7dba      	ldrb	r2, [r7, #22]
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	32ae      	adds	r2, #174	@ 0xae
 800daaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daae:	699b      	ldr	r3, [r3, #24]
 800dab0:	7afa      	ldrb	r2, [r7, #11]
 800dab2:	4611      	mov	r1, r2
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	4798      	blx	r3
 800dab8:	4603      	mov	r3, r0
 800daba:	75fb      	strb	r3, [r7, #23]
                }
            }
            if (ret != USBD_OK) {
 800dabc:	7dfb      	ldrb	r3, [r7, #23]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d001      	beq.n	800dac6 <USBD_LL_DataOutStage+0x16e>
                return ret;
 800dac2:	7dfb      	ldrb	r3, [r7, #23]
 800dac4:	e000      	b.n	800dac8 <USBD_LL_DataOutStage+0x170>
            }
        }
    }

    return USBD_OK;
 800dac6:	2300      	movs	r3, #0
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3718      	adds	r7, #24
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <USBD_LL_DataInStage>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @param  pdata: data pointer
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum, uint8_t *pdata) {
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b086      	sub	sp, #24
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	460b      	mov	r3, r1
 800dada:	607a      	str	r2, [r7, #4]
 800dadc:	72fb      	strb	r3, [r7, #11]
    USBD_StatusTypeDef ret;
    uint8_t idx;

    UNUSED(pdata);

    if (epnum == 0U) {
 800dade:	7afb      	ldrb	r3, [r7, #11]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d178      	bne.n	800dbd6 <USBD_LL_DataInStage+0x106>
        pep = &pdev->ep_in[0];
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	3314      	adds	r3, #20
 800dae8:	613b      	str	r3, [r7, #16]

        if (pdev->ep0_state == USBD_EP0_DATA_IN) {
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800daf0:	2b02      	cmp	r3, #2
 800daf2:	d163      	bne.n	800dbbc <USBD_LL_DataInStage+0xec>
            if (pep->rem_length > pep->maxpacket) {
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	693a      	ldr	r2, [r7, #16]
 800dafa:	8992      	ldrh	r2, [r2, #12]
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d91c      	bls.n	800db3a <USBD_LL_DataInStage+0x6a>
                pep->rem_length -= pep->maxpacket;
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	685b      	ldr	r3, [r3, #4]
 800db04:	693a      	ldr	r2, [r7, #16]
 800db06:	8992      	ldrh	r2, [r2, #12]
 800db08:	1a9a      	subs	r2, r3, r2
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	605a      	str	r2, [r3, #4]
                pep->pbuffer += pep->maxpacket;
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	691b      	ldr	r3, [r3, #16]
 800db12:	693a      	ldr	r2, [r7, #16]
 800db14:	8992      	ldrh	r2, [r2, #12]
 800db16:	441a      	add	r2, r3
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	611a      	str	r2, [r3, #16]

                (void) USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	6919      	ldr	r1, [r3, #16]
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	461a      	mov	r2, r3
 800db26:	68f8      	ldr	r0, [r7, #12]
 800db28:	f001 f8c4 	bl	800ecb4 <USBD_CtlContinueSendData>

                /* Prepare endpoint for premature end of transfer */
                (void) USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db2c:	2300      	movs	r3, #0
 800db2e:	2200      	movs	r2, #0
 800db30:	2100      	movs	r1, #0
 800db32:	68f8      	ldr	r0, [r7, #12]
 800db34:	f001 fd9a 	bl	800f66c <USBD_LL_PrepareReceive>
 800db38:	e040      	b.n	800dbbc <USBD_LL_DataInStage+0xec>
            } else {
                /* last packet is MPS multiple, so send ZLP packet */
                if ((pep->maxpacket == pep->rem_length) && (pep->total_length >= pep->maxpacket) && (pep->total_length < pdev->ep0_data_len)) {
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	899b      	ldrh	r3, [r3, #12]
 800db3e:	461a      	mov	r2, r3
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	429a      	cmp	r2, r3
 800db46:	d11c      	bne.n	800db82 <USBD_LL_DataInStage+0xb2>
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	693a      	ldr	r2, [r7, #16]
 800db4e:	8992      	ldrh	r2, [r2, #12]
 800db50:	4293      	cmp	r3, r2
 800db52:	d316      	bcc.n	800db82 <USBD_LL_DataInStage+0xb2>
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
 800db5e:	429a      	cmp	r2, r3
 800db60:	d20f      	bcs.n	800db82 <USBD_LL_DataInStage+0xb2>
                    (void) USBD_CtlContinueSendData(pdev, NULL, 0U);
 800db62:	2200      	movs	r2, #0
 800db64:	2100      	movs	r1, #0
 800db66:	68f8      	ldr	r0, [r7, #12]
 800db68:	f001 f8a4 	bl	800ecb4 <USBD_CtlContinueSendData>
                    pdev->ep0_data_len = 0U;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2200      	movs	r2, #0
 800db70:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

                    /* Prepare endpoint for premature end of transfer */
                    (void) USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db74:	2300      	movs	r3, #0
 800db76:	2200      	movs	r2, #0
 800db78:	2100      	movs	r1, #0
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	f001 fd76 	bl	800f66c <USBD_LL_PrepareReceive>
 800db80:	e01c      	b.n	800dbbc <USBD_LL_DataInStage+0xec>
                } else {
                    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db88:	b2db      	uxtb	r3, r3
 800db8a:	2b03      	cmp	r3, #3
 800db8c:	d10f      	bne.n	800dbae <USBD_LL_DataInStage+0xde>
                        if (pdev->pClass[0]->EP0_TxSent != NULL) {
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d009      	beq.n	800dbae <USBD_LL_DataInStage+0xde>
                            pdev->classId = 0U;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2200      	movs	r2, #0
 800db9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                            pdev->pClass[0]->EP0_TxSent(pdev);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	68f8      	ldr	r0, [r7, #12]
 800dbac:	4798      	blx	r3
                        }
                    }
                    (void) USBD_LL_StallEP(pdev, 0x80U);
 800dbae:	2180      	movs	r1, #128	@ 0x80
 800dbb0:	68f8      	ldr	r0, [r7, #12]
 800dbb2:	f001 fcb1 	bl	800f518 <USBD_LL_StallEP>
                    (void) USBD_CtlReceiveStatus(pdev);
 800dbb6:	68f8      	ldr	r0, [r7, #12]
 800dbb8:	f001 f8d2 	bl	800ed60 <USBD_CtlReceiveStatus>
                }
            }
        }

        if (pdev->dev_test_mode != 0U) {
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d03a      	beq.n	800dc3c <USBD_LL_DataInStage+0x16c>
            (void) USBD_RunTestMode(pdev);
 800dbc6:	68f8      	ldr	r0, [r7, #12]
 800dbc8:	f7ff fe30 	bl	800d82c <USBD_RunTestMode>
            pdev->dev_test_mode = 0U;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800dbd4:	e032      	b.n	800dc3c <USBD_LL_DataInStage+0x16c>
        }
    } else {
        /* Get the class index relative to this interface */
        idx = USBD_CoreFindEP(pdev, ((uint8_t) epnum | 0x80U));
 800dbd6:	7afb      	ldrb	r3, [r7, #11]
 800dbd8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	4619      	mov	r1, r3
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f000 f986 	bl	800def2 <USBD_CoreFindEP>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	75fb      	strb	r3, [r7, #23]

        if (((uint16_t) idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800dbea:	7dfb      	ldrb	r3, [r7, #23]
 800dbec:	2bff      	cmp	r3, #255	@ 0xff
 800dbee:	d025      	beq.n	800dc3c <USBD_LL_DataInStage+0x16c>
 800dbf0:	7dfb      	ldrb	r3, [r7, #23]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d122      	bne.n	800dc3c <USBD_LL_DataInStage+0x16c>
            /* Call the class data out function to manage the request */
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	2b03      	cmp	r3, #3
 800dc00:	d11c      	bne.n	800dc3c <USBD_LL_DataInStage+0x16c>
                if (pdev->pClass[idx]->DataIn != NULL) {
 800dc02:	7dfa      	ldrb	r2, [r7, #23]
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	32ae      	adds	r2, #174	@ 0xae
 800dc08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc0c:	695b      	ldr	r3, [r3, #20]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d014      	beq.n	800dc3c <USBD_LL_DataInStage+0x16c>
                    pdev->classId = idx;
 800dc12:	7dfa      	ldrb	r2, [r7, #23]
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                    ret = (USBD_StatusTypeDef) pdev->pClass[idx]->DataIn(pdev, epnum);
 800dc1a:	7dfa      	ldrb	r2, [r7, #23]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	32ae      	adds	r2, #174	@ 0xae
 800dc20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc24:	695b      	ldr	r3, [r3, #20]
 800dc26:	7afa      	ldrb	r2, [r7, #11]
 800dc28:	4611      	mov	r1, r2
 800dc2a:	68f8      	ldr	r0, [r7, #12]
 800dc2c:	4798      	blx	r3
 800dc2e:	4603      	mov	r3, r0
 800dc30:	75bb      	strb	r3, [r7, #22]

                    if (ret != USBD_OK) {
 800dc32:	7dbb      	ldrb	r3, [r7, #22]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d001      	beq.n	800dc3c <USBD_LL_DataInStage+0x16c>
                        return ret;
 800dc38:	7dbb      	ldrb	r3, [r7, #22]
 800dc3a:	e000      	b.n	800dc3e <USBD_LL_DataInStage+0x16e>
                }
            }
        }
    }

    return USBD_OK;
 800dc3c:	2300      	movs	r3, #0
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3718      	adds	r7, #24
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <USBD_LL_Reset>:
 * @brief  USBD_LL_Reset
 *         Handle Reset event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev) {
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b084      	sub	sp, #16
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
    USBD_StatusTypeDef ret = USBD_OK;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	73fb      	strb	r3, [r7, #15]

    /* Upon Reset call user call back */
    pdev->dev_state = USBD_STATE_DEFAULT;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2201      	movs	r2, #1
 800dc56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    pdev->ep0_state = USBD_EP0_IDLE;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    pdev->dev_config = 0U;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2200      	movs	r2, #0
 800dc66:	605a      	str	r2, [r3, #4]
    pdev->dev_remote_wakeup = 0U;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    pdev->dev_test_mode = 0U;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2200      	movs	r2, #0
 800dc74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

    if (pdev->pClass[0] != NULL) {
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d014      	beq.n	800dcac <USBD_LL_Reset+0x66>
        if (pdev->pClass[0]->DeInit != NULL) {
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00e      	beq.n	800dcac <USBD_LL_Reset+0x66>
            if (pdev->pClass[0]->DeInit(pdev, (uint8_t) pdev->dev_config) != USBD_OK) {
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	6852      	ldr	r2, [r2, #4]
 800dc9a:	b2d2      	uxtb	r2, r2
 800dc9c:	4611      	mov	r1, r2
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	4798      	blx	r3
 800dca2:	4603      	mov	r3, r0
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d001      	beq.n	800dcac <USBD_LL_Reset+0x66>
                ret = USBD_FAIL;
 800dca8:	2303      	movs	r3, #3
 800dcaa:	73fb      	strb	r3, [r7, #15]
        }
    }
#endif /* USE_USBD_COMPOSITE */

    /* Open EP0 OUT */
    (void) USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dcac:	2340      	movs	r3, #64	@ 0x40
 800dcae:	2200      	movs	r2, #0
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f001 fbeb 	bl	800f48e <USBD_LL_OpenEP>
    pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

    pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2240      	movs	r2, #64	@ 0x40
 800dcc4:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

    /* Open EP0 IN */
    (void) USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dcc8:	2340      	movs	r3, #64	@ 0x40
 800dcca:	2200      	movs	r2, #0
 800dccc:	2180      	movs	r1, #128	@ 0x80
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f001 fbdd 	bl	800f48e <USBD_LL_OpenEP>
    pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

    pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2240      	movs	r2, #64	@ 0x40
 800dce0:	841a      	strh	r2, [r3, #32]

    return ret;
 800dce2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <USBD_LL_SetSpeed>:
 * @brief  USBD_LL_SetSpeed
 *         Handle Reset event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev, USBD_SpeedTypeDef speed) {
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	70fb      	strb	r3, [r7, #3]
    pdev->dev_speed = speed;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	78fa      	ldrb	r2, [r7, #3]
 800dcfc:	741a      	strb	r2, [r3, #16]

    return USBD_OK;
 800dcfe:	2300      	movs	r3, #0
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	370c      	adds	r7, #12
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <USBD_LL_Suspend>:
 * @brief  USBD_LL_Suspend
 *         Handle Suspend event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev) {
 800dd0c:	b480      	push	{r7}
 800dd0e:	b083      	sub	sp, #12
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
    if (pdev->dev_state != USBD_STATE_SUSPENDED) {
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	2b04      	cmp	r3, #4
 800dd1e:	d006      	beq.n	800dd2e <USBD_LL_Suspend+0x22>
        pdev->dev_old_state = pdev->dev_state;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd26:	b2da      	uxtb	r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
    }

    pdev->dev_state = USBD_STATE_SUSPENDED;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2204      	movs	r2, #4
 800dd32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

    return USBD_OK;
 800dd36:	2300      	movs	r3, #0
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	370c      	adds	r7, #12
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <USBD_LL_Resume>:
 * @brief  USBD_LL_Resume
 *         Handle Resume event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev) {
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
    if (pdev->dev_state == USBD_STATE_SUSPENDED) {
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	2b04      	cmp	r3, #4
 800dd56:	d106      	bne.n	800dd66 <USBD_LL_Resume+0x22>
        pdev->dev_state = pdev->dev_old_state;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800dd5e:	b2da      	uxtb	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    }

    return USBD_OK;
 800dd66:	2300      	movs	r3, #0
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	370c      	adds	r7, #12
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <USBD_LL_SOF>:
 * @brief  USBD_LL_SOF
 *         Handle SOF event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev) {
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
    /* The SOF event can be distributed for all classes that support it */
    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	2b03      	cmp	r3, #3
 800dd86:	d110      	bne.n	800ddaa <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
        if (pdev->pClass[0] != NULL) {
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d00b      	beq.n	800ddaa <USBD_LL_SOF+0x36>
            if (pdev->pClass[0]->SOF != NULL) {
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd98:	69db      	ldr	r3, [r3, #28]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d005      	beq.n	800ddaa <USBD_LL_SOF+0x36>
                (void) pdev->pClass[0]->SOF(pdev);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dda4:	69db      	ldr	r3, [r3, #28]
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	4798      	blx	r3
            }
        }
#endif /* USE_USBD_COMPOSITE */
    }

    return USBD_OK;
 800ddaa:	2300      	movs	r3, #0
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3708      	adds	r7, #8
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <USBD_LL_IsoINIncomplete>:
 *         Handle iso in incomplete event
 * @param  pdev: device instance
 * @param  epnum: Endpoint number
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	460b      	mov	r3, r1
 800ddbe:	70fb      	strb	r3, [r7, #3]
    if (pdev->pClass[pdev->classId] == NULL) {
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	32ae      	adds	r2, #174	@ 0xae
 800ddca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d101      	bne.n	800ddd6 <USBD_LL_IsoINIncomplete+0x22>
        return USBD_FAIL;
 800ddd2:	2303      	movs	r3, #3
 800ddd4:	e01c      	b.n	800de10 <USBD_LL_IsoINIncomplete+0x5c>
    }

    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	2b03      	cmp	r3, #3
 800dde0:	d115      	bne.n	800de0e <USBD_LL_IsoINIncomplete+0x5a>
        if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL) {
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	32ae      	adds	r2, #174	@ 0xae
 800ddec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddf0:	6a1b      	ldr	r3, [r3, #32]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d00b      	beq.n	800de0e <USBD_LL_IsoINIncomplete+0x5a>
            (void) pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	32ae      	adds	r2, #174	@ 0xae
 800de00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de04:	6a1b      	ldr	r3, [r3, #32]
 800de06:	78fa      	ldrb	r2, [r7, #3]
 800de08:	4611      	mov	r1, r2
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	4798      	blx	r3
        }
    }

    return USBD_OK;
 800de0e:	2300      	movs	r3, #0
}
 800de10:	4618      	mov	r0, r3
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <USBD_LL_IsoOUTIncomplete>:
 *         Handle iso out incomplete event
 * @param  pdev: device instance
 * @param  epnum: Endpoint number
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	460b      	mov	r3, r1
 800de22:	70fb      	strb	r3, [r7, #3]
    if (pdev->pClass[pdev->classId] == NULL) {
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	32ae      	adds	r2, #174	@ 0xae
 800de2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d101      	bne.n	800de3a <USBD_LL_IsoOUTIncomplete+0x22>
        return USBD_FAIL;
 800de36:	2303      	movs	r3, #3
 800de38:	e01c      	b.n	800de74 <USBD_LL_IsoOUTIncomplete+0x5c>
    }

    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de40:	b2db      	uxtb	r3, r3
 800de42:	2b03      	cmp	r3, #3
 800de44:	d115      	bne.n	800de72 <USBD_LL_IsoOUTIncomplete+0x5a>
        if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL) {
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	32ae      	adds	r2, #174	@ 0xae
 800de50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de56:	2b00      	cmp	r3, #0
 800de58:	d00b      	beq.n	800de72 <USBD_LL_IsoOUTIncomplete+0x5a>
            (void) pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	32ae      	adds	r2, #174	@ 0xae
 800de64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de6a:	78fa      	ldrb	r2, [r7, #3]
 800de6c:	4611      	mov	r1, r2
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	4798      	blx	r3
        }
    }

    return USBD_OK;
 800de72:	2300      	movs	r3, #0
}
 800de74:	4618      	mov	r0, r3
 800de76:	3708      	adds	r7, #8
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <USBD_LL_DevConnected>:
 * @brief  USBD_LL_DevConnected
 *         Handle device connection event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev) {
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument compilation warning */
    UNUSED(pdev);

    return USBD_OK;
 800de84:	2300      	movs	r3, #0
}
 800de86:	4618      	mov	r0, r3
 800de88:	370c      	adds	r7, #12
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr

0800de92 <USBD_LL_DevDisconnected>:
 * @brief  USBD_LL_DevDisconnected
 *         Handle device disconnection event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev) {
 800de92:	b580      	push	{r7, lr}
 800de94:	b084      	sub	sp, #16
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
    USBD_StatusTypeDef ret = USBD_OK;
 800de9a:	2300      	movs	r3, #0
 800de9c:	73fb      	strb	r3, [r7, #15]

    /* Free Class Resources */
    pdev->dev_state = USBD_STATE_DEFAULT;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2201      	movs	r2, #1
 800dea2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
    if (pdev->pClass[0] != NULL) {
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00e      	beq.n	800dece <USBD_LL_DevDisconnected+0x3c>
        if (pdev->pClass[0]->DeInit(pdev, (uint8_t) pdev->dev_config) != 0U) {
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800deb6:	685b      	ldr	r3, [r3, #4]
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	6852      	ldr	r2, [r2, #4]
 800debc:	b2d2      	uxtb	r2, r2
 800debe:	4611      	mov	r1, r2
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	4798      	blx	r3
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d001      	beq.n	800dece <USBD_LL_DevDisconnected+0x3c>
            ret = USBD_FAIL;
 800deca:	2303      	movs	r3, #3
 800decc:	73fb      	strb	r3, [r7, #15]
        }
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 800dece:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3710      	adds	r7, #16
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <USBD_CoreFindIF>:
 *         return the class index relative to the selected interface
 * @param  pdev: device instance
 * @param  index : selected interface number
 * @retval index of the class using the selected interface number. OxFF if no class found.
 */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index) {
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	460b      	mov	r3, r1
 800dee2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
    UNUSED(pdev);
    UNUSED(index);

    return 0x00U;
 800dee4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	370c      	adds	r7, #12
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr

0800def2 <USBD_CoreFindEP>:
 *         return the class index relative to the selected endpoint
 * @param  pdev: device instance
 * @param  index : selected endpoint number
 * @retval index of the class using the selected endpoint number. 0xFF if no class found.
 */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index) {
 800def2:	b480      	push	{r7}
 800def4:	b083      	sub	sp, #12
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
 800defa:	460b      	mov	r3, r1
 800defc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
    UNUSED(pdev);
    UNUSED(index);

    return 0x00U;
 800defe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800df00:	4618      	mov	r0, r3
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <USBD_GetEpDesc>:
 * @param  pdev: device instance
 * @param  pConfDesc:  pointer to Bos descriptor
 * @param  EpAddr:  endpoint address
 * @retval pointer to video endpoint descriptor
 */
void* USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr) {
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b086      	sub	sp, #24
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	460b      	mov	r3, r1
 800df16:	70fb      	strb	r3, [r7, #3]
    USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef*) (void*) pConfDesc;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	617b      	str	r3, [r7, #20]
    USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef*) (void*) pConfDesc;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	60fb      	str	r3, [r7, #12]
    USBD_EpDescTypeDef *pEpDesc = NULL;
 800df20:	2300      	movs	r3, #0
 800df22:	613b      	str	r3, [r7, #16]
    uint16_t ptr;

    if (desc->wTotalLength > desc->bLength) {
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	885b      	ldrh	r3, [r3, #2]
 800df28:	b29b      	uxth	r3, r3
 800df2a:	68fa      	ldr	r2, [r7, #12]
 800df2c:	7812      	ldrb	r2, [r2, #0]
 800df2e:	4293      	cmp	r3, r2
 800df30:	d91f      	bls.n	800df72 <USBD_GetEpDesc+0x66>
        ptr = desc->bLength;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	817b      	strh	r3, [r7, #10]

        while (ptr < desc->wTotalLength) {
 800df38:	e013      	b.n	800df62 <USBD_GetEpDesc+0x56>
            pdesc = USBD_GetNextDesc((uint8_t*) pdesc, &ptr);
 800df3a:	f107 030a 	add.w	r3, r7, #10
 800df3e:	4619      	mov	r1, r3
 800df40:	6978      	ldr	r0, [r7, #20]
 800df42:	f000 f81b 	bl	800df7c <USBD_GetNextDesc>
 800df46:	6178      	str	r0, [r7, #20]

            if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT) {
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	785b      	ldrb	r3, [r3, #1]
 800df4c:	2b05      	cmp	r3, #5
 800df4e:	d108      	bne.n	800df62 <USBD_GetEpDesc+0x56>
                pEpDesc = (USBD_EpDescTypeDef*) (void*) pdesc;
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	613b      	str	r3, [r7, #16]

                if (pEpDesc->bEndpointAddress == EpAddr) {
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	789b      	ldrb	r3, [r3, #2]
 800df58:	78fa      	ldrb	r2, [r7, #3]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d008      	beq.n	800df70 <USBD_GetEpDesc+0x64>
                    break;
                } else {
                    pEpDesc = NULL;
 800df5e:	2300      	movs	r3, #0
 800df60:	613b      	str	r3, [r7, #16]
        while (ptr < desc->wTotalLength) {
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	885b      	ldrh	r3, [r3, #2]
 800df66:	b29a      	uxth	r2, r3
 800df68:	897b      	ldrh	r3, [r7, #10]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d8e5      	bhi.n	800df3a <USBD_GetEpDesc+0x2e>
 800df6e:	e000      	b.n	800df72 <USBD_GetEpDesc+0x66>
                    break;
 800df70:	bf00      	nop
                }
            }
        }
    }

    return (void*) pEpDesc;
 800df72:	693b      	ldr	r3, [r7, #16]
}
 800df74:	4618      	mov	r0, r3
 800df76:	3718      	adds	r7, #24
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <USBD_GetNextDesc>:
 *         This function return the next descriptor header
 * @param  buf: Buffer where the descriptor is available
 * @param  ptr: data pointer inside the descriptor
 * @retval next header
 */
USBD_DescHeaderTypeDef* USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr) {
 800df7c:	b480      	push	{r7}
 800df7e:	b085      	sub	sp, #20
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
    USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef*) (void*) pbuf;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	60fb      	str	r3, [r7, #12]

    *ptr += pnext->bLength;
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	881b      	ldrh	r3, [r3, #0]
 800df8e:	68fa      	ldr	r2, [r7, #12]
 800df90:	7812      	ldrb	r2, [r2, #0]
 800df92:	4413      	add	r3, r2
 800df94:	b29a      	uxth	r2, r3
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	801a      	strh	r2, [r3, #0]
    pnext = (USBD_DescHeaderTypeDef*) (void*) (pbuf + pnext->bLength);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	461a      	mov	r2, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	4413      	add	r3, r2
 800dfa4:	60fb      	str	r3, [r7, #12]

    return (pnext);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3714      	adds	r7, #20
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b087      	sub	sp, #28
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	3301      	adds	r3, #1
 800dfca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dfd2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800dfd6:	021b      	lsls	r3, r3, #8
 800dfd8:	b21a      	sxth	r2, r3
 800dfda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	b21b      	sxth	r3, r3
 800dfe2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dfe4:	89fb      	ldrh	r3, [r7, #14]
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	371c      	adds	r7, #28
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr
	...

0800dff4 <USBD_StdDevReq>:
 *         Handle standard usb device requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 800dffe:	2300      	movs	r3, #0
 800e000:	73fb      	strb	r3, [r7, #15]

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e00a:	2b40      	cmp	r3, #64	@ 0x40
 800e00c:	d005      	beq.n	800e01a <USBD_StdDevReq+0x26>
 800e00e:	2b40      	cmp	r3, #64	@ 0x40
 800e010:	d857      	bhi.n	800e0c2 <USBD_StdDevReq+0xce>
 800e012:	2b00      	cmp	r3, #0
 800e014:	d00f      	beq.n	800e036 <USBD_StdDevReq+0x42>
 800e016:	2b20      	cmp	r3, #32
 800e018:	d153      	bne.n	800e0c2 <USBD_StdDevReq+0xce>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
        ret = (USBD_StatusTypeDef) pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	32ae      	adds	r2, #174	@ 0xae
 800e024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	6839      	ldr	r1, [r7, #0]
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	4798      	blx	r3
 800e030:	4603      	mov	r3, r0
 800e032:	73fb      	strb	r3, [r7, #15]
        break;
 800e034:	e04a      	b.n	800e0cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	785b      	ldrb	r3, [r3, #1]
 800e03a:	2b09      	cmp	r3, #9
 800e03c:	d83b      	bhi.n	800e0b6 <USBD_StdDevReq+0xc2>
 800e03e:	a201      	add	r2, pc, #4	@ (adr r2, 800e044 <USBD_StdDevReq+0x50>)
 800e040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e044:	0800e099 	.word	0x0800e099
 800e048:	0800e0ad 	.word	0x0800e0ad
 800e04c:	0800e0b7 	.word	0x0800e0b7
 800e050:	0800e0a3 	.word	0x0800e0a3
 800e054:	0800e0b7 	.word	0x0800e0b7
 800e058:	0800e077 	.word	0x0800e077
 800e05c:	0800e06d 	.word	0x0800e06d
 800e060:	0800e0b7 	.word	0x0800e0b7
 800e064:	0800e08f 	.word	0x0800e08f
 800e068:	0800e081 	.word	0x0800e081
        case USB_REQ_GET_DESCRIPTOR:
            USBD_GetDescriptor(pdev, req);
 800e06c:	6839      	ldr	r1, [r7, #0]
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f000 fa3e 	bl	800e4f0 <USBD_GetDescriptor>
            break;
 800e074:	e024      	b.n	800e0c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
            USBD_SetAddress(pdev, req);
 800e076:	6839      	ldr	r1, [r7, #0]
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f000 fba3 	bl	800e7c4 <USBD_SetAddress>
            break;
 800e07e:	e01f      	b.n	800e0c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
            ret = USBD_SetConfig(pdev, req);
 800e080:	6839      	ldr	r1, [r7, #0]
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f000 fbe2 	bl	800e84c <USBD_SetConfig>
 800e088:	4603      	mov	r3, r0
 800e08a:	73fb      	strb	r3, [r7, #15]
            break;
 800e08c:	e018      	b.n	800e0c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
            USBD_GetConfig(pdev, req);
 800e08e:	6839      	ldr	r1, [r7, #0]
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f000 fc85 	bl	800e9a0 <USBD_GetConfig>
            break;
 800e096:	e013      	b.n	800e0c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
            USBD_GetStatus(pdev, req);
 800e098:	6839      	ldr	r1, [r7, #0]
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 fcb6 	bl	800ea0c <USBD_GetStatus>
            break;
 800e0a0:	e00e      	b.n	800e0c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
            USBD_SetFeature(pdev, req);
 800e0a2:	6839      	ldr	r1, [r7, #0]
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f000 fce5 	bl	800ea74 <USBD_SetFeature>
            break;
 800e0aa:	e009      	b.n	800e0c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
            USBD_ClrFeature(pdev, req);
 800e0ac:	6839      	ldr	r1, [r7, #0]
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 fd09 	bl	800eac6 <USBD_ClrFeature>
            break;
 800e0b4:	e004      	b.n	800e0c0 <USBD_StdDevReq+0xcc>

        default:
            USBD_CtlError(pdev, req);
 800e0b6:	6839      	ldr	r1, [r7, #0]
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f000 fd60 	bl	800eb7e <USBD_CtlError>
            break;
 800e0be:	bf00      	nop
        }
        break;
 800e0c0:	e004      	b.n	800e0cc <USBD_StdDevReq+0xd8>

    default:
        USBD_CtlError(pdev, req);
 800e0c2:	6839      	ldr	r1, [r7, #0]
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f000 fd5a 	bl	800eb7e <USBD_CtlError>
        break;
 800e0ca:	bf00      	nop
    }

    return ret;
 800e0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3710      	adds	r7, #16
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop

0800e0d8 <USBD_StdItfReq>:
 *         Handle standard usb interface requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b084      	sub	sp, #16
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	73fb      	strb	r3, [r7, #15]
    uint8_t idx;

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e0ee:	2b40      	cmp	r3, #64	@ 0x40
 800e0f0:	d005      	beq.n	800e0fe <USBD_StdItfReq+0x26>
 800e0f2:	2b40      	cmp	r3, #64	@ 0x40
 800e0f4:	d852      	bhi.n	800e19c <USBD_StdItfReq+0xc4>
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d001      	beq.n	800e0fe <USBD_StdItfReq+0x26>
 800e0fa:	2b20      	cmp	r3, #32
 800e0fc:	d14e      	bne.n	800e19c <USBD_StdItfReq+0xc4>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
        switch (pdev->dev_state) {
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e104:	b2db      	uxtb	r3, r3
 800e106:	3b01      	subs	r3, #1
 800e108:	2b02      	cmp	r3, #2
 800e10a:	d840      	bhi.n	800e18e <USBD_StdItfReq+0xb6>
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

            if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) {
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	889b      	ldrh	r3, [r3, #4]
 800e110:	b2db      	uxtb	r3, r3
 800e112:	2b01      	cmp	r3, #1
 800e114:	d836      	bhi.n	800e184 <USBD_StdItfReq+0xac>
                /* Get the class index relative to this interface */
                idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	889b      	ldrh	r3, [r3, #4]
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	4619      	mov	r1, r3
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f7ff feda 	bl	800ded8 <USBD_CoreFindIF>
 800e124:	4603      	mov	r3, r0
 800e126:	73bb      	strb	r3, [r7, #14]
                if (((uint8_t) idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800e128:	7bbb      	ldrb	r3, [r7, #14]
 800e12a:	2bff      	cmp	r3, #255	@ 0xff
 800e12c:	d01d      	beq.n	800e16a <USBD_StdItfReq+0x92>
 800e12e:	7bbb      	ldrb	r3, [r7, #14]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d11a      	bne.n	800e16a <USBD_StdItfReq+0x92>
                    /* Call the class data out function to manage the request */
                    if (pdev->pClass[idx]->Setup != NULL) {
 800e134:	7bba      	ldrb	r2, [r7, #14]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	32ae      	adds	r2, #174	@ 0xae
 800e13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e13e:	689b      	ldr	r3, [r3, #8]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d00f      	beq.n	800e164 <USBD_StdItfReq+0x8c>
                        pdev->classId = idx;
 800e144:	7bba      	ldrb	r2, [r7, #14]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                        ret = (USBD_StatusTypeDef) (pdev->pClass[idx]->Setup(pdev, req));
 800e14c:	7bba      	ldrb	r2, [r7, #14]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	32ae      	adds	r2, #174	@ 0xae
 800e152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e156:	689b      	ldr	r3, [r3, #8]
 800e158:	6839      	ldr	r1, [r7, #0]
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	4798      	blx	r3
 800e15e:	4603      	mov	r3, r0
 800e160:	73fb      	strb	r3, [r7, #15]
                    if (pdev->pClass[idx]->Setup != NULL) {
 800e162:	e004      	b.n	800e16e <USBD_StdItfReq+0x96>
                    } else {
                        /* should never reach this condition */
                        ret = USBD_FAIL;
 800e164:	2303      	movs	r3, #3
 800e166:	73fb      	strb	r3, [r7, #15]
                    if (pdev->pClass[idx]->Setup != NULL) {
 800e168:	e001      	b.n	800e16e <USBD_StdItfReq+0x96>
                    }
                } else {
                    /* No relative interface found */
                    ret = USBD_FAIL;
 800e16a:	2303      	movs	r3, #3
 800e16c:	73fb      	strb	r3, [r7, #15]
                }

                if ((req->wLength == 0U) && (ret == USBD_OK)) {
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	88db      	ldrh	r3, [r3, #6]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d110      	bne.n	800e198 <USBD_StdItfReq+0xc0>
 800e176:	7bfb      	ldrb	r3, [r7, #15]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d10d      	bne.n	800e198 <USBD_StdItfReq+0xc0>
                    (void) USBD_CtlSendStatus(pdev);
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f000 fddc 	bl	800ed3a <USBD_CtlSendStatus>
                }
            } else {
                USBD_CtlError(pdev, req);
            }
            break;
 800e182:	e009      	b.n	800e198 <USBD_StdItfReq+0xc0>
                USBD_CtlError(pdev, req);
 800e184:	6839      	ldr	r1, [r7, #0]
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f000 fcf9 	bl	800eb7e <USBD_CtlError>
            break;
 800e18c:	e004      	b.n	800e198 <USBD_StdItfReq+0xc0>

        default:
            USBD_CtlError(pdev, req);
 800e18e:	6839      	ldr	r1, [r7, #0]
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 fcf4 	bl	800eb7e <USBD_CtlError>
            break;
 800e196:	e000      	b.n	800e19a <USBD_StdItfReq+0xc2>
            break;
 800e198:	bf00      	nop
        }
        break;
 800e19a:	e004      	b.n	800e1a6 <USBD_StdItfReq+0xce>

    default:
        USBD_CtlError(pdev, req);
 800e19c:	6839      	ldr	r1, [r7, #0]
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f000 fced 	bl	800eb7e <USBD_CtlError>
        break;
 800e1a4:	bf00      	nop
    }

    return ret;
 800e1a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3710      	adds	r7, #16
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <USBD_StdEPReq>:
 *         Handle standard usb endpoint requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	6039      	str	r1, [r7, #0]
    USBD_EndpointTypeDef *pep;
    uint8_t ep_addr;
    uint8_t idx;
    USBD_StatusTypeDef ret = USBD_OK;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	73fb      	strb	r3, [r7, #15]

    ep_addr = LOBYTE(req->wIndex);
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	889b      	ldrh	r3, [r3, #4]
 800e1c2:	73bb      	strb	r3, [r7, #14]

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e1cc:	2b40      	cmp	r3, #64	@ 0x40
 800e1ce:	d007      	beq.n	800e1e0 <USBD_StdEPReq+0x30>
 800e1d0:	2b40      	cmp	r3, #64	@ 0x40
 800e1d2:	f200 8181 	bhi.w	800e4d8 <USBD_StdEPReq+0x328>
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d02a      	beq.n	800e230 <USBD_StdEPReq+0x80>
 800e1da:	2b20      	cmp	r3, #32
 800e1dc:	f040 817c 	bne.w	800e4d8 <USBD_StdEPReq+0x328>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
        /* Get the class index relative to this endpoint */
        idx = USBD_CoreFindEP(pdev, ep_addr);
 800e1e0:	7bbb      	ldrb	r3, [r7, #14]
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f7ff fe84 	bl	800def2 <USBD_CoreFindEP>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	737b      	strb	r3, [r7, #13]
        if (((uint8_t) idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800e1ee:	7b7b      	ldrb	r3, [r7, #13]
 800e1f0:	2bff      	cmp	r3, #255	@ 0xff
 800e1f2:	f000 8176 	beq.w	800e4e2 <USBD_StdEPReq+0x332>
 800e1f6:	7b7b      	ldrb	r3, [r7, #13]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	f040 8172 	bne.w	800e4e2 <USBD_StdEPReq+0x332>
            pdev->classId = idx;
 800e1fe:	7b7a      	ldrb	r2, [r7, #13]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
            /* Call the class data out function to manage the request */
            if (pdev->pClass[idx]->Setup != NULL) {
 800e206:	7b7a      	ldrb	r2, [r7, #13]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	32ae      	adds	r2, #174	@ 0xae
 800e20c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e210:	689b      	ldr	r3, [r3, #8]
 800e212:	2b00      	cmp	r3, #0
 800e214:	f000 8165 	beq.w	800e4e2 <USBD_StdEPReq+0x332>
                ret = (USBD_StatusTypeDef) pdev->pClass[idx]->Setup(pdev, req);
 800e218:	7b7a      	ldrb	r2, [r7, #13]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	32ae      	adds	r2, #174	@ 0xae
 800e21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e222:	689b      	ldr	r3, [r3, #8]
 800e224:	6839      	ldr	r1, [r7, #0]
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	4798      	blx	r3
 800e22a:	4603      	mov	r3, r0
 800e22c:	73fb      	strb	r3, [r7, #15]
            }
        }
        break;
 800e22e:	e158      	b.n	800e4e2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	785b      	ldrb	r3, [r3, #1]
 800e234:	2b03      	cmp	r3, #3
 800e236:	d008      	beq.n	800e24a <USBD_StdEPReq+0x9a>
 800e238:	2b03      	cmp	r3, #3
 800e23a:	f300 8147 	bgt.w	800e4cc <USBD_StdEPReq+0x31c>
 800e23e:	2b00      	cmp	r3, #0
 800e240:	f000 809b 	beq.w	800e37a <USBD_StdEPReq+0x1ca>
 800e244:	2b01      	cmp	r3, #1
 800e246:	d03c      	beq.n	800e2c2 <USBD_StdEPReq+0x112>
 800e248:	e140      	b.n	800e4cc <USBD_StdEPReq+0x31c>
        case USB_REQ_SET_FEATURE:
            switch (pdev->dev_state) {
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e250:	b2db      	uxtb	r3, r3
 800e252:	2b02      	cmp	r3, #2
 800e254:	d002      	beq.n	800e25c <USBD_StdEPReq+0xac>
 800e256:	2b03      	cmp	r3, #3
 800e258:	d016      	beq.n	800e288 <USBD_StdEPReq+0xd8>
 800e25a:	e02c      	b.n	800e2b6 <USBD_StdEPReq+0x106>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 800e25c:	7bbb      	ldrb	r3, [r7, #14]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d00d      	beq.n	800e27e <USBD_StdEPReq+0xce>
 800e262:	7bbb      	ldrb	r3, [r7, #14]
 800e264:	2b80      	cmp	r3, #128	@ 0x80
 800e266:	d00a      	beq.n	800e27e <USBD_StdEPReq+0xce>
                    (void) USBD_LL_StallEP(pdev, ep_addr);
 800e268:	7bbb      	ldrb	r3, [r7, #14]
 800e26a:	4619      	mov	r1, r3
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f001 f953 	bl	800f518 <USBD_LL_StallEP>
                    (void) USBD_LL_StallEP(pdev, 0x80U);
 800e272:	2180      	movs	r1, #128	@ 0x80
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f001 f94f 	bl	800f518 <USBD_LL_StallEP>
 800e27a:	bf00      	nop
                } else {
                    USBD_CtlError(pdev, req);
                }
                break;
 800e27c:	e020      	b.n	800e2c0 <USBD_StdEPReq+0x110>
                    USBD_CtlError(pdev, req);
 800e27e:	6839      	ldr	r1, [r7, #0]
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f000 fc7c 	bl	800eb7e <USBD_CtlError>
                break;
 800e286:	e01b      	b.n	800e2c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
                if (req->wValue == USB_FEATURE_EP_HALT) {
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	885b      	ldrh	r3, [r3, #2]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d10e      	bne.n	800e2ae <USBD_StdEPReq+0xfe>
                    if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U)) {
 800e290:	7bbb      	ldrb	r3, [r7, #14]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d00b      	beq.n	800e2ae <USBD_StdEPReq+0xfe>
 800e296:	7bbb      	ldrb	r3, [r7, #14]
 800e298:	2b80      	cmp	r3, #128	@ 0x80
 800e29a:	d008      	beq.n	800e2ae <USBD_StdEPReq+0xfe>
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	88db      	ldrh	r3, [r3, #6]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d104      	bne.n	800e2ae <USBD_StdEPReq+0xfe>
                        (void) USBD_LL_StallEP(pdev, ep_addr);
 800e2a4:	7bbb      	ldrb	r3, [r7, #14]
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f001 f935 	bl	800f518 <USBD_LL_StallEP>
                    }
                }
                (void) USBD_CtlSendStatus(pdev);
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 fd43 	bl	800ed3a <USBD_CtlSendStatus>

                break;
 800e2b4:	e004      	b.n	800e2c0 <USBD_StdEPReq+0x110>

            default:
                USBD_CtlError(pdev, req);
 800e2b6:	6839      	ldr	r1, [r7, #0]
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 fc60 	bl	800eb7e <USBD_CtlError>
                break;
 800e2be:	bf00      	nop
            }
            break;
 800e2c0:	e109      	b.n	800e4d6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

            switch (pdev->dev_state) {
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	2b02      	cmp	r3, #2
 800e2cc:	d002      	beq.n	800e2d4 <USBD_StdEPReq+0x124>
 800e2ce:	2b03      	cmp	r3, #3
 800e2d0:	d016      	beq.n	800e300 <USBD_StdEPReq+0x150>
 800e2d2:	e04b      	b.n	800e36c <USBD_StdEPReq+0x1bc>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 800e2d4:	7bbb      	ldrb	r3, [r7, #14]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d00d      	beq.n	800e2f6 <USBD_StdEPReq+0x146>
 800e2da:	7bbb      	ldrb	r3, [r7, #14]
 800e2dc:	2b80      	cmp	r3, #128	@ 0x80
 800e2de:	d00a      	beq.n	800e2f6 <USBD_StdEPReq+0x146>
                    (void) USBD_LL_StallEP(pdev, ep_addr);
 800e2e0:	7bbb      	ldrb	r3, [r7, #14]
 800e2e2:	4619      	mov	r1, r3
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f001 f917 	bl	800f518 <USBD_LL_StallEP>
                    (void) USBD_LL_StallEP(pdev, 0x80U);
 800e2ea:	2180      	movs	r1, #128	@ 0x80
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f001 f913 	bl	800f518 <USBD_LL_StallEP>
 800e2f2:	bf00      	nop
                } else {
                    USBD_CtlError(pdev, req);
                }
                break;
 800e2f4:	e040      	b.n	800e378 <USBD_StdEPReq+0x1c8>
                    USBD_CtlError(pdev, req);
 800e2f6:	6839      	ldr	r1, [r7, #0]
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f000 fc40 	bl	800eb7e <USBD_CtlError>
                break;
 800e2fe:	e03b      	b.n	800e378 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
                if (req->wValue == USB_FEATURE_EP_HALT) {
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	885b      	ldrh	r3, [r3, #2]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d136      	bne.n	800e376 <USBD_StdEPReq+0x1c6>
                    if ((ep_addr & 0x7FU) != 0x00U) {
 800e308:	7bbb      	ldrb	r3, [r7, #14]
 800e30a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d004      	beq.n	800e31c <USBD_StdEPReq+0x16c>
                        (void) USBD_LL_ClearStallEP(pdev, ep_addr);
 800e312:	7bbb      	ldrb	r3, [r7, #14]
 800e314:	4619      	mov	r1, r3
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f001 f91d 	bl	800f556 <USBD_LL_ClearStallEP>
                    }
                    (void) USBD_CtlSendStatus(pdev);
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 fd0c 	bl	800ed3a <USBD_CtlSendStatus>

                    /* Get the class index relative to this interface */
                    idx = USBD_CoreFindEP(pdev, ep_addr);
 800e322:	7bbb      	ldrb	r3, [r7, #14]
 800e324:	4619      	mov	r1, r3
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f7ff fde3 	bl	800def2 <USBD_CoreFindEP>
 800e32c:	4603      	mov	r3, r0
 800e32e:	737b      	strb	r3, [r7, #13]
                    if (((uint8_t) idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800e330:	7b7b      	ldrb	r3, [r7, #13]
 800e332:	2bff      	cmp	r3, #255	@ 0xff
 800e334:	d01f      	beq.n	800e376 <USBD_StdEPReq+0x1c6>
 800e336:	7b7b      	ldrb	r3, [r7, #13]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d11c      	bne.n	800e376 <USBD_StdEPReq+0x1c6>
                        pdev->classId = idx;
 800e33c:	7b7a      	ldrb	r2, [r7, #13]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                        /* Call the class data out function to manage the request */
                        if (pdev->pClass[idx]->Setup != NULL) {
 800e344:	7b7a      	ldrb	r2, [r7, #13]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	32ae      	adds	r2, #174	@ 0xae
 800e34a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e34e:	689b      	ldr	r3, [r3, #8]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d010      	beq.n	800e376 <USBD_StdEPReq+0x1c6>
                            ret = (USBD_StatusTypeDef) (pdev->pClass[idx]->Setup(pdev, req));
 800e354:	7b7a      	ldrb	r2, [r7, #13]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	32ae      	adds	r2, #174	@ 0xae
 800e35a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e35e:	689b      	ldr	r3, [r3, #8]
 800e360:	6839      	ldr	r1, [r7, #0]
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	4798      	blx	r3
 800e366:	4603      	mov	r3, r0
 800e368:	73fb      	strb	r3, [r7, #15]
                        }
                    }
                }
                break;
 800e36a:	e004      	b.n	800e376 <USBD_StdEPReq+0x1c6>

            default:
                USBD_CtlError(pdev, req);
 800e36c:	6839      	ldr	r1, [r7, #0]
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 fc05 	bl	800eb7e <USBD_CtlError>
                break;
 800e374:	e000      	b.n	800e378 <USBD_StdEPReq+0x1c8>
                break;
 800e376:	bf00      	nop
            }
            break;
 800e378:	e0ad      	b.n	800e4d6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
            switch (pdev->dev_state) {
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e380:	b2db      	uxtb	r3, r3
 800e382:	2b02      	cmp	r3, #2
 800e384:	d002      	beq.n	800e38c <USBD_StdEPReq+0x1dc>
 800e386:	2b03      	cmp	r3, #3
 800e388:	d033      	beq.n	800e3f2 <USBD_StdEPReq+0x242>
 800e38a:	e099      	b.n	800e4c0 <USBD_StdEPReq+0x310>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 800e38c:	7bbb      	ldrb	r3, [r7, #14]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d007      	beq.n	800e3a2 <USBD_StdEPReq+0x1f2>
 800e392:	7bbb      	ldrb	r3, [r7, #14]
 800e394:	2b80      	cmp	r3, #128	@ 0x80
 800e396:	d004      	beq.n	800e3a2 <USBD_StdEPReq+0x1f2>
                    USBD_CtlError(pdev, req);
 800e398:	6839      	ldr	r1, [r7, #0]
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 fbef 	bl	800eb7e <USBD_CtlError>
                    break;
 800e3a0:	e093      	b.n	800e4ca <USBD_StdEPReq+0x31a>
                }
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : &pdev->ep_out[ep_addr & 0x7FU];
 800e3a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	da0b      	bge.n	800e3c2 <USBD_StdEPReq+0x212>
 800e3aa:	7bbb      	ldrb	r3, [r7, #14]
 800e3ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	4413      	add	r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	3310      	adds	r3, #16
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	4413      	add	r3, r2
 800e3be:	3304      	adds	r3, #4
 800e3c0:	e00b      	b.n	800e3da <USBD_StdEPReq+0x22a>
 800e3c2:	7bbb      	ldrb	r3, [r7, #14]
 800e3c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	4413      	add	r3, r2
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	4413      	add	r3, r2
 800e3d8:	3304      	adds	r3, #4
 800e3da:	60bb      	str	r3, [r7, #8]

                pep->status = 0x0000U;
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	739a      	strb	r2, [r3, #14]

                (void) USBD_CtlSendData(pdev, (uint8_t*) &pep->status, 2U);
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	330e      	adds	r3, #14
 800e3e6:	2202      	movs	r2, #2
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 fc44 	bl	800ec78 <USBD_CtlSendData>
                break;
 800e3f0:	e06b      	b.n	800e4ca <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
                if ((ep_addr & 0x80U) == 0x80U) {
 800e3f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	da11      	bge.n	800e41e <USBD_StdEPReq+0x26e>
                    if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U) {
 800e3fa:	7bbb      	ldrb	r3, [r7, #14]
 800e3fc:	f003 020f 	and.w	r2, r3, #15
 800e400:	6879      	ldr	r1, [r7, #4]
 800e402:	4613      	mov	r3, r2
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	4413      	add	r3, r2
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	440b      	add	r3, r1
 800e40c:	3323      	adds	r3, #35	@ 0x23
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d117      	bne.n	800e444 <USBD_StdEPReq+0x294>
                        USBD_CtlError(pdev, req);
 800e414:	6839      	ldr	r1, [r7, #0]
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 fbb1 	bl	800eb7e <USBD_CtlError>
                        break;
 800e41c:	e055      	b.n	800e4ca <USBD_StdEPReq+0x31a>
                    }
                } else {
                    if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U) {
 800e41e:	7bbb      	ldrb	r3, [r7, #14]
 800e420:	f003 020f 	and.w	r2, r3, #15
 800e424:	6879      	ldr	r1, [r7, #4]
 800e426:	4613      	mov	r3, r2
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	4413      	add	r3, r2
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	440b      	add	r3, r1
 800e430:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d104      	bne.n	800e444 <USBD_StdEPReq+0x294>
                        USBD_CtlError(pdev, req);
 800e43a:	6839      	ldr	r1, [r7, #0]
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f000 fb9e 	bl	800eb7e <USBD_CtlError>
                        break;
 800e442:	e042      	b.n	800e4ca <USBD_StdEPReq+0x31a>
                    }
                }

                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : &pdev->ep_out[ep_addr & 0x7FU];
 800e444:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	da0b      	bge.n	800e464 <USBD_StdEPReq+0x2b4>
 800e44c:	7bbb      	ldrb	r3, [r7, #14]
 800e44e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e452:	4613      	mov	r3, r2
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	4413      	add	r3, r2
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	3310      	adds	r3, #16
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	4413      	add	r3, r2
 800e460:	3304      	adds	r3, #4
 800e462:	e00b      	b.n	800e47c <USBD_StdEPReq+0x2cc>
 800e464:	7bbb      	ldrb	r3, [r7, #14]
 800e466:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e46a:	4613      	mov	r3, r2
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	4413      	add	r3, r2
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	4413      	add	r3, r2
 800e47a:	3304      	adds	r3, #4
 800e47c:	60bb      	str	r3, [r7, #8]

                if ((ep_addr == 0x00U) || (ep_addr == 0x80U)) {
 800e47e:	7bbb      	ldrb	r3, [r7, #14]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d002      	beq.n	800e48a <USBD_StdEPReq+0x2da>
 800e484:	7bbb      	ldrb	r3, [r7, #14]
 800e486:	2b80      	cmp	r3, #128	@ 0x80
 800e488:	d103      	bne.n	800e492 <USBD_StdEPReq+0x2e2>
                    pep->status = 0x0000U;
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	2200      	movs	r2, #0
 800e48e:	739a      	strb	r2, [r3, #14]
 800e490:	e00e      	b.n	800e4b0 <USBD_StdEPReq+0x300>
                } else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U) {
 800e492:	7bbb      	ldrb	r3, [r7, #14]
 800e494:	4619      	mov	r1, r3
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f001 f87c 	bl	800f594 <USBD_LL_IsStallEP>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d003      	beq.n	800e4aa <USBD_StdEPReq+0x2fa>
                    pep->status = 0x0001U;
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	739a      	strb	r2, [r3, #14]
 800e4a8:	e002      	b.n	800e4b0 <USBD_StdEPReq+0x300>
                } else {
                    pep->status = 0x0000U;
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	739a      	strb	r2, [r3, #14]
                }

                (void) USBD_CtlSendData(pdev, (uint8_t*) &pep->status, 2U);
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	330e      	adds	r3, #14
 800e4b4:	2202      	movs	r2, #2
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f000 fbdd 	bl	800ec78 <USBD_CtlSendData>
                break;
 800e4be:	e004      	b.n	800e4ca <USBD_StdEPReq+0x31a>

            default:
                USBD_CtlError(pdev, req);
 800e4c0:	6839      	ldr	r1, [r7, #0]
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 fb5b 	bl	800eb7e <USBD_CtlError>
                break;
 800e4c8:	bf00      	nop
            }
            break;
 800e4ca:	e004      	b.n	800e4d6 <USBD_StdEPReq+0x326>

        default:
            USBD_CtlError(pdev, req);
 800e4cc:	6839      	ldr	r1, [r7, #0]
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f000 fb55 	bl	800eb7e <USBD_CtlError>
            break;
 800e4d4:	bf00      	nop
        }
        break;
 800e4d6:	e005      	b.n	800e4e4 <USBD_StdEPReq+0x334>

    default:
        USBD_CtlError(pdev, req);
 800e4d8:	6839      	ldr	r1, [r7, #0]
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 fb4f 	bl	800eb7e <USBD_CtlError>
        break;
 800e4e0:	e000      	b.n	800e4e4 <USBD_StdEPReq+0x334>
        break;
 800e4e2:	bf00      	nop
    }

    return ret;
 800e4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3710      	adds	r7, #16
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
	...

0800e4f0 <USBD_GetDescriptor>:
 *         Handle Get Descriptor requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval None
 */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6039      	str	r1, [r7, #0]
    uint16_t len = 0U;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	813b      	strh	r3, [r7, #8]
    uint8_t *pbuf = NULL;
 800e4fe:	2300      	movs	r3, #0
 800e500:	60fb      	str	r3, [r7, #12]
    uint8_t err = 0U;
 800e502:	2300      	movs	r3, #0
 800e504:	72fb      	strb	r3, [r7, #11]

    switch (req->wValue >> 8) {
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	885b      	ldrh	r3, [r3, #2]
 800e50a:	0a1b      	lsrs	r3, r3, #8
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	3b01      	subs	r3, #1
 800e510:	2b06      	cmp	r3, #6
 800e512:	f200 8128 	bhi.w	800e766 <USBD_GetDescriptor+0x276>
 800e516:	a201      	add	r2, pc, #4	@ (adr r2, 800e51c <USBD_GetDescriptor+0x2c>)
 800e518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e51c:	0800e539 	.word	0x0800e539
 800e520:	0800e551 	.word	0x0800e551
 800e524:	0800e591 	.word	0x0800e591
 800e528:	0800e767 	.word	0x0800e767
 800e52c:	0800e767 	.word	0x0800e767
 800e530:	0800e707 	.word	0x0800e707
 800e534:	0800e733 	.word	0x0800e733
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
        pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	7c12      	ldrb	r2, [r2, #16]
 800e544:	f107 0108 	add.w	r1, r7, #8
 800e548:	4610      	mov	r0, r2
 800e54a:	4798      	blx	r3
 800e54c:	60f8      	str	r0, [r7, #12]
        break;
 800e54e:	e112      	b.n	800e776 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	7c1b      	ldrb	r3, [r3, #16]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d10d      	bne.n	800e574 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t*) pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e55e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e560:	f107 0208 	add.w	r2, r7, #8
 800e564:	4610      	mov	r0, r2
 800e566:	4798      	blx	r3
 800e568:	60f8      	str	r0, [r7, #12]
            }
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	3301      	adds	r3, #1
 800e56e:	2202      	movs	r2, #2
 800e570:	701a      	strb	r2, [r3, #0]
            {
                pbuf = (uint8_t*) pdev->pClass[0]->GetFSConfigDescriptor(&len);
            }
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
        }
        break;
 800e572:	e100      	b.n	800e776 <USBD_GetDescriptor+0x286>
                pbuf = (uint8_t*) pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e57a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e57c:	f107 0208 	add.w	r2, r7, #8
 800e580:	4610      	mov	r0, r2
 800e582:	4798      	blx	r3
 800e584:	60f8      	str	r0, [r7, #12]
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	3301      	adds	r3, #1
 800e58a:	2202      	movs	r2, #2
 800e58c:	701a      	strb	r2, [r3, #0]
        break;
 800e58e:	e0f2      	b.n	800e776 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
        switch ((uint8_t) (req->wValue)) {
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	885b      	ldrh	r3, [r3, #2]
 800e594:	b2db      	uxtb	r3, r3
 800e596:	2b05      	cmp	r3, #5
 800e598:	f200 80ac 	bhi.w	800e6f4 <USBD_GetDescriptor+0x204>
 800e59c:	a201      	add	r2, pc, #4	@ (adr r2, 800e5a4 <USBD_GetDescriptor+0xb4>)
 800e59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a2:	bf00      	nop
 800e5a4:	0800e5bd 	.word	0x0800e5bd
 800e5a8:	0800e5f1 	.word	0x0800e5f1
 800e5ac:	0800e625 	.word	0x0800e625
 800e5b0:	0800e659 	.word	0x0800e659
 800e5b4:	0800e68d 	.word	0x0800e68d
 800e5b8:	0800e6c1 	.word	0x0800e6c1
        case USBD_IDX_LANGID_STR:
            if (pdev->pDesc->GetLangIDStrDescriptor != NULL) {
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00b      	beq.n	800e5e0 <USBD_GetDescriptor+0xf0>
                pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	7c12      	ldrb	r2, [r2, #16]
 800e5d4:	f107 0108 	add.w	r1, r7, #8
 800e5d8:	4610      	mov	r0, r2
 800e5da:	4798      	blx	r3
 800e5dc:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800e5de:	e091      	b.n	800e704 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800e5e0:	6839      	ldr	r1, [r7, #0]
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 facb 	bl	800eb7e <USBD_CtlError>
                err++;
 800e5e8:	7afb      	ldrb	r3, [r7, #11]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	72fb      	strb	r3, [r7, #11]
            break;
 800e5ee:	e089      	b.n	800e704 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
            if (pdev->pDesc->GetManufacturerStrDescriptor != NULL) {
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d00b      	beq.n	800e614 <USBD_GetDescriptor+0x124>
                pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	7c12      	ldrb	r2, [r2, #16]
 800e608:	f107 0108 	add.w	r1, r7, #8
 800e60c:	4610      	mov	r0, r2
 800e60e:	4798      	blx	r3
 800e610:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800e612:	e077      	b.n	800e704 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800e614:	6839      	ldr	r1, [r7, #0]
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f000 fab1 	bl	800eb7e <USBD_CtlError>
                err++;
 800e61c:	7afb      	ldrb	r3, [r7, #11]
 800e61e:	3301      	adds	r3, #1
 800e620:	72fb      	strb	r3, [r7, #11]
            break;
 800e622:	e06f      	b.n	800e704 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
            if (pdev->pDesc->GetProductStrDescriptor != NULL) {
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00b      	beq.n	800e648 <USBD_GetDescriptor+0x158>
                pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	687a      	ldr	r2, [r7, #4]
 800e63a:	7c12      	ldrb	r2, [r2, #16]
 800e63c:	f107 0108 	add.w	r1, r7, #8
 800e640:	4610      	mov	r0, r2
 800e642:	4798      	blx	r3
 800e644:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800e646:	e05d      	b.n	800e704 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800e648:	6839      	ldr	r1, [r7, #0]
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 fa97 	bl	800eb7e <USBD_CtlError>
                err++;
 800e650:	7afb      	ldrb	r3, [r7, #11]
 800e652:	3301      	adds	r3, #1
 800e654:	72fb      	strb	r3, [r7, #11]
            break;
 800e656:	e055      	b.n	800e704 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
            if (pdev->pDesc->GetSerialStrDescriptor != NULL) {
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e65e:	691b      	ldr	r3, [r3, #16]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d00b      	beq.n	800e67c <USBD_GetDescriptor+0x18c>
                pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e66a:	691b      	ldr	r3, [r3, #16]
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	7c12      	ldrb	r2, [r2, #16]
 800e670:	f107 0108 	add.w	r1, r7, #8
 800e674:	4610      	mov	r0, r2
 800e676:	4798      	blx	r3
 800e678:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800e67a:	e043      	b.n	800e704 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800e67c:	6839      	ldr	r1, [r7, #0]
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 fa7d 	bl	800eb7e <USBD_CtlError>
                err++;
 800e684:	7afb      	ldrb	r3, [r7, #11]
 800e686:	3301      	adds	r3, #1
 800e688:	72fb      	strb	r3, [r7, #11]
            break;
 800e68a:	e03b      	b.n	800e704 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
            if (pdev->pDesc->GetConfigurationStrDescriptor != NULL) {
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e692:	695b      	ldr	r3, [r3, #20]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d00b      	beq.n	800e6b0 <USBD_GetDescriptor+0x1c0>
                pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e69e:	695b      	ldr	r3, [r3, #20]
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	7c12      	ldrb	r2, [r2, #16]
 800e6a4:	f107 0108 	add.w	r1, r7, #8
 800e6a8:	4610      	mov	r0, r2
 800e6aa:	4798      	blx	r3
 800e6ac:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800e6ae:	e029      	b.n	800e704 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800e6b0:	6839      	ldr	r1, [r7, #0]
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f000 fa63 	bl	800eb7e <USBD_CtlError>
                err++;
 800e6b8:	7afb      	ldrb	r3, [r7, #11]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	72fb      	strb	r3, [r7, #11]
            break;
 800e6be:	e021      	b.n	800e704 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
            if (pdev->pDesc->GetInterfaceStrDescriptor != NULL) {
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6c6:	699b      	ldr	r3, [r3, #24]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d00b      	beq.n	800e6e4 <USBD_GetDescriptor+0x1f4>
                pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6d2:	699b      	ldr	r3, [r3, #24]
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	7c12      	ldrb	r2, [r2, #16]
 800e6d8:	f107 0108 	add.w	r1, r7, #8
 800e6dc:	4610      	mov	r0, r2
 800e6de:	4798      	blx	r3
 800e6e0:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800e6e2:	e00f      	b.n	800e704 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800e6e4:	6839      	ldr	r1, [r7, #0]
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f000 fa49 	bl	800eb7e <USBD_CtlError>
                err++;
 800e6ec:	7afb      	ldrb	r3, [r7, #11]
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	72fb      	strb	r3, [r7, #11]
            break;
 800e6f2:	e007      	b.n	800e704 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
            USBD_CtlError(pdev, req);
 800e6f4:	6839      	ldr	r1, [r7, #0]
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f000 fa41 	bl	800eb7e <USBD_CtlError>
            err++;
 800e6fc:	7afb      	ldrb	r3, [r7, #11]
 800e6fe:	3301      	adds	r3, #1
 800e700:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
            break;
 800e702:	bf00      	nop
        }
        break;
 800e704:	e037      	b.n	800e776 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	7c1b      	ldrb	r3, [r3, #16]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d109      	bne.n	800e722 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t*) pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e716:	f107 0208 	add.w	r2, r7, #8
 800e71a:	4610      	mov	r0, r2
 800e71c:	4798      	blx	r3
 800e71e:	60f8      	str	r0, [r7, #12]
            }
        } else {
            USBD_CtlError(pdev, req);
            err++;
        }
        break;
 800e720:	e029      	b.n	800e776 <USBD_GetDescriptor+0x286>
            USBD_CtlError(pdev, req);
 800e722:	6839      	ldr	r1, [r7, #0]
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f000 fa2a 	bl	800eb7e <USBD_CtlError>
            err++;
 800e72a:	7afb      	ldrb	r3, [r7, #11]
 800e72c:	3301      	adds	r3, #1
 800e72e:	72fb      	strb	r3, [r7, #11]
        break;
 800e730:	e021      	b.n	800e776 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	7c1b      	ldrb	r3, [r3, #16]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d10d      	bne.n	800e756 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t*) pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e742:	f107 0208 	add.w	r2, r7, #8
 800e746:	4610      	mov	r0, r2
 800e748:	4798      	blx	r3
 800e74a:	60f8      	str	r0, [r7, #12]
            }
            pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	3301      	adds	r3, #1
 800e750:	2207      	movs	r2, #7
 800e752:	701a      	strb	r2, [r3, #0]
        } else {
            USBD_CtlError(pdev, req);
            err++;
        }
        break;
 800e754:	e00f      	b.n	800e776 <USBD_GetDescriptor+0x286>
            USBD_CtlError(pdev, req);
 800e756:	6839      	ldr	r1, [r7, #0]
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f000 fa10 	bl	800eb7e <USBD_CtlError>
            err++;
 800e75e:	7afb      	ldrb	r3, [r7, #11]
 800e760:	3301      	adds	r3, #1
 800e762:	72fb      	strb	r3, [r7, #11]
        break;
 800e764:	e007      	b.n	800e776 <USBD_GetDescriptor+0x286>

    default:
        USBD_CtlError(pdev, req);
 800e766:	6839      	ldr	r1, [r7, #0]
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 fa08 	bl	800eb7e <USBD_CtlError>
        err++;
 800e76e:	7afb      	ldrb	r3, [r7, #11]
 800e770:	3301      	adds	r3, #1
 800e772:	72fb      	strb	r3, [r7, #11]
        break;
 800e774:	bf00      	nop
    }

    if (err != 0U) {
 800e776:	7afb      	ldrb	r3, [r7, #11]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d11e      	bne.n	800e7ba <USBD_GetDescriptor+0x2ca>
        return;
    }

    if (req->wLength != 0U) {
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	88db      	ldrh	r3, [r3, #6]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d016      	beq.n	800e7b2 <USBD_GetDescriptor+0x2c2>
        if (len != 0U) {
 800e784:	893b      	ldrh	r3, [r7, #8]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d00e      	beq.n	800e7a8 <USBD_GetDescriptor+0x2b8>
            len = MIN(len, req->wLength);
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	88da      	ldrh	r2, [r3, #6]
 800e78e:	893b      	ldrh	r3, [r7, #8]
 800e790:	4293      	cmp	r3, r2
 800e792:	bf28      	it	cs
 800e794:	4613      	movcs	r3, r2
 800e796:	b29b      	uxth	r3, r3
 800e798:	813b      	strh	r3, [r7, #8]
            (void) USBD_CtlSendData(pdev, pbuf, len);
 800e79a:	893b      	ldrh	r3, [r7, #8]
 800e79c:	461a      	mov	r2, r3
 800e79e:	68f9      	ldr	r1, [r7, #12]
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f000 fa69 	bl	800ec78 <USBD_CtlSendData>
 800e7a6:	e009      	b.n	800e7bc <USBD_GetDescriptor+0x2cc>
        } else {
            USBD_CtlError(pdev, req);
 800e7a8:	6839      	ldr	r1, [r7, #0]
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f000 f9e7 	bl	800eb7e <USBD_CtlError>
 800e7b0:	e004      	b.n	800e7bc <USBD_GetDescriptor+0x2cc>
        }
    } else {
        (void) USBD_CtlSendStatus(pdev);
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 fac1 	bl	800ed3a <USBD_CtlSendStatus>
 800e7b8:	e000      	b.n	800e7bc <USBD_GetDescriptor+0x2cc>
        return;
 800e7ba:	bf00      	nop
    }
}
 800e7bc:	3710      	adds	r7, #16
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	bf00      	nop

0800e7c4 <USBD_SetAddress>:
 *         Set device address
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval None
 */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	6039      	str	r1, [r7, #0]
    uint8_t dev_addr;

    if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U)) {
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	889b      	ldrh	r3, [r3, #4]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d131      	bne.n	800e83a <USBD_SetAddress+0x76>
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	88db      	ldrh	r3, [r3, #6]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d12d      	bne.n	800e83a <USBD_SetAddress+0x76>
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	885b      	ldrh	r3, [r3, #2]
 800e7e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800e7e4:	d829      	bhi.n	800e83a <USBD_SetAddress+0x76>
        dev_addr = (uint8_t) (req->wValue) & 0x7FU;
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	885b      	ldrh	r3, [r3, #2]
 800e7ea:	b2db      	uxtb	r3, r3
 800e7ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e7f0:	73fb      	strb	r3, [r7, #15]

        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7f8:	b2db      	uxtb	r3, r3
 800e7fa:	2b03      	cmp	r3, #3
 800e7fc:	d104      	bne.n	800e808 <USBD_SetAddress+0x44>
            USBD_CtlError(pdev, req);
 800e7fe:	6839      	ldr	r1, [r7, #0]
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 f9bc 	bl	800eb7e <USBD_CtlError>
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800e806:	e01d      	b.n	800e844 <USBD_SetAddress+0x80>
        } else {
            pdev->dev_address = dev_addr;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	7bfa      	ldrb	r2, [r7, #15]
 800e80c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
            (void) USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e810:	7bfb      	ldrb	r3, [r7, #15]
 800e812:	4619      	mov	r1, r3
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 fee9 	bl	800f5ec <USBD_LL_SetUSBAddress>
            (void) USBD_CtlSendStatus(pdev);
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 fa8d 	bl	800ed3a <USBD_CtlSendStatus>

            if (dev_addr != 0U) {
 800e820:	7bfb      	ldrb	r3, [r7, #15]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d004      	beq.n	800e830 <USBD_SetAddress+0x6c>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2202      	movs	r2, #2
 800e82a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800e82e:	e009      	b.n	800e844 <USBD_SetAddress+0x80>
            } else {
                pdev->dev_state = USBD_STATE_DEFAULT;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2201      	movs	r2, #1
 800e834:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800e838:	e004      	b.n	800e844 <USBD_SetAddress+0x80>
            }
        }
    } else {
        USBD_CtlError(pdev, req);
 800e83a:	6839      	ldr	r1, [r7, #0]
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f000 f99e 	bl	800eb7e <USBD_CtlError>
    }
}
 800e842:	bf00      	nop
 800e844:	bf00      	nop
 800e846:	3710      	adds	r7, #16
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <USBD_SetConfig>:
 *         Handle Set device configuration request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 800e856:	2300      	movs	r3, #0
 800e858:	73fb      	strb	r3, [r7, #15]
    static uint8_t cfgidx;

    cfgidx = (uint8_t) (req->wValue);
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	885b      	ldrh	r3, [r3, #2]
 800e85e:	b2da      	uxtb	r2, r3
 800e860:	4b4e      	ldr	r3, [pc, #312]	@ (800e99c <USBD_SetConfig+0x150>)
 800e862:	701a      	strb	r2, [r3, #0]

    if (cfgidx > USBD_MAX_NUM_CONFIGURATION) {
 800e864:	4b4d      	ldr	r3, [pc, #308]	@ (800e99c <USBD_SetConfig+0x150>)
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d905      	bls.n	800e878 <USBD_SetConfig+0x2c>
        USBD_CtlError(pdev, req);
 800e86c:	6839      	ldr	r1, [r7, #0]
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f000 f985 	bl	800eb7e <USBD_CtlError>
        return USBD_FAIL;
 800e874:	2303      	movs	r3, #3
 800e876:	e08c      	b.n	800e992 <USBD_SetConfig+0x146>
    }

    switch (pdev->dev_state) {
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	2b02      	cmp	r3, #2
 800e882:	d002      	beq.n	800e88a <USBD_SetConfig+0x3e>
 800e884:	2b03      	cmp	r3, #3
 800e886:	d029      	beq.n	800e8dc <USBD_SetConfig+0x90>
 800e888:	e075      	b.n	800e976 <USBD_SetConfig+0x12a>
    case USBD_STATE_ADDRESSED:
        if (cfgidx != 0U) {
 800e88a:	4b44      	ldr	r3, [pc, #272]	@ (800e99c <USBD_SetConfig+0x150>)
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d020      	beq.n	800e8d4 <USBD_SetConfig+0x88>
            pdev->dev_config = cfgidx;
 800e892:	4b42      	ldr	r3, [pc, #264]	@ (800e99c <USBD_SetConfig+0x150>)
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	461a      	mov	r2, r3
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	605a      	str	r2, [r3, #4]

            ret = USBD_SetClassConfig(pdev, cfgidx);
 800e89c:	4b3f      	ldr	r3, [pc, #252]	@ (800e99c <USBD_SetConfig+0x150>)
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f7fe ffcd 	bl	800d842 <USBD_SetClassConfig>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	73fb      	strb	r3, [r7, #15]

            if (ret != USBD_OK) {
 800e8ac:	7bfb      	ldrb	r3, [r7, #15]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d008      	beq.n	800e8c4 <USBD_SetConfig+0x78>
                USBD_CtlError(pdev, req);
 800e8b2:	6839      	ldr	r1, [r7, #0]
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f000 f962 	bl	800eb7e <USBD_CtlError>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2202      	movs	r2, #2
 800e8be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
#endif /* USBD_USER_REGISTER_CALLBACK */
            }
        } else {
            (void) USBD_CtlSendStatus(pdev);
        }
        break;
 800e8c2:	e065      	b.n	800e990 <USBD_SetConfig+0x144>
                (void) USBD_CtlSendStatus(pdev);
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f000 fa38 	bl	800ed3a <USBD_CtlSendStatus>
                pdev->dev_state = USBD_STATE_CONFIGURED;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2203      	movs	r2, #3
 800e8ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        break;
 800e8d2:	e05d      	b.n	800e990 <USBD_SetConfig+0x144>
            (void) USBD_CtlSendStatus(pdev);
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 fa30 	bl	800ed3a <USBD_CtlSendStatus>
        break;
 800e8da:	e059      	b.n	800e990 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U) {
 800e8dc:	4b2f      	ldr	r3, [pc, #188]	@ (800e99c <USBD_SetConfig+0x150>)
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d112      	bne.n	800e90a <USBD_SetConfig+0xbe>
            pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2202      	movs	r2, #2
 800e8e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
            pdev->dev_config = cfgidx;
 800e8ec:	4b2b      	ldr	r3, [pc, #172]	@ (800e99c <USBD_SetConfig+0x150>)
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	605a      	str	r2, [r3, #4]
            (void) USBD_ClrClassConfig(pdev, cfgidx);
 800e8f6:	4b29      	ldr	r3, [pc, #164]	@ (800e99c <USBD_SetConfig+0x150>)
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f7fe ffbc 	bl	800d87a <USBD_ClrClassConfig>
            (void) USBD_CtlSendStatus(pdev);
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f000 fa19 	bl	800ed3a <USBD_CtlSendStatus>
                (void) USBD_CtlSendStatus(pdev);
            }
        } else {
            (void) USBD_CtlSendStatus(pdev);
        }
        break;
 800e908:	e042      	b.n	800e990 <USBD_SetConfig+0x144>
        } else if (cfgidx != pdev->dev_config) {
 800e90a:	4b24      	ldr	r3, [pc, #144]	@ (800e99c <USBD_SetConfig+0x150>)
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	461a      	mov	r2, r3
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	429a      	cmp	r2, r3
 800e916:	d02a      	beq.n	800e96e <USBD_SetConfig+0x122>
            (void) USBD_ClrClassConfig(pdev, (uint8_t) pdev->dev_config);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	685b      	ldr	r3, [r3, #4]
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	4619      	mov	r1, r3
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f7fe ffaa 	bl	800d87a <USBD_ClrClassConfig>
            pdev->dev_config = cfgidx;
 800e926:	4b1d      	ldr	r3, [pc, #116]	@ (800e99c <USBD_SetConfig+0x150>)
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	461a      	mov	r2, r3
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	605a      	str	r2, [r3, #4]
            ret = USBD_SetClassConfig(pdev, cfgidx);
 800e930:	4b1a      	ldr	r3, [pc, #104]	@ (800e99c <USBD_SetConfig+0x150>)
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	4619      	mov	r1, r3
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f7fe ff83 	bl	800d842 <USBD_SetClassConfig>
 800e93c:	4603      	mov	r3, r0
 800e93e:	73fb      	strb	r3, [r7, #15]
            if (ret != USBD_OK) {
 800e940:	7bfb      	ldrb	r3, [r7, #15]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d00f      	beq.n	800e966 <USBD_SetConfig+0x11a>
                USBD_CtlError(pdev, req);
 800e946:	6839      	ldr	r1, [r7, #0]
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f000 f918 	bl	800eb7e <USBD_CtlError>
                (void) USBD_ClrClassConfig(pdev, (uint8_t) pdev->dev_config);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	b2db      	uxtb	r3, r3
 800e954:	4619      	mov	r1, r3
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f7fe ff8f 	bl	800d87a <USBD_ClrClassConfig>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2202      	movs	r2, #2
 800e960:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        break;
 800e964:	e014      	b.n	800e990 <USBD_SetConfig+0x144>
                (void) USBD_CtlSendStatus(pdev);
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 f9e7 	bl	800ed3a <USBD_CtlSendStatus>
        break;
 800e96c:	e010      	b.n	800e990 <USBD_SetConfig+0x144>
            (void) USBD_CtlSendStatus(pdev);
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f000 f9e3 	bl	800ed3a <USBD_CtlSendStatus>
        break;
 800e974:	e00c      	b.n	800e990 <USBD_SetConfig+0x144>

    default:
        USBD_CtlError(pdev, req);
 800e976:	6839      	ldr	r1, [r7, #0]
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f000 f900 	bl	800eb7e <USBD_CtlError>
        (void) USBD_ClrClassConfig(pdev, cfgidx);
 800e97e:	4b07      	ldr	r3, [pc, #28]	@ (800e99c <USBD_SetConfig+0x150>)
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	4619      	mov	r1, r3
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f7fe ff78 	bl	800d87a <USBD_ClrClassConfig>
        ret = USBD_FAIL;
 800e98a:	2303      	movs	r3, #3
 800e98c:	73fb      	strb	r3, [r7, #15]
        break;
 800e98e:	bf00      	nop
    }

    return ret;
 800e990:	7bfb      	ldrb	r3, [r7, #15]
}
 800e992:	4618      	mov	r0, r3
 800e994:	3710      	adds	r7, #16
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	200001c4 	.word	0x200001c4

0800e9a0 <USBD_GetConfig>:
 *         Handle Get device configuration request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval None
 */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
    if (req->wLength != 1U) {
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	88db      	ldrh	r3, [r3, #6]
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d004      	beq.n	800e9bc <USBD_GetConfig+0x1c>
        USBD_CtlError(pdev, req);
 800e9b2:	6839      	ldr	r1, [r7, #0]
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f000 f8e2 	bl	800eb7e <USBD_CtlError>
        default:
            USBD_CtlError(pdev, req);
            break;
        }
    }
}
 800e9ba:	e023      	b.n	800ea04 <USBD_GetConfig+0x64>
        switch (pdev->dev_state) {
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	2b02      	cmp	r3, #2
 800e9c6:	dc02      	bgt.n	800e9ce <USBD_GetConfig+0x2e>
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	dc03      	bgt.n	800e9d4 <USBD_GetConfig+0x34>
 800e9cc:	e015      	b.n	800e9fa <USBD_GetConfig+0x5a>
 800e9ce:	2b03      	cmp	r3, #3
 800e9d0:	d00b      	beq.n	800e9ea <USBD_GetConfig+0x4a>
 800e9d2:	e012      	b.n	800e9fa <USBD_GetConfig+0x5a>
            pdev->dev_default_config = 0U;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	609a      	str	r2, [r3, #8]
            (void) USBD_CtlSendData(pdev, (uint8_t*) &pdev->dev_default_config, 1U);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	3308      	adds	r3, #8
 800e9de:	2201      	movs	r2, #1
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f000 f948 	bl	800ec78 <USBD_CtlSendData>
            break;
 800e9e8:	e00c      	b.n	800ea04 <USBD_GetConfig+0x64>
            (void) USBD_CtlSendData(pdev, (uint8_t*) &pdev->dev_config, 1U);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	3304      	adds	r3, #4
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f000 f940 	bl	800ec78 <USBD_CtlSendData>
            break;
 800e9f8:	e004      	b.n	800ea04 <USBD_GetConfig+0x64>
            USBD_CtlError(pdev, req);
 800e9fa:	6839      	ldr	r1, [r7, #0]
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f000 f8be 	bl	800eb7e <USBD_CtlError>
            break;
 800ea02:	bf00      	nop
}
 800ea04:	bf00      	nop
 800ea06:	3708      	adds	r7, #8
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}

0800ea0c <USBD_GetStatus>:
 *         Handle Get Status request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval None
 */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	6039      	str	r1, [r7, #0]
    switch (pdev->dev_state) {
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	3b01      	subs	r3, #1
 800ea20:	2b02      	cmp	r3, #2
 800ea22:	d81e      	bhi.n	800ea62 <USBD_GetStatus+0x56>
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
        if (req->wLength != 0x2U) {
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	88db      	ldrh	r3, [r3, #6]
 800ea28:	2b02      	cmp	r3, #2
 800ea2a:	d004      	beq.n	800ea36 <USBD_GetStatus+0x2a>
            USBD_CtlError(pdev, req);
 800ea2c:	6839      	ldr	r1, [r7, #0]
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 f8a5 	bl	800eb7e <USBD_CtlError>
            break;
 800ea34:	e01a      	b.n	800ea6c <USBD_GetStatus+0x60>
        }

#if (USBD_SELF_POWERED == 1U)
        pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

        if (pdev->dev_remote_wakeup != 0U) {
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d005      	beq.n	800ea52 <USBD_GetStatus+0x46>
            pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	68db      	ldr	r3, [r3, #12]
 800ea4a:	f043 0202 	orr.w	r2, r3, #2
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	60da      	str	r2, [r3, #12]
        }

        (void) USBD_CtlSendData(pdev, (uint8_t*) &pdev->dev_config_status, 2U);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	330c      	adds	r3, #12
 800ea56:	2202      	movs	r2, #2
 800ea58:	4619      	mov	r1, r3
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 f90c 	bl	800ec78 <USBD_CtlSendData>
        break;
 800ea60:	e004      	b.n	800ea6c <USBD_GetStatus+0x60>

    default:
        USBD_CtlError(pdev, req);
 800ea62:	6839      	ldr	r1, [r7, #0]
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f000 f88a 	bl	800eb7e <USBD_CtlError>
        break;
 800ea6a:	bf00      	nop
    }
}
 800ea6c:	bf00      	nop
 800ea6e:	3708      	adds	r7, #8
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <USBD_SetFeature>:
 *         Handle Set device feature request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval None
 */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6039      	str	r1, [r7, #0]
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) {
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	885b      	ldrh	r3, [r3, #2]
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d107      	bne.n	800ea96 <USBD_SetFeature+0x22>
        pdev->dev_remote_wakeup = 1U;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2201      	movs	r2, #1
 800ea8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void) USBD_CtlSendStatus(pdev);
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f000 f953 	bl	800ed3a <USBD_CtlSendStatus>
        pdev->dev_test_mode = (uint8_t) (req->wIndex >> 8);
        (void) USBD_CtlSendStatus(pdev);
    } else {
        USBD_CtlError(pdev, req);
    }
}
 800ea94:	e013      	b.n	800eabe <USBD_SetFeature+0x4a>
    } else if (req->wValue == USB_FEATURE_TEST_MODE) {
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	885b      	ldrh	r3, [r3, #2]
 800ea9a:	2b02      	cmp	r3, #2
 800ea9c:	d10b      	bne.n	800eab6 <USBD_SetFeature+0x42>
        pdev->dev_test_mode = (uint8_t) (req->wIndex >> 8);
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	889b      	ldrh	r3, [r3, #4]
 800eaa2:	0a1b      	lsrs	r3, r3, #8
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	b2da      	uxtb	r2, r3
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
        (void) USBD_CtlSendStatus(pdev);
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f000 f943 	bl	800ed3a <USBD_CtlSendStatus>
}
 800eab4:	e003      	b.n	800eabe <USBD_SetFeature+0x4a>
        USBD_CtlError(pdev, req);
 800eab6:	6839      	ldr	r1, [r7, #0]
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 f860 	bl	800eb7e <USBD_CtlError>
}
 800eabe:	bf00      	nop
 800eac0:	3708      	adds	r7, #8
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <USBD_ClrFeature>:
 *         Handle clear device feature request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval None
 */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b082      	sub	sp, #8
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
 800eace:	6039      	str	r1, [r7, #0]
    switch (pdev->dev_state) {
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ead6:	b2db      	uxtb	r3, r3
 800ead8:	3b01      	subs	r3, #1
 800eada:	2b02      	cmp	r3, #2
 800eadc:	d80b      	bhi.n	800eaf6 <USBD_ClrFeature+0x30>
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) {
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	885b      	ldrh	r3, [r3, #2]
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d10c      	bne.n	800eb00 <USBD_ClrFeature+0x3a>
            pdev->dev_remote_wakeup = 0U;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2200      	movs	r2, #0
 800eaea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
            (void) USBD_CtlSendStatus(pdev);
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f000 f923 	bl	800ed3a <USBD_CtlSendStatus>
        }
        break;
 800eaf4:	e004      	b.n	800eb00 <USBD_ClrFeature+0x3a>

    default:
        USBD_CtlError(pdev, req);
 800eaf6:	6839      	ldr	r1, [r7, #0]
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f000 f840 	bl	800eb7e <USBD_CtlError>
        break;
 800eafe:	e000      	b.n	800eb02 <USBD_ClrFeature+0x3c>
        break;
 800eb00:	bf00      	nop
    }
}
 800eb02:	bf00      	nop
 800eb04:	3708      	adds	r7, #8
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}

0800eb0a <USBD_ParseSetupRequest>:
 *         Copy buffer into setup structure
 * @param  req: usb request
 * @param  pdata: setup data pointer
 * @retval None
 */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata) {
 800eb0a:	b580      	push	{r7, lr}
 800eb0c:	b084      	sub	sp, #16
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
 800eb12:	6039      	str	r1, [r7, #0]
    uint8_t *pbuff = pdata;
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	60fb      	str	r3, [r7, #12]

    req->bmRequest = *(uint8_t*) (pbuff);
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	781a      	ldrb	r2, [r3, #0]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	701a      	strb	r2, [r3, #0]

    pbuff++;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	3301      	adds	r3, #1
 800eb24:	60fb      	str	r3, [r7, #12]
    req->bRequest = *(uint8_t*) (pbuff);
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	781a      	ldrb	r2, [r3, #0]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	705a      	strb	r2, [r3, #1]

    pbuff++;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	3301      	adds	r3, #1
 800eb32:	60fb      	str	r3, [r7, #12]
    req->wValue = SWAPBYTE(pbuff);
 800eb34:	68f8      	ldr	r0, [r7, #12]
 800eb36:	f7ff fa3d 	bl	800dfb4 <SWAPBYTE>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	805a      	strh	r2, [r3, #2]

    pbuff++;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	3301      	adds	r3, #1
 800eb46:	60fb      	str	r3, [r7, #12]
    pbuff++;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	60fb      	str	r3, [r7, #12]
    req->wIndex = SWAPBYTE(pbuff);
 800eb4e:	68f8      	ldr	r0, [r7, #12]
 800eb50:	f7ff fa30 	bl	800dfb4 <SWAPBYTE>
 800eb54:	4603      	mov	r3, r0
 800eb56:	461a      	mov	r2, r3
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	809a      	strh	r2, [r3, #4]

    pbuff++;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	3301      	adds	r3, #1
 800eb60:	60fb      	str	r3, [r7, #12]
    pbuff++;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	3301      	adds	r3, #1
 800eb66:	60fb      	str	r3, [r7, #12]
    req->wLength = SWAPBYTE(pbuff);
 800eb68:	68f8      	ldr	r0, [r7, #12]
 800eb6a:	f7ff fa23 	bl	800dfb4 <SWAPBYTE>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	461a      	mov	r2, r3
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	80da      	strh	r2, [r3, #6]
}
 800eb76:	bf00      	nop
 800eb78:	3710      	adds	r7, #16
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}

0800eb7e <USBD_CtlError>:
 *         Handle USB low level Error
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval None
 */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800eb7e:	b580      	push	{r7, lr}
 800eb80:	b082      	sub	sp, #8
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	6078      	str	r0, [r7, #4]
 800eb86:	6039      	str	r1, [r7, #0]
    UNUSED(req);

    (void) USBD_LL_StallEP(pdev, 0x80U);
 800eb88:	2180      	movs	r1, #128	@ 0x80
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f000 fcc4 	bl	800f518 <USBD_LL_StallEP>
    (void) USBD_LL_StallEP(pdev, 0U);
 800eb90:	2100      	movs	r1, #0
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f000 fcc0 	bl	800f518 <USBD_LL_StallEP>
}
 800eb98:	bf00      	nop
 800eb9a:	3708      	adds	r7, #8
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <USBD_GetString>:
 * @param  desc : descriptor buffer
 * @param  unicode : Formatted string buffer (unicode)
 * @param  len : descriptor length
 * @retval None
 */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len) {
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b086      	sub	sp, #24
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	60b9      	str	r1, [r7, #8]
 800ebaa:	607a      	str	r2, [r7, #4]
    uint8_t idx = 0U;
 800ebac:	2300      	movs	r3, #0
 800ebae:	75fb      	strb	r3, [r7, #23]
    uint8_t *pdesc;

    if (desc == NULL) {
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d042      	beq.n	800ec3c <USBD_GetString+0x9c>
        return;
    }

    pdesc = desc;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	613b      	str	r3, [r7, #16]
    *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t )USBD_GetLen(pdesc) * 2U) + 2U);
 800ebba:	6938      	ldr	r0, [r7, #16]
 800ebbc:	f000 f842 	bl	800ec44 <USBD_GetLen>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	005b      	lsls	r3, r3, #1
 800ebc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ebca:	d808      	bhi.n	800ebde <USBD_GetString+0x3e>
 800ebcc:	6938      	ldr	r0, [r7, #16]
 800ebce:	f000 f839 	bl	800ec44 <USBD_GetLen>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	b29b      	uxth	r3, r3
 800ebd8:	005b      	lsls	r3, r3, #1
 800ebda:	b29a      	uxth	r2, r3
 800ebdc:	e001      	b.n	800ebe2 <USBD_GetString+0x42>
 800ebde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	801a      	strh	r2, [r3, #0]

    unicode[idx] = *(uint8_t*) len;
 800ebe6:	7dfb      	ldrb	r3, [r7, #23]
 800ebe8:	68ba      	ldr	r2, [r7, #8]
 800ebea:	4413      	add	r3, r2
 800ebec:	687a      	ldr	r2, [r7, #4]
 800ebee:	7812      	ldrb	r2, [r2, #0]
 800ebf0:	701a      	strb	r2, [r3, #0]
    idx++;
 800ebf2:	7dfb      	ldrb	r3, [r7, #23]
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	75fb      	strb	r3, [r7, #23]
    unicode[idx] = USB_DESC_TYPE_STRING;
 800ebf8:	7dfb      	ldrb	r3, [r7, #23]
 800ebfa:	68ba      	ldr	r2, [r7, #8]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	2203      	movs	r2, #3
 800ec00:	701a      	strb	r2, [r3, #0]
    idx++;
 800ec02:	7dfb      	ldrb	r3, [r7, #23]
 800ec04:	3301      	adds	r3, #1
 800ec06:	75fb      	strb	r3, [r7, #23]

    while (*pdesc != (uint8_t) '\0') {
 800ec08:	e013      	b.n	800ec32 <USBD_GetString+0x92>
        unicode[idx] = *pdesc;
 800ec0a:	7dfb      	ldrb	r3, [r7, #23]
 800ec0c:	68ba      	ldr	r2, [r7, #8]
 800ec0e:	4413      	add	r3, r2
 800ec10:	693a      	ldr	r2, [r7, #16]
 800ec12:	7812      	ldrb	r2, [r2, #0]
 800ec14:	701a      	strb	r2, [r3, #0]
        pdesc++;
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	3301      	adds	r3, #1
 800ec1a:	613b      	str	r3, [r7, #16]
        idx++;
 800ec1c:	7dfb      	ldrb	r3, [r7, #23]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	75fb      	strb	r3, [r7, #23]

        unicode[idx] = 0U;
 800ec22:	7dfb      	ldrb	r3, [r7, #23]
 800ec24:	68ba      	ldr	r2, [r7, #8]
 800ec26:	4413      	add	r3, r2
 800ec28:	2200      	movs	r2, #0
 800ec2a:	701a      	strb	r2, [r3, #0]
        idx++;
 800ec2c:	7dfb      	ldrb	r3, [r7, #23]
 800ec2e:	3301      	adds	r3, #1
 800ec30:	75fb      	strb	r3, [r7, #23]
    while (*pdesc != (uint8_t) '\0') {
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d1e7      	bne.n	800ec0a <USBD_GetString+0x6a>
 800ec3a:	e000      	b.n	800ec3e <USBD_GetString+0x9e>
        return;
 800ec3c:	bf00      	nop
    }
}
 800ec3e:	3718      	adds	r7, #24
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <USBD_GetLen>:
 * @brief  USBD_GetLen
 *         return the string length
 * @param  buf : pointer to the ascii string buffer
 * @retval string length
 */
static uint8_t USBD_GetLen(uint8_t *buf) {
 800ec44:	b480      	push	{r7}
 800ec46:	b085      	sub	sp, #20
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
    uint8_t len = 0U;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	73fb      	strb	r3, [r7, #15]
    uint8_t *pbuff = buf;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	60bb      	str	r3, [r7, #8]

    while (*pbuff != (uint8_t) '\0') {
 800ec54:	e005      	b.n	800ec62 <USBD_GetLen+0x1e>
        len++;
 800ec56:	7bfb      	ldrb	r3, [r7, #15]
 800ec58:	3301      	adds	r3, #1
 800ec5a:	73fb      	strb	r3, [r7, #15]
        pbuff++;
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	3301      	adds	r3, #1
 800ec60:	60bb      	str	r3, [r7, #8]
    while (*pbuff != (uint8_t) '\0') {
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	781b      	ldrb	r3, [r3, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d1f5      	bne.n	800ec56 <USBD_GetLen+0x12>
    }

    return len;
 800ec6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3714      	adds	r7, #20
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr

0800ec78 <USBD_CtlSendData>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be sent
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len) {
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b084      	sub	sp, #16
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	607a      	str	r2, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_DATA_IN;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2202      	movs	r2, #2
 800ec88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    pdev->ep_in[0].total_length = len;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	687a      	ldr	r2, [r7, #4]
 800ec90:	615a      	str	r2, [r3, #20]
    pdev->ep_in[0].pbuffer = pbuf;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	68ba      	ldr	r2, [r7, #8]
 800ec96:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
    pdev->ep_in[0].rem_length = len;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	687a      	ldr	r2, [r7, #4]
 800ec9c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

    /* Start the transfer */
    (void) USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	68ba      	ldr	r2, [r7, #8]
 800eca2:	2100      	movs	r1, #0
 800eca4:	68f8      	ldr	r0, [r7, #12]
 800eca6:	f000 fcc0 	bl	800f62a <USBD_LL_Transmit>

    return USBD_OK;
 800ecaa:	2300      	movs	r3, #0
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3710      	adds	r7, #16
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <USBD_CtlContinueSendData>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be sent
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len) {
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b084      	sub	sp, #16
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	60f8      	str	r0, [r7, #12]
 800ecbc:	60b9      	str	r1, [r7, #8]
 800ecbe:	607a      	str	r2, [r7, #4]
    /* Start the next transfer */
    (void) USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	68ba      	ldr	r2, [r7, #8]
 800ecc4:	2100      	movs	r1, #0
 800ecc6:	68f8      	ldr	r0, [r7, #12]
 800ecc8:	f000 fcaf 	bl	800f62a <USBD_LL_Transmit>

    return USBD_OK;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3710      	adds	r7, #16
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}

0800ecd6 <USBD_CtlPrepareRx>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be received
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len) {
 800ecd6:	b580      	push	{r7, lr}
 800ecd8:	b084      	sub	sp, #16
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	60f8      	str	r0, [r7, #12]
 800ecde:	60b9      	str	r1, [r7, #8]
 800ece0:	607a      	str	r2, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2203      	movs	r2, #3
 800ece6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    pdev->ep_out[0].total_length = len;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
    pdev->ep_out[0].pbuffer = pbuf;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	68ba      	ldr	r2, [r7, #8]
 800ecf6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
    pdev->ep_out[0].rem_length = len;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	687a      	ldr	r2, [r7, #4]
 800ecfe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

    /* Start the transfer */
    (void) USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	68ba      	ldr	r2, [r7, #8]
 800ed06:	2100      	movs	r1, #0
 800ed08:	68f8      	ldr	r0, [r7, #12]
 800ed0a:	f000 fcaf 	bl	800f66c <USBD_LL_PrepareReceive>

    return USBD_OK;
 800ed0e:	2300      	movs	r3, #0
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3710      	adds	r7, #16
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <USBD_CtlContinueRx>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be received
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len) {
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	607a      	str	r2, [r7, #4]
    (void) USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	68ba      	ldr	r2, [r7, #8]
 800ed28:	2100      	movs	r1, #0
 800ed2a:	68f8      	ldr	r0, [r7, #12]
 800ed2c:	f000 fc9e 	bl	800f66c <USBD_LL_PrepareReceive>

    return USBD_OK;
 800ed30:	2300      	movs	r3, #0
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3710      	adds	r7, #16
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}

0800ed3a <USBD_CtlSendStatus>:
 * @brief  USBD_CtlSendStatus
 *         send zero lzngth packet on the ctl pipe
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev) {
 800ed3a:	b580      	push	{r7, lr}
 800ed3c:	b082      	sub	sp, #8
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	6078      	str	r0, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2204      	movs	r2, #4
 800ed46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

    /* Start the transfer */
    (void) USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	2100      	movs	r1, #0
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f000 fc6a 	bl	800f62a <USBD_LL_Transmit>

    return USBD_OK;
 800ed56:	2300      	movs	r3, #0
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3708      	adds	r7, #8
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <USBD_CtlReceiveStatus>:
 * @brief  USBD_CtlReceiveStatus
 *         receive zero lzngth packet on the ctl pipe
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev) {
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b082      	sub	sp, #8
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2205      	movs	r2, #5
 800ed6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

    /* Start the transfer */
    (void) USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ed70:	2300      	movs	r3, #0
 800ed72:	2200      	movs	r2, #0
 800ed74:	2100      	movs	r1, #0
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 fc78 	bl	800f66c <USBD_LL_PrepareReceive>

    return USBD_OK;
 800ed7c:	2300      	movs	r3, #0
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3708      	adds	r7, #8
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
	...

0800ed88 <MX_USB_DEVICE_Init>:

/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void) {
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	4912      	ldr	r1, [pc, #72]	@ (800edd8 <MX_USB_DEVICE_Init+0x50>)
 800ed90:	4812      	ldr	r0, [pc, #72]	@ (800eddc <MX_USB_DEVICE_Init+0x54>)
 800ed92:	f7fe fcd9 	bl	800d748 <USBD_Init>
 800ed96:	4603      	mov	r3, r0
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d001      	beq.n	800eda0 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 800ed9c:	f7f9 fd1e 	bl	80087dc <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800eda0:	490f      	ldr	r1, [pc, #60]	@ (800ede0 <MX_USB_DEVICE_Init+0x58>)
 800eda2:	480e      	ldr	r0, [pc, #56]	@ (800eddc <MX_USB_DEVICE_Init+0x54>)
 800eda4:	f7fe fd00 	bl	800d7a8 <USBD_RegisterClass>
 800eda8:	4603      	mov	r3, r0
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d001      	beq.n	800edb2 <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 800edae:	f7f9 fd15 	bl	80087dc <Error_Handler>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800edb2:	490c      	ldr	r1, [pc, #48]	@ (800ede4 <MX_USB_DEVICE_Init+0x5c>)
 800edb4:	4809      	ldr	r0, [pc, #36]	@ (800eddc <MX_USB_DEVICE_Init+0x54>)
 800edb6:	f7fe fc37 	bl	800d628 <USBD_CDC_RegisterInterface>
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d001      	beq.n	800edc4 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 800edc0:	f7f9 fd0c 	bl	80087dc <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800edc4:	4805      	ldr	r0, [pc, #20]	@ (800eddc <MX_USB_DEVICE_Init+0x54>)
 800edc6:	f7fe fd25 	bl	800d814 <USBD_Start>
 800edca:	4603      	mov	r3, r0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d001      	beq.n	800edd4 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 800edd0:	f7f9 fd04 	bl	80087dc <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800edd4:	bf00      	nop
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	200000ac 	.word	0x200000ac
 800eddc:	200001c8 	.word	0x200001c8
 800ede0:	20000018 	.word	0x20000018
 800ede4:	20000098 	.word	0x20000098

0800ede8 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 800ede8:	b580      	push	{r7, lr}
 800edea:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800edec:	2200      	movs	r2, #0
 800edee:	4905      	ldr	r1, [pc, #20]	@ (800ee04 <CDC_Init_FS+0x1c>)
 800edf0:	4805      	ldr	r0, [pc, #20]	@ (800ee08 <CDC_Init_FS+0x20>)
 800edf2:	f7fe fc33 	bl	800d65c <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800edf6:	4905      	ldr	r1, [pc, #20]	@ (800ee0c <CDC_Init_FS+0x24>)
 800edf8:	4803      	ldr	r0, [pc, #12]	@ (800ee08 <CDC_Init_FS+0x20>)
 800edfa:	f7fe fc51 	bl	800d6a0 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 800edfe:	2300      	movs	r3, #0
    /* USER CODE END 3 */
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	20000ca4 	.word	0x20000ca4
 800ee08:	200001c8 	.word	0x200001c8
 800ee0c:	200004a4 	.word	0x200004a4

0800ee10 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 800ee10:	b480      	push	{r7}
 800ee12:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800ee14:	2300      	movs	r3, #0
    /* USER CODE END 4 */
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1e:	4770      	bx	lr

0800ee20 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 800ee20:	b480      	push	{r7}
 800ee22:	b083      	sub	sp, #12
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	4603      	mov	r3, r0
 800ee28:	6039      	str	r1, [r7, #0]
 800ee2a:	71fb      	strb	r3, [r7, #7]
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	80bb      	strh	r3, [r7, #4]
    /* USER CODE BEGIN 5 */
    switch (cmd) {
 800ee30:	79fb      	ldrb	r3, [r7, #7]
 800ee32:	2b23      	cmp	r3, #35	@ 0x23
 800ee34:	d84a      	bhi.n	800eecc <CDC_Control_FS+0xac>
 800ee36:	a201      	add	r2, pc, #4	@ (adr r2, 800ee3c <CDC_Control_FS+0x1c>)
 800ee38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3c:	0800eecd 	.word	0x0800eecd
 800ee40:	0800eecd 	.word	0x0800eecd
 800ee44:	0800eecd 	.word	0x0800eecd
 800ee48:	0800eecd 	.word	0x0800eecd
 800ee4c:	0800eecd 	.word	0x0800eecd
 800ee50:	0800eecd 	.word	0x0800eecd
 800ee54:	0800eecd 	.word	0x0800eecd
 800ee58:	0800eecd 	.word	0x0800eecd
 800ee5c:	0800eecd 	.word	0x0800eecd
 800ee60:	0800eecd 	.word	0x0800eecd
 800ee64:	0800eecd 	.word	0x0800eecd
 800ee68:	0800eecd 	.word	0x0800eecd
 800ee6c:	0800eecd 	.word	0x0800eecd
 800ee70:	0800eecd 	.word	0x0800eecd
 800ee74:	0800eecd 	.word	0x0800eecd
 800ee78:	0800eecd 	.word	0x0800eecd
 800ee7c:	0800eecd 	.word	0x0800eecd
 800ee80:	0800eecd 	.word	0x0800eecd
 800ee84:	0800eecd 	.word	0x0800eecd
 800ee88:	0800eecd 	.word	0x0800eecd
 800ee8c:	0800eecd 	.word	0x0800eecd
 800ee90:	0800eecd 	.word	0x0800eecd
 800ee94:	0800eecd 	.word	0x0800eecd
 800ee98:	0800eecd 	.word	0x0800eecd
 800ee9c:	0800eecd 	.word	0x0800eecd
 800eea0:	0800eecd 	.word	0x0800eecd
 800eea4:	0800eecd 	.word	0x0800eecd
 800eea8:	0800eecd 	.word	0x0800eecd
 800eeac:	0800eecd 	.word	0x0800eecd
 800eeb0:	0800eecd 	.word	0x0800eecd
 800eeb4:	0800eecd 	.word	0x0800eecd
 800eeb8:	0800eecd 	.word	0x0800eecd
 800eebc:	0800eecd 	.word	0x0800eecd
 800eec0:	0800eecd 	.word	0x0800eecd
 800eec4:	0800eecd 	.word	0x0800eecd
 800eec8:	0800eecd 	.word	0x0800eecd
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 800eecc:	bf00      	nop
    }

    return (USBD_OK);
 800eece:	2300      	movs	r3, #0
    /* USER CODE END 5 */
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	370c      	adds	r7, #12
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr

0800eedc <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 800eedc:	b580      	push	{r7, lr}
 800eede:	b082      	sub	sp, #8
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eee6:	6879      	ldr	r1, [r7, #4]
 800eee8:	4805      	ldr	r0, [pc, #20]	@ (800ef00 <CDC_Receive_FS+0x24>)
 800eeea:	f7fe fbd9 	bl	800d6a0 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eeee:	4804      	ldr	r0, [pc, #16]	@ (800ef00 <CDC_Receive_FS+0x24>)
 800eef0:	f7fe fbf4 	bl	800d6dc <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800eef4:	2300      	movs	r3, #0
    /* USER CODE END 6 */
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3708      	adds	r7, #8
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	200001c8 	.word	0x200001c8

0800ef04 <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 800ef04:	b480      	push	{r7}
 800ef06:	b087      	sub	sp, #28
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	60b9      	str	r1, [r7, #8]
 800ef0e:	4613      	mov	r3, r2
 800ef10:	71fb      	strb	r3, [r7, #7]
    uint8_t result = USBD_OK;
 800ef12:	2300      	movs	r3, #0
 800ef14:	75fb      	strb	r3, [r7, #23]
    /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
    /* USER CODE END 13 */
    return result;
 800ef16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	371c      	adds	r7, #28
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr
	...

0800ef28 <USBD_FS_DeviceDescriptor>:
 * @brief  Return the device descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t* USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800ef28:	b480      	push	{r7}
 800ef2a:	b083      	sub	sp, #12
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	4603      	mov	r3, r0
 800ef30:	6039      	str	r1, [r7, #0]
 800ef32:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_FS_DeviceDesc);
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	2212      	movs	r2, #18
 800ef38:	801a      	strh	r2, [r3, #0]
    return USBD_FS_DeviceDesc;
 800ef3a:	4b03      	ldr	r3, [pc, #12]	@ (800ef48 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	370c      	adds	r7, #12
 800ef40:	46bd      	mov	sp, r7
 800ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef46:	4770      	bx	lr
 800ef48:	200000c8 	.word	0x200000c8

0800ef4c <USBD_FS_LangIDStrDescriptor>:
 * @brief  Return the LangID string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t* USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800ef4c:	b480      	push	{r7}
 800ef4e:	b083      	sub	sp, #12
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	4603      	mov	r3, r0
 800ef54:	6039      	str	r1, [r7, #0]
 800ef56:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_LangIDDesc);
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	2204      	movs	r2, #4
 800ef5c:	801a      	strh	r2, [r3, #0]
    return USBD_LangIDDesc;
 800ef5e:	4b03      	ldr	r3, [pc, #12]	@ (800ef6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	370c      	adds	r7, #12
 800ef64:	46bd      	mov	sp, r7
 800ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6a:	4770      	bx	lr
 800ef6c:	200000dc 	.word	0x200000dc

0800ef70 <USBD_FS_ProductStrDescriptor>:
 * @brief  Return the product string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t* USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	4603      	mov	r3, r0
 800ef78:	6039      	str	r1, [r7, #0]
 800ef7a:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 800ef7c:	79fb      	ldrb	r3, [r7, #7]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d105      	bne.n	800ef8e <USBD_FS_ProductStrDescriptor+0x1e>
        USBD_GetString((uint8_t*) USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef82:	683a      	ldr	r2, [r7, #0]
 800ef84:	4907      	ldr	r1, [pc, #28]	@ (800efa4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef86:	4808      	ldr	r0, [pc, #32]	@ (800efa8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ef88:	f7ff fe0a 	bl	800eba0 <USBD_GetString>
 800ef8c:	e004      	b.n	800ef98 <USBD_FS_ProductStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t*) USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef8e:	683a      	ldr	r2, [r7, #0]
 800ef90:	4904      	ldr	r1, [pc, #16]	@ (800efa4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef92:	4805      	ldr	r0, [pc, #20]	@ (800efa8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ef94:	f7ff fe04 	bl	800eba0 <USBD_GetString>
    }
    return USBD_StrDesc;
 800ef98:	4b02      	ldr	r3, [pc, #8]	@ (800efa4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3708      	adds	r7, #8
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	200014a4 	.word	0x200014a4
 800efa8:	08010704 	.word	0x08010704

0800efac <USBD_FS_ManufacturerStrDescriptor>:
 * @brief  Return the manufacturer string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t* USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	4603      	mov	r3, r0
 800efb4:	6039      	str	r1, [r7, #0]
 800efb6:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    USBD_GetString((uint8_t*) USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800efb8:	683a      	ldr	r2, [r7, #0]
 800efba:	4904      	ldr	r1, [pc, #16]	@ (800efcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800efbc:	4804      	ldr	r0, [pc, #16]	@ (800efd0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800efbe:	f7ff fdef 	bl	800eba0 <USBD_GetString>
    return USBD_StrDesc;
 800efc2:	4b02      	ldr	r3, [pc, #8]	@ (800efcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3708      	adds	r7, #8
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	200014a4 	.word	0x200014a4
 800efd0:	0801071c 	.word	0x0801071c

0800efd4 <USBD_FS_SerialStrDescriptor>:
 * @brief  Return the serial number string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t* USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b082      	sub	sp, #8
 800efd8:	af00      	add	r7, sp, #0
 800efda:	4603      	mov	r3, r0
 800efdc:	6039      	str	r1, [r7, #0]
 800efde:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = USB_SIZ_STRING_SERIAL;
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	221a      	movs	r2, #26
 800efe4:	801a      	strh	r2, [r3, #0]

    /* Update the serial number string descriptor with the data from the unique
     * ID */
    Get_SerialNum();
 800efe6:	f000 f843 	bl	800f070 <Get_SerialNum>
    /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

    /* USER CODE END USBD_FS_SerialStrDescriptor */
    return (uint8_t*) USBD_StringSerial;
 800efea:	4b02      	ldr	r3, [pc, #8]	@ (800eff4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800efec:	4618      	mov	r0, r3
 800efee:	3708      	adds	r7, #8
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	200000e0 	.word	0x200000e0

0800eff8 <USBD_FS_ConfigStrDescriptor>:
 * @brief  Return the configuration string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t* USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	4603      	mov	r3, r0
 800f000:	6039      	str	r1, [r7, #0]
 800f002:	71fb      	strb	r3, [r7, #7]
    if (speed == USBD_SPEED_HIGH) {
 800f004:	79fb      	ldrb	r3, [r7, #7]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d105      	bne.n	800f016 <USBD_FS_ConfigStrDescriptor+0x1e>
        USBD_GetString((uint8_t*) USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f00a:	683a      	ldr	r2, [r7, #0]
 800f00c:	4907      	ldr	r1, [pc, #28]	@ (800f02c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f00e:	4808      	ldr	r0, [pc, #32]	@ (800f030 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f010:	f7ff fdc6 	bl	800eba0 <USBD_GetString>
 800f014:	e004      	b.n	800f020 <USBD_FS_ConfigStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t*) USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f016:	683a      	ldr	r2, [r7, #0]
 800f018:	4904      	ldr	r1, [pc, #16]	@ (800f02c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f01a:	4805      	ldr	r0, [pc, #20]	@ (800f030 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f01c:	f7ff fdc0 	bl	800eba0 <USBD_GetString>
    }
    return USBD_StrDesc;
 800f020:	4b02      	ldr	r3, [pc, #8]	@ (800f02c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f022:	4618      	mov	r0, r3
 800f024:	3708      	adds	r7, #8
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	200014a4 	.word	0x200014a4
 800f030:	08010730 	.word	0x08010730

0800f034 <USBD_FS_InterfaceStrDescriptor>:
 * @brief  Return the interface string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t* USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	4603      	mov	r3, r0
 800f03c:	6039      	str	r1, [r7, #0]
 800f03e:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 800f040:	79fb      	ldrb	r3, [r7, #7]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d105      	bne.n	800f052 <USBD_FS_InterfaceStrDescriptor+0x1e>
        USBD_GetString((uint8_t*) USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f046:	683a      	ldr	r2, [r7, #0]
 800f048:	4907      	ldr	r1, [pc, #28]	@ (800f068 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f04a:	4808      	ldr	r0, [pc, #32]	@ (800f06c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f04c:	f7ff fda8 	bl	800eba0 <USBD_GetString>
 800f050:	e004      	b.n	800f05c <USBD_FS_InterfaceStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t*) USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f052:	683a      	ldr	r2, [r7, #0]
 800f054:	4904      	ldr	r1, [pc, #16]	@ (800f068 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f056:	4805      	ldr	r0, [pc, #20]	@ (800f06c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f058:	f7ff fda2 	bl	800eba0 <USBD_GetString>
    }
    return USBD_StrDesc;
 800f05c:	4b02      	ldr	r3, [pc, #8]	@ (800f068 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3708      	adds	r7, #8
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	200014a4 	.word	0x200014a4
 800f06c:	0801073c 	.word	0x0801073c

0800f070 <Get_SerialNum>:
/**
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void) {
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
    uint32_t deviceserial0;
    uint32_t deviceserial1;
    uint32_t deviceserial2;

    deviceserial0 = *(uint32_t*) DEVICE_ID1;
 800f076:	4b0f      	ldr	r3, [pc, #60]	@ (800f0b4 <Get_SerialNum+0x44>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	60fb      	str	r3, [r7, #12]
    deviceserial1 = *(uint32_t*) DEVICE_ID2;
 800f07c:	4b0e      	ldr	r3, [pc, #56]	@ (800f0b8 <Get_SerialNum+0x48>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	60bb      	str	r3, [r7, #8]
    deviceserial2 = *(uint32_t*) DEVICE_ID3;
 800f082:	4b0e      	ldr	r3, [pc, #56]	@ (800f0bc <Get_SerialNum+0x4c>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	607b      	str	r3, [r7, #4]

    deviceserial0 += deviceserial2;
 800f088:	68fa      	ldr	r2, [r7, #12]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	4413      	add	r3, r2
 800f08e:	60fb      	str	r3, [r7, #12]

    if (deviceserial0 != 0) {
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d009      	beq.n	800f0aa <Get_SerialNum+0x3a>
        IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f096:	2208      	movs	r2, #8
 800f098:	4909      	ldr	r1, [pc, #36]	@ (800f0c0 <Get_SerialNum+0x50>)
 800f09a:	68f8      	ldr	r0, [r7, #12]
 800f09c:	f000 f814 	bl	800f0c8 <IntToUnicode>
        IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f0a0:	2204      	movs	r2, #4
 800f0a2:	4908      	ldr	r1, [pc, #32]	@ (800f0c4 <Get_SerialNum+0x54>)
 800f0a4:	68b8      	ldr	r0, [r7, #8]
 800f0a6:	f000 f80f 	bl	800f0c8 <IntToUnicode>
    }
}
 800f0aa:	bf00      	nop
 800f0ac:	3710      	adds	r7, #16
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	1fff7a10 	.word	0x1fff7a10
 800f0b8:	1fff7a14 	.word	0x1fff7a14
 800f0bc:	1fff7a18 	.word	0x1fff7a18
 800f0c0:	200000e2 	.word	0x200000e2
 800f0c4:	200000f2 	.word	0x200000f2

0800f0c8 <IntToUnicode>:
 * @param  value: value to convert
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len) {
 800f0c8:	b480      	push	{r7}
 800f0ca:	b087      	sub	sp, #28
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	60f8      	str	r0, [r7, #12]
 800f0d0:	60b9      	str	r1, [r7, #8]
 800f0d2:	4613      	mov	r3, r2
 800f0d4:	71fb      	strb	r3, [r7, #7]
    uint8_t idx = 0;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	75fb      	strb	r3, [r7, #23]

    for (idx = 0; idx < len; idx++) {
 800f0da:	2300      	movs	r3, #0
 800f0dc:	75fb      	strb	r3, [r7, #23]
 800f0de:	e027      	b.n	800f130 <IntToUnicode+0x68>
        if (((value >> 28)) < 0xA) {
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	0f1b      	lsrs	r3, r3, #28
 800f0e4:	2b09      	cmp	r3, #9
 800f0e6:	d80b      	bhi.n	800f100 <IntToUnicode+0x38>
            pbuf[2 * idx] = (value >> 28) + '0';
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	0f1b      	lsrs	r3, r3, #28
 800f0ec:	b2da      	uxtb	r2, r3
 800f0ee:	7dfb      	ldrb	r3, [r7, #23]
 800f0f0:	005b      	lsls	r3, r3, #1
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	440b      	add	r3, r1
 800f0f8:	3230      	adds	r2, #48	@ 0x30
 800f0fa:	b2d2      	uxtb	r2, r2
 800f0fc:	701a      	strb	r2, [r3, #0]
 800f0fe:	e00a      	b.n	800f116 <IntToUnicode+0x4e>
        } else {
            pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	0f1b      	lsrs	r3, r3, #28
 800f104:	b2da      	uxtb	r2, r3
 800f106:	7dfb      	ldrb	r3, [r7, #23]
 800f108:	005b      	lsls	r3, r3, #1
 800f10a:	4619      	mov	r1, r3
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	440b      	add	r3, r1
 800f110:	3237      	adds	r2, #55	@ 0x37
 800f112:	b2d2      	uxtb	r2, r2
 800f114:	701a      	strb	r2, [r3, #0]
        }

        value = value << 4;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	011b      	lsls	r3, r3, #4
 800f11a:	60fb      	str	r3, [r7, #12]

        pbuf[2 * idx + 1] = 0;
 800f11c:	7dfb      	ldrb	r3, [r7, #23]
 800f11e:	005b      	lsls	r3, r3, #1
 800f120:	3301      	adds	r3, #1
 800f122:	68ba      	ldr	r2, [r7, #8]
 800f124:	4413      	add	r3, r2
 800f126:	2200      	movs	r2, #0
 800f128:	701a      	strb	r2, [r3, #0]
    for (idx = 0; idx < len; idx++) {
 800f12a:	7dfb      	ldrb	r3, [r7, #23]
 800f12c:	3301      	adds	r3, #1
 800f12e:	75fb      	strb	r3, [r7, #23]
 800f130:	7dfa      	ldrb	r2, [r7, #23]
 800f132:	79fb      	ldrb	r3, [r7, #7]
 800f134:	429a      	cmp	r2, r3
 800f136:	d3d3      	bcc.n	800f0e0 <IntToUnicode+0x18>
    }
}
 800f138:	bf00      	nop
 800f13a:	bf00      	nop
 800f13c:	371c      	adds	r7, #28
 800f13e:	46bd      	mov	sp, r7
 800f140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f144:	4770      	bx	lr
	...

0800f148 <HAL_PCD_MspInit>:
/*******************************************************************************
 LL Driver Callbacks (PCD -> USB Device Library)
 *******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef *pcdHandle) {
 800f148:	b580      	push	{r7, lr}
 800f14a:	b08a      	sub	sp, #40	@ 0x28
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800f150:	f107 0314 	add.w	r3, r7, #20
 800f154:	2200      	movs	r2, #0
 800f156:	601a      	str	r2, [r3, #0]
 800f158:	605a      	str	r2, [r3, #4]
 800f15a:	609a      	str	r2, [r3, #8]
 800f15c:	60da      	str	r2, [r3, #12]
 800f15e:	611a      	str	r2, [r3, #16]
    if (pcdHandle->Instance == USB_OTG_FS) {
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f168:	d13a      	bne.n	800f1e0 <HAL_PCD_MspInit+0x98>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

        /* USER CODE END USB_OTG_FS_MspInit 0 */

        __HAL_RCC_GPIOA_CLK_ENABLE();
 800f16a:	2300      	movs	r3, #0
 800f16c:	613b      	str	r3, [r7, #16]
 800f16e:	4b1e      	ldr	r3, [pc, #120]	@ (800f1e8 <HAL_PCD_MspInit+0xa0>)
 800f170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f172:	4a1d      	ldr	r2, [pc, #116]	@ (800f1e8 <HAL_PCD_MspInit+0xa0>)
 800f174:	f043 0301 	orr.w	r3, r3, #1
 800f178:	6313      	str	r3, [r2, #48]	@ 0x30
 800f17a:	4b1b      	ldr	r3, [pc, #108]	@ (800f1e8 <HAL_PCD_MspInit+0xa0>)
 800f17c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f17e:	f003 0301 	and.w	r3, r3, #1
 800f182:	613b      	str	r3, [r7, #16]
 800f184:	693b      	ldr	r3, [r7, #16]
        /**USB_OTG_FS GPIO Configuration
         PA11     ------> USB_OTG_FS_DM
         PA12     ------> USB_OTG_FS_DP
         */
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800f186:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f18a:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f18c:	2302      	movs	r3, #2
 800f18e:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f190:	2300      	movs	r3, #0
 800f192:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f194:	2303      	movs	r3, #3
 800f196:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f198:	230a      	movs	r3, #10
 800f19a:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f19c:	f107 0314 	add.w	r3, r7, #20
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	4812      	ldr	r0, [pc, #72]	@ (800f1ec <HAL_PCD_MspInit+0xa4>)
 800f1a4:	f7f9 fe84 	bl	8008eb0 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f1a8:	4b0f      	ldr	r3, [pc, #60]	@ (800f1e8 <HAL_PCD_MspInit+0xa0>)
 800f1aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1ac:	4a0e      	ldr	r2, [pc, #56]	@ (800f1e8 <HAL_PCD_MspInit+0xa0>)
 800f1ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1b2:	6353      	str	r3, [r2, #52]	@ 0x34
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	60fb      	str	r3, [r7, #12]
 800f1b8:	4b0b      	ldr	r3, [pc, #44]	@ (800f1e8 <HAL_PCD_MspInit+0xa0>)
 800f1ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1bc:	4a0a      	ldr	r2, [pc, #40]	@ (800f1e8 <HAL_PCD_MspInit+0xa0>)
 800f1be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f1c2:	6453      	str	r3, [r2, #68]	@ 0x44
 800f1c4:	4b08      	ldr	r3, [pc, #32]	@ (800f1e8 <HAL_PCD_MspInit+0xa0>)
 800f1c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f1cc:	60fb      	str	r3, [r7, #12]
 800f1ce:	68fb      	ldr	r3, [r7, #12]

        /* Peripheral interrupt init */
        HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	2100      	movs	r1, #0
 800f1d4:	2043      	movs	r0, #67	@ 0x43
 800f1d6:	f7f9 fe34 	bl	8008e42 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f1da:	2043      	movs	r0, #67	@ 0x43
 800f1dc:	f7f9 fe4d 	bl	8008e7a <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

        /* USER CODE END USB_OTG_FS_MspInit 1 */
    }
}
 800f1e0:	bf00      	nop
 800f1e2:	3728      	adds	r7, #40	@ 0x28
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}
 800f1e8:	40023800 	.word	0x40023800
 800f1ec:	40020000 	.word	0x40020000

0800f1f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
    USBD_LL_SetupStage((USBD_HandleTypeDef*) hpcd->pData, (uint8_t*) hpcd->Setup);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f204:	4619      	mov	r1, r3
 800f206:	4610      	mov	r0, r2
 800f208:	f7fe fb51 	bl	800d8ae <USBD_LL_SetupStage>
}
 800f20c:	bf00      	nop
 800f20e:	3708      	adds	r7, #8
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	460b      	mov	r3, r1
 800f21e:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataOutStage((USBD_HandleTypeDef*) hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f226:	78fa      	ldrb	r2, [r7, #3]
 800f228:	6879      	ldr	r1, [r7, #4]
 800f22a:	4613      	mov	r3, r2
 800f22c:	00db      	lsls	r3, r3, #3
 800f22e:	4413      	add	r3, r2
 800f230:	009b      	lsls	r3, r3, #2
 800f232:	440b      	add	r3, r1
 800f234:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f238:	681a      	ldr	r2, [r3, #0]
 800f23a:	78fb      	ldrb	r3, [r7, #3]
 800f23c:	4619      	mov	r1, r3
 800f23e:	f7fe fb8b 	bl	800d958 <USBD_LL_DataOutStage>
}
 800f242:	bf00      	nop
 800f244:	3708      	adds	r7, #8
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}

0800f24a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f24a:	b580      	push	{r7, lr}
 800f24c:	b082      	sub	sp, #8
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
 800f252:	460b      	mov	r3, r1
 800f254:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataInStage((USBD_HandleTypeDef*) hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f25c:	78fa      	ldrb	r2, [r7, #3]
 800f25e:	6879      	ldr	r1, [r7, #4]
 800f260:	4613      	mov	r3, r2
 800f262:	00db      	lsls	r3, r3, #3
 800f264:	4413      	add	r3, r2
 800f266:	009b      	lsls	r3, r3, #2
 800f268:	440b      	add	r3, r1
 800f26a:	3320      	adds	r3, #32
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	78fb      	ldrb	r3, [r7, #3]
 800f270:	4619      	mov	r1, r3
 800f272:	f7fe fc2d 	bl	800dad0 <USBD_LL_DataInStage>
}
 800f276:	bf00      	nop
 800f278:	3708      	adds	r7, #8
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}

0800f27e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f27e:	b580      	push	{r7, lr}
 800f280:	b082      	sub	sp, #8
 800f282:	af00      	add	r7, sp, #0
 800f284:	6078      	str	r0, [r7, #4]
    USBD_LL_SOF((USBD_HandleTypeDef*) hpcd->pData);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7fe fd71 	bl	800dd74 <USBD_LL_SOF>
}
 800f292:	bf00      	nop
 800f294:	3708      	adds	r7, #8
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}

0800f29a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f29a:	b580      	push	{r7, lr}
 800f29c:	b084      	sub	sp, #16
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
    USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	73fb      	strb	r3, [r7, #15]

    if (hpcd->Init.speed != PCD_SPEED_FULL) {
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	79db      	ldrb	r3, [r3, #7]
 800f2aa:	2b02      	cmp	r3, #2
 800f2ac:	d001      	beq.n	800f2b2 <HAL_PCD_ResetCallback+0x18>
        Error_Handler();
 800f2ae:	f7f9 fa95 	bl	80087dc <Error_Handler>
    }
    /* Set Speed. */
    USBD_LL_SetSpeed((USBD_HandleTypeDef*) hpcd->pData, speed);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f2b8:	7bfa      	ldrb	r2, [r7, #15]
 800f2ba:	4611      	mov	r1, r2
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7fe fd15 	bl	800dcec <USBD_LL_SetSpeed>

    /* Reset Device. */
    USBD_LL_Reset((USBD_HandleTypeDef*) hpcd->pData);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7fe fcbc 	bl	800dc46 <USBD_LL_Reset>
}
 800f2ce:	bf00      	nop
 800f2d0:	3710      	adds	r7, #16
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
	...

0800f2d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
    /* Inform USB library that core enters in suspend Mode. */
    USBD_LL_Suspend((USBD_HandleTypeDef*) hpcd->pData);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7fe fd10 	bl	800dd0c <USBD_LL_Suspend>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	687a      	ldr	r2, [r7, #4]
 800f2f8:	6812      	ldr	r2, [r2, #0]
 800f2fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f2fe:	f043 0301 	orr.w	r3, r3, #1
 800f302:	6013      	str	r3, [r2, #0]
    /* Enter in STOP mode. */
    /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	7adb      	ldrb	r3, [r3, #11]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d005      	beq.n	800f318 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t) ((uint32_t) (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f30c:	4b04      	ldr	r3, [pc, #16]	@ (800f320 <HAL_PCD_SuspendCallback+0x48>)
 800f30e:	691b      	ldr	r3, [r3, #16]
 800f310:	4a03      	ldr	r2, [pc, #12]	@ (800f320 <HAL_PCD_SuspendCallback+0x48>)
 800f312:	f043 0306 	orr.w	r3, r3, #6
 800f316:	6113      	str	r3, [r2, #16]
    }
    /* USER CODE END 2 */
}
 800f318:	bf00      	nop
 800f31a:	3708      	adds	r7, #8
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	e000ed00 	.word	0xe000ed00

0800f324 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 3 */

    /* USER CODE END 3 */
    USBD_LL_Resume((USBD_HandleTypeDef*) hpcd->pData);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f332:	4618      	mov	r0, r3
 800f334:	f7fe fd06 	bl	800dd44 <USBD_LL_Resume>
}
 800f338:	bf00      	nop
 800f33a:	3708      	adds	r7, #8
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}

0800f340 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b082      	sub	sp, #8
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	460b      	mov	r3, r1
 800f34a:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*) hpcd->pData, epnum);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f352:	78fa      	ldrb	r2, [r7, #3]
 800f354:	4611      	mov	r1, r2
 800f356:	4618      	mov	r0, r3
 800f358:	f7fe fd5e 	bl	800de18 <USBD_LL_IsoOUTIncomplete>
}
 800f35c:	bf00      	nop
 800f35e:	3708      	adds	r7, #8
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	460b      	mov	r3, r1
 800f36e:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*) hpcd->pData, epnum);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f376:	78fa      	ldrb	r2, [r7, #3]
 800f378:	4611      	mov	r1, r2
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fe fd1a 	bl	800ddb4 <USBD_LL_IsoINIncomplete>
}
 800f380:	bf00      	nop
 800f382:	3708      	adds	r7, #8
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}

0800f388 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b082      	sub	sp, #8
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
    USBD_LL_DevConnected((USBD_HandleTypeDef*) hpcd->pData);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f396:	4618      	mov	r0, r3
 800f398:	f7fe fd70 	bl	800de7c <USBD_LL_DevConnected>
}
 800f39c:	bf00      	nop
 800f39e:	3708      	adds	r7, #8
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
    USBD_LL_DevDisconnected((USBD_HandleTypeDef*) hpcd->pData);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7fe fd6d 	bl	800de92 <USBD_LL_DevDisconnected>
}
 800f3b8:	bf00      	nop
 800f3ba:	3708      	adds	r7, #8
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}

0800f3c0 <USBD_LL_Init>:
/**
 * @brief  Initializes the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev) {
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b082      	sub	sp, #8
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
    /* Init USB Ip. */
    if (pdev->id == DEVICE_FS) {
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d13c      	bne.n	800f44a <USBD_LL_Init+0x8a>
        /* Link the driver to the stack. */
        hpcd_USB_OTG_FS.pData = pdev;
 800f3d0:	4a20      	ldr	r2, [pc, #128]	@ (800f454 <USBD_LL_Init+0x94>)
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
        pdev->pData = &hpcd_USB_OTG_FS;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	4a1e      	ldr	r2, [pc, #120]	@ (800f454 <USBD_LL_Init+0x94>)
 800f3dc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

        hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f3e0:	4b1c      	ldr	r3, [pc, #112]	@ (800f454 <USBD_LL_Init+0x94>)
 800f3e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f3e6:	601a      	str	r2, [r3, #0]
        hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f3e8:	4b1a      	ldr	r3, [pc, #104]	@ (800f454 <USBD_LL_Init+0x94>)
 800f3ea:	2204      	movs	r2, #4
 800f3ec:	711a      	strb	r2, [r3, #4]
        hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f3ee:	4b19      	ldr	r3, [pc, #100]	@ (800f454 <USBD_LL_Init+0x94>)
 800f3f0:	2202      	movs	r2, #2
 800f3f2:	71da      	strb	r2, [r3, #7]
        hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f3f4:	4b17      	ldr	r3, [pc, #92]	@ (800f454 <USBD_LL_Init+0x94>)
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	719a      	strb	r2, [r3, #6]
        hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f3fa:	4b16      	ldr	r3, [pc, #88]	@ (800f454 <USBD_LL_Init+0x94>)
 800f3fc:	2202      	movs	r2, #2
 800f3fe:	725a      	strb	r2, [r3, #9]
        hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f400:	4b14      	ldr	r3, [pc, #80]	@ (800f454 <USBD_LL_Init+0x94>)
 800f402:	2200      	movs	r2, #0
 800f404:	729a      	strb	r2, [r3, #10]
        hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f406:	4b13      	ldr	r3, [pc, #76]	@ (800f454 <USBD_LL_Init+0x94>)
 800f408:	2200      	movs	r2, #0
 800f40a:	72da      	strb	r2, [r3, #11]
        hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f40c:	4b11      	ldr	r3, [pc, #68]	@ (800f454 <USBD_LL_Init+0x94>)
 800f40e:	2200      	movs	r2, #0
 800f410:	731a      	strb	r2, [r3, #12]
        hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f412:	4b10      	ldr	r3, [pc, #64]	@ (800f454 <USBD_LL_Init+0x94>)
 800f414:	2200      	movs	r2, #0
 800f416:	739a      	strb	r2, [r3, #14]
        hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f418:	4b0e      	ldr	r3, [pc, #56]	@ (800f454 <USBD_LL_Init+0x94>)
 800f41a:	2200      	movs	r2, #0
 800f41c:	73da      	strb	r2, [r3, #15]
        if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 800f41e:	480d      	ldr	r0, [pc, #52]	@ (800f454 <USBD_LL_Init+0x94>)
 800f420:	f7f9 fefd 	bl	800921e <HAL_PCD_Init>
 800f424:	4603      	mov	r3, r0
 800f426:	2b00      	cmp	r3, #0
 800f428:	d001      	beq.n	800f42e <USBD_LL_Init+0x6e>
            Error_Handler();
 800f42a:	f7f9 f9d7 	bl	80087dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f42e:	2180      	movs	r1, #128	@ 0x80
 800f430:	4808      	ldr	r0, [pc, #32]	@ (800f454 <USBD_LL_Init+0x94>)
 800f432:	f7fb f92a 	bl	800a68a <HAL_PCDEx_SetRxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f436:	2240      	movs	r2, #64	@ 0x40
 800f438:	2100      	movs	r1, #0
 800f43a:	4806      	ldr	r0, [pc, #24]	@ (800f454 <USBD_LL_Init+0x94>)
 800f43c:	f7fb f8de 	bl	800a5fc <HAL_PCDEx_SetTxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f440:	2280      	movs	r2, #128	@ 0x80
 800f442:	2101      	movs	r1, #1
 800f444:	4803      	ldr	r0, [pc, #12]	@ (800f454 <USBD_LL_Init+0x94>)
 800f446:	f7fb f8d9 	bl	800a5fc <HAL_PCDEx_SetTxFiFo>
    }
    return USBD_OK;
 800f44a:	2300      	movs	r3, #0
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3708      	adds	r7, #8
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}
 800f454:	200016a4 	.word	0x200016a4

0800f458 <USBD_LL_Start>:
/**
 * @brief  Starts the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev) {
 800f458:	b580      	push	{r7, lr}
 800f45a:	b084      	sub	sp, #16
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f460:	2300      	movs	r3, #0
 800f462:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f464:	2300      	movs	r3, #0
 800f466:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_Start(pdev->pData);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f46e:	4618      	mov	r0, r3
 800f470:	f7f9 ffe4 	bl	800943c <HAL_PCD_Start>
 800f474:	4603      	mov	r3, r0
 800f476:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f478:	7bfb      	ldrb	r3, [r7, #15]
 800f47a:	4618      	mov	r0, r3
 800f47c:	f000 f942 	bl	800f704 <USBD_Get_USB_Status>
 800f480:	4603      	mov	r3, r0
 800f482:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800f484:	7bbb      	ldrb	r3, [r7, #14]
}
 800f486:	4618      	mov	r0, r3
 800f488:	3710      	adds	r7, #16
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}

0800f48e <USBD_LL_OpenEP>:
 * @param  ep_addr: Endpoint number
 * @param  ep_type: Endpoint type
 * @param  ep_mps: Endpoint max packet size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps) {
 800f48e:	b580      	push	{r7, lr}
 800f490:	b084      	sub	sp, #16
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
 800f496:	4608      	mov	r0, r1
 800f498:	4611      	mov	r1, r2
 800f49a:	461a      	mov	r2, r3
 800f49c:	4603      	mov	r3, r0
 800f49e:	70fb      	strb	r3, [r7, #3]
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	70bb      	strb	r3, [r7, #2]
 800f4a4:	4613      	mov	r3, r2
 800f4a6:	803b      	strh	r3, [r7, #0]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f4b6:	78bb      	ldrb	r3, [r7, #2]
 800f4b8:	883a      	ldrh	r2, [r7, #0]
 800f4ba:	78f9      	ldrb	r1, [r7, #3]
 800f4bc:	f7fa fcb8 	bl	8009e30 <HAL_PCD_EP_Open>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f4c4:	7bfb      	ldrb	r3, [r7, #15]
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f000 f91c 	bl	800f704 <USBD_Get_USB_Status>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800f4d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3710      	adds	r7, #16
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}

0800f4da <USBD_LL_CloseEP>:
 * @brief  Closes an endpoint of the low level driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr) {
 800f4da:	b580      	push	{r7, lr}
 800f4dc:	b084      	sub	sp, #16
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	6078      	str	r0, [r7, #4]
 800f4e2:	460b      	mov	r3, r1
 800f4e4:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f4f4:	78fa      	ldrb	r2, [r7, #3]
 800f4f6:	4611      	mov	r1, r2
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7fa fd03 	bl	8009f04 <HAL_PCD_EP_Close>
 800f4fe:	4603      	mov	r3, r0
 800f500:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f502:	7bfb      	ldrb	r3, [r7, #15]
 800f504:	4618      	mov	r0, r3
 800f506:	f000 f8fd 	bl	800f704 <USBD_Get_USB_Status>
 800f50a:	4603      	mov	r3, r0
 800f50c:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800f50e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f510:	4618      	mov	r0, r3
 800f512:	3710      	adds	r7, #16
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <USBD_LL_StallEP>:
 * @brief  Sets a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr) {
 800f518:	b580      	push	{r7, lr}
 800f51a:	b084      	sub	sp, #16
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	460b      	mov	r3, r1
 800f522:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f524:	2300      	movs	r3, #0
 800f526:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f528:	2300      	movs	r3, #0
 800f52a:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f532:	78fa      	ldrb	r2, [r7, #3]
 800f534:	4611      	mov	r1, r2
 800f536:	4618      	mov	r0, r3
 800f538:	f7fa fdbb 	bl	800a0b2 <HAL_PCD_EP_SetStall>
 800f53c:	4603      	mov	r3, r0
 800f53e:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f540:	7bfb      	ldrb	r3, [r7, #15]
 800f542:	4618      	mov	r0, r3
 800f544:	f000 f8de 	bl	800f704 <USBD_Get_USB_Status>
 800f548:	4603      	mov	r3, r0
 800f54a:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800f54c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3710      	adds	r7, #16
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}

0800f556 <USBD_LL_ClearStallEP>:
 * @brief  Clears a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr) {
 800f556:	b580      	push	{r7, lr}
 800f558:	b084      	sub	sp, #16
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	6078      	str	r0, [r7, #4]
 800f55e:	460b      	mov	r3, r1
 800f560:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f562:	2300      	movs	r3, #0
 800f564:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f566:	2300      	movs	r3, #0
 800f568:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f570:	78fa      	ldrb	r2, [r7, #3]
 800f572:	4611      	mov	r1, r2
 800f574:	4618      	mov	r0, r3
 800f576:	f7fa fdff 	bl	800a178 <HAL_PCD_EP_ClrStall>
 800f57a:	4603      	mov	r3, r0
 800f57c:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f57e:	7bfb      	ldrb	r3, [r7, #15]
 800f580:	4618      	mov	r0, r3
 800f582:	f000 f8bf 	bl	800f704 <USBD_Get_USB_Status>
 800f586:	4603      	mov	r3, r0
 800f588:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800f58a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3710      	adds	r7, #16
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <USBD_LL_IsStallEP>:
 * @brief  Returns Stall condition.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr) {
 800f594:	b480      	push	{r7}
 800f596:	b085      	sub	sp, #20
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	460b      	mov	r3, r1
 800f59e:	70fb      	strb	r3, [r7, #3]
    PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f5a6:	60fb      	str	r3, [r7, #12]

    if ((ep_addr & 0x80) == 0x80) {
 800f5a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	da0b      	bge.n	800f5c8 <USBD_LL_IsStallEP+0x34>
        return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f5b0:	78fb      	ldrb	r3, [r7, #3]
 800f5b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f5b6:	68f9      	ldr	r1, [r7, #12]
 800f5b8:	4613      	mov	r3, r2
 800f5ba:	00db      	lsls	r3, r3, #3
 800f5bc:	4413      	add	r3, r2
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	440b      	add	r3, r1
 800f5c2:	3316      	adds	r3, #22
 800f5c4:	781b      	ldrb	r3, [r3, #0]
 800f5c6:	e00b      	b.n	800f5e0 <USBD_LL_IsStallEP+0x4c>
    } else {
        return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f5c8:	78fb      	ldrb	r3, [r7, #3]
 800f5ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f5ce:	68f9      	ldr	r1, [r7, #12]
 800f5d0:	4613      	mov	r3, r2
 800f5d2:	00db      	lsls	r3, r3, #3
 800f5d4:	4413      	add	r3, r2
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	440b      	add	r3, r1
 800f5da:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f5de:	781b      	ldrb	r3, [r3, #0]
    }
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3714      	adds	r7, #20
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <USBD_LL_SetUSBAddress>:
 * @brief  Assigns a USB address to the device.
 * @param  pdev: Device handle
 * @param  dev_addr: Device address
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr) {
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f606:	78fa      	ldrb	r2, [r7, #3]
 800f608:	4611      	mov	r1, r2
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7fa fbec 	bl	8009de8 <HAL_PCD_SetAddress>
 800f610:	4603      	mov	r3, r0
 800f612:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f614:	7bfb      	ldrb	r3, [r7, #15]
 800f616:	4618      	mov	r0, r3
 800f618:	f000 f874 	bl	800f704 <USBD_Get_USB_Status>
 800f61c:	4603      	mov	r3, r0
 800f61e:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 800f620:	7bbb      	ldrb	r3, [r7, #14]
}
 800f622:	4618      	mov	r0, r3
 800f624:	3710      	adds	r7, #16
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}

0800f62a <USBD_LL_Transmit>:
 * @param  ep_addr: Endpoint number
 * @param  pbuf: Pointer to data to be sent
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size) {
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b086      	sub	sp, #24
 800f62e:	af00      	add	r7, sp, #0
 800f630:	60f8      	str	r0, [r7, #12]
 800f632:	607a      	str	r2, [r7, #4]
 800f634:	603b      	str	r3, [r7, #0]
 800f636:	460b      	mov	r3, r1
 800f638:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f63a:	2300      	movs	r3, #0
 800f63c:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f63e:	2300      	movs	r3, #0
 800f640:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f648:	7af9      	ldrb	r1, [r7, #11]
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	f7fa fcf6 	bl	800a03e <HAL_PCD_EP_Transmit>
 800f652:	4603      	mov	r3, r0
 800f654:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f656:	7dfb      	ldrb	r3, [r7, #23]
 800f658:	4618      	mov	r0, r3
 800f65a:	f000 f853 	bl	800f704 <USBD_Get_USB_Status>
 800f65e:	4603      	mov	r3, r0
 800f660:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 800f662:	7dbb      	ldrb	r3, [r7, #22]
}
 800f664:	4618      	mov	r0, r3
 800f666:	3718      	adds	r7, #24
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}

0800f66c <USBD_LL_PrepareReceive>:
 * @param  ep_addr: Endpoint number
 * @param  pbuf: Pointer to data to be received
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size) {
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b086      	sub	sp, #24
 800f670:	af00      	add	r7, sp, #0
 800f672:	60f8      	str	r0, [r7, #12]
 800f674:	607a      	str	r2, [r7, #4]
 800f676:	603b      	str	r3, [r7, #0]
 800f678:	460b      	mov	r3, r1
 800f67a:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800f67c:	2300      	movs	r3, #0
 800f67e:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f680:	2300      	movs	r3, #0
 800f682:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f68a:	7af9      	ldrb	r1, [r7, #11]
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	f7fa fc82 	bl	8009f98 <HAL_PCD_EP_Receive>
 800f694:	4603      	mov	r3, r0
 800f696:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 800f698:	7dfb      	ldrb	r3, [r7, #23]
 800f69a:	4618      	mov	r0, r3
 800f69c:	f000 f832 	bl	800f704 <USBD_Get_USB_Status>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 800f6a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3718      	adds	r7, #24
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}

0800f6ae <USBD_LL_GetRxDataSize>:
 * @brief  Returns the last transferred packet size.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Received Data Size
 */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr) {
 800f6ae:	b580      	push	{r7, lr}
 800f6b0:	b082      	sub	sp, #8
 800f6b2:	af00      	add	r7, sp, #0
 800f6b4:	6078      	str	r0, [r7, #4]
 800f6b6:	460b      	mov	r3, r1
 800f6b8:	70fb      	strb	r3, [r7, #3]
    return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f6c0:	78fa      	ldrb	r2, [r7, #3]
 800f6c2:	4611      	mov	r1, r2
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7fa fca2 	bl	800a00e <HAL_PCD_EP_GetRxCount>
 800f6ca:	4603      	mov	r3, r0
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3708      	adds	r7, #8
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <USBD_static_malloc>:
/**
 * @brief  Static single allocation.
 * @param  size: Size of allocated memory
 * @retval None
 */
void* USBD_static_malloc(uint32_t size) {
 800f6d4:	b480      	push	{r7}
 800f6d6:	b083      	sub	sp, #12
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
    static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1];/* On 32-bit boundary */
    return mem;
 800f6dc:	4b03      	ldr	r3, [pc, #12]	@ (800f6ec <USBD_static_malloc+0x18>)
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	370c      	adds	r7, #12
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr
 800f6ea:	bf00      	nop
 800f6ec:	20001b88 	.word	0x20001b88

0800f6f0 <USBD_static_free>:
/**
 * @brief  Dummy memory free
 * @param  p: Pointer to allocated  memory address
 * @retval None
 */
void USBD_static_free(void *p) {
 800f6f0:	b480      	push	{r7}
 800f6f2:	b083      	sub	sp, #12
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]

}
 800f6f8:	bf00      	nop
 800f6fa:	370c      	adds	r7, #12
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr

0800f704 <USBD_Get_USB_Status>:
/**
 * @brief  Returns the USB status depending on the HAL status:
 * @param  hal_status: HAL status
 * @retval USB status
 */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status) {
 800f704:	b480      	push	{r7}
 800f706:	b085      	sub	sp, #20
 800f708:	af00      	add	r7, sp, #0
 800f70a:	4603      	mov	r3, r0
 800f70c:	71fb      	strb	r3, [r7, #7]
    USBD_StatusTypeDef usb_status = USBD_OK;
 800f70e:	2300      	movs	r3, #0
 800f710:	73fb      	strb	r3, [r7, #15]

    switch (hal_status) {
 800f712:	79fb      	ldrb	r3, [r7, #7]
 800f714:	2b03      	cmp	r3, #3
 800f716:	d817      	bhi.n	800f748 <USBD_Get_USB_Status+0x44>
 800f718:	a201      	add	r2, pc, #4	@ (adr r2, 800f720 <USBD_Get_USB_Status+0x1c>)
 800f71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f71e:	bf00      	nop
 800f720:	0800f731 	.word	0x0800f731
 800f724:	0800f737 	.word	0x0800f737
 800f728:	0800f73d 	.word	0x0800f73d
 800f72c:	0800f743 	.word	0x0800f743
    case HAL_OK:
        usb_status = USBD_OK;
 800f730:	2300      	movs	r3, #0
 800f732:	73fb      	strb	r3, [r7, #15]
        break;
 800f734:	e00b      	b.n	800f74e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR:
        usb_status = USBD_FAIL;
 800f736:	2303      	movs	r3, #3
 800f738:	73fb      	strb	r3, [r7, #15]
        break;
 800f73a:	e008      	b.n	800f74e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY:
        usb_status = USBD_BUSY;
 800f73c:	2301      	movs	r3, #1
 800f73e:	73fb      	strb	r3, [r7, #15]
        break;
 800f740:	e005      	b.n	800f74e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT:
        usb_status = USBD_FAIL;
 800f742:	2303      	movs	r3, #3
 800f744:	73fb      	strb	r3, [r7, #15]
        break;
 800f746:	e002      	b.n	800f74e <USBD_Get_USB_Status+0x4a>
    default:
        usb_status = USBD_FAIL;
 800f748:	2303      	movs	r3, #3
 800f74a:	73fb      	strb	r3, [r7, #15]
        break;
 800f74c:	bf00      	nop
    }
    return usb_status;
 800f74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f750:	4618      	mov	r0, r3
 800f752:	3714      	adds	r7, #20
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr

0800f75c <std>:
 800f75c:	2300      	movs	r3, #0
 800f75e:	b510      	push	{r4, lr}
 800f760:	4604      	mov	r4, r0
 800f762:	e9c0 3300 	strd	r3, r3, [r0]
 800f766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f76a:	6083      	str	r3, [r0, #8]
 800f76c:	8181      	strh	r1, [r0, #12]
 800f76e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f770:	81c2      	strh	r2, [r0, #14]
 800f772:	6183      	str	r3, [r0, #24]
 800f774:	4619      	mov	r1, r3
 800f776:	2208      	movs	r2, #8
 800f778:	305c      	adds	r0, #92	@ 0x5c
 800f77a:	f000 f9f9 	bl	800fb70 <memset>
 800f77e:	4b0d      	ldr	r3, [pc, #52]	@ (800f7b4 <std+0x58>)
 800f780:	6263      	str	r3, [r4, #36]	@ 0x24
 800f782:	4b0d      	ldr	r3, [pc, #52]	@ (800f7b8 <std+0x5c>)
 800f784:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f786:	4b0d      	ldr	r3, [pc, #52]	@ (800f7bc <std+0x60>)
 800f788:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f78a:	4b0d      	ldr	r3, [pc, #52]	@ (800f7c0 <std+0x64>)
 800f78c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f78e:	4b0d      	ldr	r3, [pc, #52]	@ (800f7c4 <std+0x68>)
 800f790:	6224      	str	r4, [r4, #32]
 800f792:	429c      	cmp	r4, r3
 800f794:	d006      	beq.n	800f7a4 <std+0x48>
 800f796:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f79a:	4294      	cmp	r4, r2
 800f79c:	d002      	beq.n	800f7a4 <std+0x48>
 800f79e:	33d0      	adds	r3, #208	@ 0xd0
 800f7a0:	429c      	cmp	r4, r3
 800f7a2:	d105      	bne.n	800f7b0 <std+0x54>
 800f7a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f7a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7ac:	f000 ba58 	b.w	800fc60 <__retarget_lock_init_recursive>
 800f7b0:	bd10      	pop	{r4, pc}
 800f7b2:	bf00      	nop
 800f7b4:	0800f9c1 	.word	0x0800f9c1
 800f7b8:	0800f9e3 	.word	0x0800f9e3
 800f7bc:	0800fa1b 	.word	0x0800fa1b
 800f7c0:	0800fa3f 	.word	0x0800fa3f
 800f7c4:	20001da8 	.word	0x20001da8

0800f7c8 <stdio_exit_handler>:
 800f7c8:	4a02      	ldr	r2, [pc, #8]	@ (800f7d4 <stdio_exit_handler+0xc>)
 800f7ca:	4903      	ldr	r1, [pc, #12]	@ (800f7d8 <stdio_exit_handler+0x10>)
 800f7cc:	4803      	ldr	r0, [pc, #12]	@ (800f7dc <stdio_exit_handler+0x14>)
 800f7ce:	f000 b869 	b.w	800f8a4 <_fwalk_sglue>
 800f7d2:	bf00      	nop
 800f7d4:	200000fc 	.word	0x200000fc
 800f7d8:	080104fd 	.word	0x080104fd
 800f7dc:	2000010c 	.word	0x2000010c

0800f7e0 <cleanup_stdio>:
 800f7e0:	6841      	ldr	r1, [r0, #4]
 800f7e2:	4b0c      	ldr	r3, [pc, #48]	@ (800f814 <cleanup_stdio+0x34>)
 800f7e4:	4299      	cmp	r1, r3
 800f7e6:	b510      	push	{r4, lr}
 800f7e8:	4604      	mov	r4, r0
 800f7ea:	d001      	beq.n	800f7f0 <cleanup_stdio+0x10>
 800f7ec:	f000 fe86 	bl	80104fc <_fflush_r>
 800f7f0:	68a1      	ldr	r1, [r4, #8]
 800f7f2:	4b09      	ldr	r3, [pc, #36]	@ (800f818 <cleanup_stdio+0x38>)
 800f7f4:	4299      	cmp	r1, r3
 800f7f6:	d002      	beq.n	800f7fe <cleanup_stdio+0x1e>
 800f7f8:	4620      	mov	r0, r4
 800f7fa:	f000 fe7f 	bl	80104fc <_fflush_r>
 800f7fe:	68e1      	ldr	r1, [r4, #12]
 800f800:	4b06      	ldr	r3, [pc, #24]	@ (800f81c <cleanup_stdio+0x3c>)
 800f802:	4299      	cmp	r1, r3
 800f804:	d004      	beq.n	800f810 <cleanup_stdio+0x30>
 800f806:	4620      	mov	r0, r4
 800f808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f80c:	f000 be76 	b.w	80104fc <_fflush_r>
 800f810:	bd10      	pop	{r4, pc}
 800f812:	bf00      	nop
 800f814:	20001da8 	.word	0x20001da8
 800f818:	20001e10 	.word	0x20001e10
 800f81c:	20001e78 	.word	0x20001e78

0800f820 <global_stdio_init.part.0>:
 800f820:	b510      	push	{r4, lr}
 800f822:	4b0b      	ldr	r3, [pc, #44]	@ (800f850 <global_stdio_init.part.0+0x30>)
 800f824:	4c0b      	ldr	r4, [pc, #44]	@ (800f854 <global_stdio_init.part.0+0x34>)
 800f826:	4a0c      	ldr	r2, [pc, #48]	@ (800f858 <global_stdio_init.part.0+0x38>)
 800f828:	601a      	str	r2, [r3, #0]
 800f82a:	4620      	mov	r0, r4
 800f82c:	2200      	movs	r2, #0
 800f82e:	2104      	movs	r1, #4
 800f830:	f7ff ff94 	bl	800f75c <std>
 800f834:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f838:	2201      	movs	r2, #1
 800f83a:	2109      	movs	r1, #9
 800f83c:	f7ff ff8e 	bl	800f75c <std>
 800f840:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f844:	2202      	movs	r2, #2
 800f846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f84a:	2112      	movs	r1, #18
 800f84c:	f7ff bf86 	b.w	800f75c <std>
 800f850:	20001ee0 	.word	0x20001ee0
 800f854:	20001da8 	.word	0x20001da8
 800f858:	0800f7c9 	.word	0x0800f7c9

0800f85c <__sfp_lock_acquire>:
 800f85c:	4801      	ldr	r0, [pc, #4]	@ (800f864 <__sfp_lock_acquire+0x8>)
 800f85e:	f000 ba00 	b.w	800fc62 <__retarget_lock_acquire_recursive>
 800f862:	bf00      	nop
 800f864:	20001ee9 	.word	0x20001ee9

0800f868 <__sfp_lock_release>:
 800f868:	4801      	ldr	r0, [pc, #4]	@ (800f870 <__sfp_lock_release+0x8>)
 800f86a:	f000 b9fb 	b.w	800fc64 <__retarget_lock_release_recursive>
 800f86e:	bf00      	nop
 800f870:	20001ee9 	.word	0x20001ee9

0800f874 <__sinit>:
 800f874:	b510      	push	{r4, lr}
 800f876:	4604      	mov	r4, r0
 800f878:	f7ff fff0 	bl	800f85c <__sfp_lock_acquire>
 800f87c:	6a23      	ldr	r3, [r4, #32]
 800f87e:	b11b      	cbz	r3, 800f888 <__sinit+0x14>
 800f880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f884:	f7ff bff0 	b.w	800f868 <__sfp_lock_release>
 800f888:	4b04      	ldr	r3, [pc, #16]	@ (800f89c <__sinit+0x28>)
 800f88a:	6223      	str	r3, [r4, #32]
 800f88c:	4b04      	ldr	r3, [pc, #16]	@ (800f8a0 <__sinit+0x2c>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d1f5      	bne.n	800f880 <__sinit+0xc>
 800f894:	f7ff ffc4 	bl	800f820 <global_stdio_init.part.0>
 800f898:	e7f2      	b.n	800f880 <__sinit+0xc>
 800f89a:	bf00      	nop
 800f89c:	0800f7e1 	.word	0x0800f7e1
 800f8a0:	20001ee0 	.word	0x20001ee0

0800f8a4 <_fwalk_sglue>:
 800f8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8a8:	4607      	mov	r7, r0
 800f8aa:	4688      	mov	r8, r1
 800f8ac:	4614      	mov	r4, r2
 800f8ae:	2600      	movs	r6, #0
 800f8b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f8b4:	f1b9 0901 	subs.w	r9, r9, #1
 800f8b8:	d505      	bpl.n	800f8c6 <_fwalk_sglue+0x22>
 800f8ba:	6824      	ldr	r4, [r4, #0]
 800f8bc:	2c00      	cmp	r4, #0
 800f8be:	d1f7      	bne.n	800f8b0 <_fwalk_sglue+0xc>
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8c6:	89ab      	ldrh	r3, [r5, #12]
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	d907      	bls.n	800f8dc <_fwalk_sglue+0x38>
 800f8cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	d003      	beq.n	800f8dc <_fwalk_sglue+0x38>
 800f8d4:	4629      	mov	r1, r5
 800f8d6:	4638      	mov	r0, r7
 800f8d8:	47c0      	blx	r8
 800f8da:	4306      	orrs	r6, r0
 800f8dc:	3568      	adds	r5, #104	@ 0x68
 800f8de:	e7e9      	b.n	800f8b4 <_fwalk_sglue+0x10>

0800f8e0 <iprintf>:
 800f8e0:	b40f      	push	{r0, r1, r2, r3}
 800f8e2:	b507      	push	{r0, r1, r2, lr}
 800f8e4:	4906      	ldr	r1, [pc, #24]	@ (800f900 <iprintf+0x20>)
 800f8e6:	ab04      	add	r3, sp, #16
 800f8e8:	6808      	ldr	r0, [r1, #0]
 800f8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8ee:	6881      	ldr	r1, [r0, #8]
 800f8f0:	9301      	str	r3, [sp, #4]
 800f8f2:	f000 fadb 	bl	800feac <_vfiprintf_r>
 800f8f6:	b003      	add	sp, #12
 800f8f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8fc:	b004      	add	sp, #16
 800f8fe:	4770      	bx	lr
 800f900:	20000108 	.word	0x20000108

0800f904 <_puts_r>:
 800f904:	6a03      	ldr	r3, [r0, #32]
 800f906:	b570      	push	{r4, r5, r6, lr}
 800f908:	6884      	ldr	r4, [r0, #8]
 800f90a:	4605      	mov	r5, r0
 800f90c:	460e      	mov	r6, r1
 800f90e:	b90b      	cbnz	r3, 800f914 <_puts_r+0x10>
 800f910:	f7ff ffb0 	bl	800f874 <__sinit>
 800f914:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f916:	07db      	lsls	r3, r3, #31
 800f918:	d405      	bmi.n	800f926 <_puts_r+0x22>
 800f91a:	89a3      	ldrh	r3, [r4, #12]
 800f91c:	0598      	lsls	r0, r3, #22
 800f91e:	d402      	bmi.n	800f926 <_puts_r+0x22>
 800f920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f922:	f000 f99e 	bl	800fc62 <__retarget_lock_acquire_recursive>
 800f926:	89a3      	ldrh	r3, [r4, #12]
 800f928:	0719      	lsls	r1, r3, #28
 800f92a:	d502      	bpl.n	800f932 <_puts_r+0x2e>
 800f92c:	6923      	ldr	r3, [r4, #16]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d135      	bne.n	800f99e <_puts_r+0x9a>
 800f932:	4621      	mov	r1, r4
 800f934:	4628      	mov	r0, r5
 800f936:	f000 f8c5 	bl	800fac4 <__swsetup_r>
 800f93a:	b380      	cbz	r0, 800f99e <_puts_r+0x9a>
 800f93c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800f940:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f942:	07da      	lsls	r2, r3, #31
 800f944:	d405      	bmi.n	800f952 <_puts_r+0x4e>
 800f946:	89a3      	ldrh	r3, [r4, #12]
 800f948:	059b      	lsls	r3, r3, #22
 800f94a:	d402      	bmi.n	800f952 <_puts_r+0x4e>
 800f94c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f94e:	f000 f989 	bl	800fc64 <__retarget_lock_release_recursive>
 800f952:	4628      	mov	r0, r5
 800f954:	bd70      	pop	{r4, r5, r6, pc}
 800f956:	2b00      	cmp	r3, #0
 800f958:	da04      	bge.n	800f964 <_puts_r+0x60>
 800f95a:	69a2      	ldr	r2, [r4, #24]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	dc17      	bgt.n	800f990 <_puts_r+0x8c>
 800f960:	290a      	cmp	r1, #10
 800f962:	d015      	beq.n	800f990 <_puts_r+0x8c>
 800f964:	6823      	ldr	r3, [r4, #0]
 800f966:	1c5a      	adds	r2, r3, #1
 800f968:	6022      	str	r2, [r4, #0]
 800f96a:	7019      	strb	r1, [r3, #0]
 800f96c:	68a3      	ldr	r3, [r4, #8]
 800f96e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f972:	3b01      	subs	r3, #1
 800f974:	60a3      	str	r3, [r4, #8]
 800f976:	2900      	cmp	r1, #0
 800f978:	d1ed      	bne.n	800f956 <_puts_r+0x52>
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	da11      	bge.n	800f9a2 <_puts_r+0x9e>
 800f97e:	4622      	mov	r2, r4
 800f980:	210a      	movs	r1, #10
 800f982:	4628      	mov	r0, r5
 800f984:	f000 f85f 	bl	800fa46 <__swbuf_r>
 800f988:	3001      	adds	r0, #1
 800f98a:	d0d7      	beq.n	800f93c <_puts_r+0x38>
 800f98c:	250a      	movs	r5, #10
 800f98e:	e7d7      	b.n	800f940 <_puts_r+0x3c>
 800f990:	4622      	mov	r2, r4
 800f992:	4628      	mov	r0, r5
 800f994:	f000 f857 	bl	800fa46 <__swbuf_r>
 800f998:	3001      	adds	r0, #1
 800f99a:	d1e7      	bne.n	800f96c <_puts_r+0x68>
 800f99c:	e7ce      	b.n	800f93c <_puts_r+0x38>
 800f99e:	3e01      	subs	r6, #1
 800f9a0:	e7e4      	b.n	800f96c <_puts_r+0x68>
 800f9a2:	6823      	ldr	r3, [r4, #0]
 800f9a4:	1c5a      	adds	r2, r3, #1
 800f9a6:	6022      	str	r2, [r4, #0]
 800f9a8:	220a      	movs	r2, #10
 800f9aa:	701a      	strb	r2, [r3, #0]
 800f9ac:	e7ee      	b.n	800f98c <_puts_r+0x88>
	...

0800f9b0 <puts>:
 800f9b0:	4b02      	ldr	r3, [pc, #8]	@ (800f9bc <puts+0xc>)
 800f9b2:	4601      	mov	r1, r0
 800f9b4:	6818      	ldr	r0, [r3, #0]
 800f9b6:	f7ff bfa5 	b.w	800f904 <_puts_r>
 800f9ba:	bf00      	nop
 800f9bc:	20000108 	.word	0x20000108

0800f9c0 <__sread>:
 800f9c0:	b510      	push	{r4, lr}
 800f9c2:	460c      	mov	r4, r1
 800f9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9c8:	f000 f8fc 	bl	800fbc4 <_read_r>
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	bfab      	itete	ge
 800f9d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f9d2:	89a3      	ldrhlt	r3, [r4, #12]
 800f9d4:	181b      	addge	r3, r3, r0
 800f9d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f9da:	bfac      	ite	ge
 800f9dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f9de:	81a3      	strhlt	r3, [r4, #12]
 800f9e0:	bd10      	pop	{r4, pc}

0800f9e2 <__swrite>:
 800f9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9e6:	461f      	mov	r7, r3
 800f9e8:	898b      	ldrh	r3, [r1, #12]
 800f9ea:	05db      	lsls	r3, r3, #23
 800f9ec:	4605      	mov	r5, r0
 800f9ee:	460c      	mov	r4, r1
 800f9f0:	4616      	mov	r6, r2
 800f9f2:	d505      	bpl.n	800fa00 <__swrite+0x1e>
 800f9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9f8:	2302      	movs	r3, #2
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f000 f8d0 	bl	800fba0 <_lseek_r>
 800fa00:	89a3      	ldrh	r3, [r4, #12]
 800fa02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fa0a:	81a3      	strh	r3, [r4, #12]
 800fa0c:	4632      	mov	r2, r6
 800fa0e:	463b      	mov	r3, r7
 800fa10:	4628      	mov	r0, r5
 800fa12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa16:	f000 b8e7 	b.w	800fbe8 <_write_r>

0800fa1a <__sseek>:
 800fa1a:	b510      	push	{r4, lr}
 800fa1c:	460c      	mov	r4, r1
 800fa1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa22:	f000 f8bd 	bl	800fba0 <_lseek_r>
 800fa26:	1c43      	adds	r3, r0, #1
 800fa28:	89a3      	ldrh	r3, [r4, #12]
 800fa2a:	bf15      	itete	ne
 800fa2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fa2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fa32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fa36:	81a3      	strheq	r3, [r4, #12]
 800fa38:	bf18      	it	ne
 800fa3a:	81a3      	strhne	r3, [r4, #12]
 800fa3c:	bd10      	pop	{r4, pc}

0800fa3e <__sclose>:
 800fa3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa42:	f000 b89d 	b.w	800fb80 <_close_r>

0800fa46 <__swbuf_r>:
 800fa46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa48:	460e      	mov	r6, r1
 800fa4a:	4614      	mov	r4, r2
 800fa4c:	4605      	mov	r5, r0
 800fa4e:	b118      	cbz	r0, 800fa58 <__swbuf_r+0x12>
 800fa50:	6a03      	ldr	r3, [r0, #32]
 800fa52:	b90b      	cbnz	r3, 800fa58 <__swbuf_r+0x12>
 800fa54:	f7ff ff0e 	bl	800f874 <__sinit>
 800fa58:	69a3      	ldr	r3, [r4, #24]
 800fa5a:	60a3      	str	r3, [r4, #8]
 800fa5c:	89a3      	ldrh	r3, [r4, #12]
 800fa5e:	071a      	lsls	r2, r3, #28
 800fa60:	d501      	bpl.n	800fa66 <__swbuf_r+0x20>
 800fa62:	6923      	ldr	r3, [r4, #16]
 800fa64:	b943      	cbnz	r3, 800fa78 <__swbuf_r+0x32>
 800fa66:	4621      	mov	r1, r4
 800fa68:	4628      	mov	r0, r5
 800fa6a:	f000 f82b 	bl	800fac4 <__swsetup_r>
 800fa6e:	b118      	cbz	r0, 800fa78 <__swbuf_r+0x32>
 800fa70:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fa74:	4638      	mov	r0, r7
 800fa76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa78:	6823      	ldr	r3, [r4, #0]
 800fa7a:	6922      	ldr	r2, [r4, #16]
 800fa7c:	1a98      	subs	r0, r3, r2
 800fa7e:	6963      	ldr	r3, [r4, #20]
 800fa80:	b2f6      	uxtb	r6, r6
 800fa82:	4283      	cmp	r3, r0
 800fa84:	4637      	mov	r7, r6
 800fa86:	dc05      	bgt.n	800fa94 <__swbuf_r+0x4e>
 800fa88:	4621      	mov	r1, r4
 800fa8a:	4628      	mov	r0, r5
 800fa8c:	f000 fd36 	bl	80104fc <_fflush_r>
 800fa90:	2800      	cmp	r0, #0
 800fa92:	d1ed      	bne.n	800fa70 <__swbuf_r+0x2a>
 800fa94:	68a3      	ldr	r3, [r4, #8]
 800fa96:	3b01      	subs	r3, #1
 800fa98:	60a3      	str	r3, [r4, #8]
 800fa9a:	6823      	ldr	r3, [r4, #0]
 800fa9c:	1c5a      	adds	r2, r3, #1
 800fa9e:	6022      	str	r2, [r4, #0]
 800faa0:	701e      	strb	r6, [r3, #0]
 800faa2:	6962      	ldr	r2, [r4, #20]
 800faa4:	1c43      	adds	r3, r0, #1
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d004      	beq.n	800fab4 <__swbuf_r+0x6e>
 800faaa:	89a3      	ldrh	r3, [r4, #12]
 800faac:	07db      	lsls	r3, r3, #31
 800faae:	d5e1      	bpl.n	800fa74 <__swbuf_r+0x2e>
 800fab0:	2e0a      	cmp	r6, #10
 800fab2:	d1df      	bne.n	800fa74 <__swbuf_r+0x2e>
 800fab4:	4621      	mov	r1, r4
 800fab6:	4628      	mov	r0, r5
 800fab8:	f000 fd20 	bl	80104fc <_fflush_r>
 800fabc:	2800      	cmp	r0, #0
 800fabe:	d0d9      	beq.n	800fa74 <__swbuf_r+0x2e>
 800fac0:	e7d6      	b.n	800fa70 <__swbuf_r+0x2a>
	...

0800fac4 <__swsetup_r>:
 800fac4:	b538      	push	{r3, r4, r5, lr}
 800fac6:	4b29      	ldr	r3, [pc, #164]	@ (800fb6c <__swsetup_r+0xa8>)
 800fac8:	4605      	mov	r5, r0
 800faca:	6818      	ldr	r0, [r3, #0]
 800facc:	460c      	mov	r4, r1
 800face:	b118      	cbz	r0, 800fad8 <__swsetup_r+0x14>
 800fad0:	6a03      	ldr	r3, [r0, #32]
 800fad2:	b90b      	cbnz	r3, 800fad8 <__swsetup_r+0x14>
 800fad4:	f7ff fece 	bl	800f874 <__sinit>
 800fad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fadc:	0719      	lsls	r1, r3, #28
 800fade:	d422      	bmi.n	800fb26 <__swsetup_r+0x62>
 800fae0:	06da      	lsls	r2, r3, #27
 800fae2:	d407      	bmi.n	800faf4 <__swsetup_r+0x30>
 800fae4:	2209      	movs	r2, #9
 800fae6:	602a      	str	r2, [r5, #0]
 800fae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800faec:	81a3      	strh	r3, [r4, #12]
 800faee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800faf2:	e033      	b.n	800fb5c <__swsetup_r+0x98>
 800faf4:	0758      	lsls	r0, r3, #29
 800faf6:	d512      	bpl.n	800fb1e <__swsetup_r+0x5a>
 800faf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fafa:	b141      	cbz	r1, 800fb0e <__swsetup_r+0x4a>
 800fafc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb00:	4299      	cmp	r1, r3
 800fb02:	d002      	beq.n	800fb0a <__swsetup_r+0x46>
 800fb04:	4628      	mov	r0, r5
 800fb06:	f000 f8af 	bl	800fc68 <_free_r>
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb0e:	89a3      	ldrh	r3, [r4, #12]
 800fb10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fb14:	81a3      	strh	r3, [r4, #12]
 800fb16:	2300      	movs	r3, #0
 800fb18:	6063      	str	r3, [r4, #4]
 800fb1a:	6923      	ldr	r3, [r4, #16]
 800fb1c:	6023      	str	r3, [r4, #0]
 800fb1e:	89a3      	ldrh	r3, [r4, #12]
 800fb20:	f043 0308 	orr.w	r3, r3, #8
 800fb24:	81a3      	strh	r3, [r4, #12]
 800fb26:	6923      	ldr	r3, [r4, #16]
 800fb28:	b94b      	cbnz	r3, 800fb3e <__swsetup_r+0x7a>
 800fb2a:	89a3      	ldrh	r3, [r4, #12]
 800fb2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fb30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb34:	d003      	beq.n	800fb3e <__swsetup_r+0x7a>
 800fb36:	4621      	mov	r1, r4
 800fb38:	4628      	mov	r0, r5
 800fb3a:	f000 fd2d 	bl	8010598 <__smakebuf_r>
 800fb3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb42:	f013 0201 	ands.w	r2, r3, #1
 800fb46:	d00a      	beq.n	800fb5e <__swsetup_r+0x9a>
 800fb48:	2200      	movs	r2, #0
 800fb4a:	60a2      	str	r2, [r4, #8]
 800fb4c:	6962      	ldr	r2, [r4, #20]
 800fb4e:	4252      	negs	r2, r2
 800fb50:	61a2      	str	r2, [r4, #24]
 800fb52:	6922      	ldr	r2, [r4, #16]
 800fb54:	b942      	cbnz	r2, 800fb68 <__swsetup_r+0xa4>
 800fb56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fb5a:	d1c5      	bne.n	800fae8 <__swsetup_r+0x24>
 800fb5c:	bd38      	pop	{r3, r4, r5, pc}
 800fb5e:	0799      	lsls	r1, r3, #30
 800fb60:	bf58      	it	pl
 800fb62:	6962      	ldrpl	r2, [r4, #20]
 800fb64:	60a2      	str	r2, [r4, #8]
 800fb66:	e7f4      	b.n	800fb52 <__swsetup_r+0x8e>
 800fb68:	2000      	movs	r0, #0
 800fb6a:	e7f7      	b.n	800fb5c <__swsetup_r+0x98>
 800fb6c:	20000108 	.word	0x20000108

0800fb70 <memset>:
 800fb70:	4402      	add	r2, r0
 800fb72:	4603      	mov	r3, r0
 800fb74:	4293      	cmp	r3, r2
 800fb76:	d100      	bne.n	800fb7a <memset+0xa>
 800fb78:	4770      	bx	lr
 800fb7a:	f803 1b01 	strb.w	r1, [r3], #1
 800fb7e:	e7f9      	b.n	800fb74 <memset+0x4>

0800fb80 <_close_r>:
 800fb80:	b538      	push	{r3, r4, r5, lr}
 800fb82:	4d06      	ldr	r5, [pc, #24]	@ (800fb9c <_close_r+0x1c>)
 800fb84:	2300      	movs	r3, #0
 800fb86:	4604      	mov	r4, r0
 800fb88:	4608      	mov	r0, r1
 800fb8a:	602b      	str	r3, [r5, #0]
 800fb8c:	f7f8 feab 	bl	80088e6 <_close>
 800fb90:	1c43      	adds	r3, r0, #1
 800fb92:	d102      	bne.n	800fb9a <_close_r+0x1a>
 800fb94:	682b      	ldr	r3, [r5, #0]
 800fb96:	b103      	cbz	r3, 800fb9a <_close_r+0x1a>
 800fb98:	6023      	str	r3, [r4, #0]
 800fb9a:	bd38      	pop	{r3, r4, r5, pc}
 800fb9c:	20001ee4 	.word	0x20001ee4

0800fba0 <_lseek_r>:
 800fba0:	b538      	push	{r3, r4, r5, lr}
 800fba2:	4d07      	ldr	r5, [pc, #28]	@ (800fbc0 <_lseek_r+0x20>)
 800fba4:	4604      	mov	r4, r0
 800fba6:	4608      	mov	r0, r1
 800fba8:	4611      	mov	r1, r2
 800fbaa:	2200      	movs	r2, #0
 800fbac:	602a      	str	r2, [r5, #0]
 800fbae:	461a      	mov	r2, r3
 800fbb0:	f7f8 fec0 	bl	8008934 <_lseek>
 800fbb4:	1c43      	adds	r3, r0, #1
 800fbb6:	d102      	bne.n	800fbbe <_lseek_r+0x1e>
 800fbb8:	682b      	ldr	r3, [r5, #0]
 800fbba:	b103      	cbz	r3, 800fbbe <_lseek_r+0x1e>
 800fbbc:	6023      	str	r3, [r4, #0]
 800fbbe:	bd38      	pop	{r3, r4, r5, pc}
 800fbc0:	20001ee4 	.word	0x20001ee4

0800fbc4 <_read_r>:
 800fbc4:	b538      	push	{r3, r4, r5, lr}
 800fbc6:	4d07      	ldr	r5, [pc, #28]	@ (800fbe4 <_read_r+0x20>)
 800fbc8:	4604      	mov	r4, r0
 800fbca:	4608      	mov	r0, r1
 800fbcc:	4611      	mov	r1, r2
 800fbce:	2200      	movs	r2, #0
 800fbd0:	602a      	str	r2, [r5, #0]
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	f7f8 fe6a 	bl	80088ac <_read>
 800fbd8:	1c43      	adds	r3, r0, #1
 800fbda:	d102      	bne.n	800fbe2 <_read_r+0x1e>
 800fbdc:	682b      	ldr	r3, [r5, #0]
 800fbde:	b103      	cbz	r3, 800fbe2 <_read_r+0x1e>
 800fbe0:	6023      	str	r3, [r4, #0]
 800fbe2:	bd38      	pop	{r3, r4, r5, pc}
 800fbe4:	20001ee4 	.word	0x20001ee4

0800fbe8 <_write_r>:
 800fbe8:	b538      	push	{r3, r4, r5, lr}
 800fbea:	4d07      	ldr	r5, [pc, #28]	@ (800fc08 <_write_r+0x20>)
 800fbec:	4604      	mov	r4, r0
 800fbee:	4608      	mov	r0, r1
 800fbf0:	4611      	mov	r1, r2
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	602a      	str	r2, [r5, #0]
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	f7f8 fef2 	bl	80089e0 <_write>
 800fbfc:	1c43      	adds	r3, r0, #1
 800fbfe:	d102      	bne.n	800fc06 <_write_r+0x1e>
 800fc00:	682b      	ldr	r3, [r5, #0]
 800fc02:	b103      	cbz	r3, 800fc06 <_write_r+0x1e>
 800fc04:	6023      	str	r3, [r4, #0]
 800fc06:	bd38      	pop	{r3, r4, r5, pc}
 800fc08:	20001ee4 	.word	0x20001ee4

0800fc0c <__errno>:
 800fc0c:	4b01      	ldr	r3, [pc, #4]	@ (800fc14 <__errno+0x8>)
 800fc0e:	6818      	ldr	r0, [r3, #0]
 800fc10:	4770      	bx	lr
 800fc12:	bf00      	nop
 800fc14:	20000108 	.word	0x20000108

0800fc18 <__libc_init_array>:
 800fc18:	b570      	push	{r4, r5, r6, lr}
 800fc1a:	4d0d      	ldr	r5, [pc, #52]	@ (800fc50 <__libc_init_array+0x38>)
 800fc1c:	4c0d      	ldr	r4, [pc, #52]	@ (800fc54 <__libc_init_array+0x3c>)
 800fc1e:	1b64      	subs	r4, r4, r5
 800fc20:	10a4      	asrs	r4, r4, #2
 800fc22:	2600      	movs	r6, #0
 800fc24:	42a6      	cmp	r6, r4
 800fc26:	d109      	bne.n	800fc3c <__libc_init_array+0x24>
 800fc28:	4d0b      	ldr	r5, [pc, #44]	@ (800fc58 <__libc_init_array+0x40>)
 800fc2a:	4c0c      	ldr	r4, [pc, #48]	@ (800fc5c <__libc_init_array+0x44>)
 800fc2c:	f000 fd22 	bl	8010674 <_init>
 800fc30:	1b64      	subs	r4, r4, r5
 800fc32:	10a4      	asrs	r4, r4, #2
 800fc34:	2600      	movs	r6, #0
 800fc36:	42a6      	cmp	r6, r4
 800fc38:	d105      	bne.n	800fc46 <__libc_init_array+0x2e>
 800fc3a:	bd70      	pop	{r4, r5, r6, pc}
 800fc3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc40:	4798      	blx	r3
 800fc42:	3601      	adds	r6, #1
 800fc44:	e7ee      	b.n	800fc24 <__libc_init_array+0xc>
 800fc46:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc4a:	4798      	blx	r3
 800fc4c:	3601      	adds	r6, #1
 800fc4e:	e7f2      	b.n	800fc36 <__libc_init_array+0x1e>
 800fc50:	080107a0 	.word	0x080107a0
 800fc54:	080107a0 	.word	0x080107a0
 800fc58:	080107a0 	.word	0x080107a0
 800fc5c:	080107a4 	.word	0x080107a4

0800fc60 <__retarget_lock_init_recursive>:
 800fc60:	4770      	bx	lr

0800fc62 <__retarget_lock_acquire_recursive>:
 800fc62:	4770      	bx	lr

0800fc64 <__retarget_lock_release_recursive>:
 800fc64:	4770      	bx	lr
	...

0800fc68 <_free_r>:
 800fc68:	b538      	push	{r3, r4, r5, lr}
 800fc6a:	4605      	mov	r5, r0
 800fc6c:	2900      	cmp	r1, #0
 800fc6e:	d041      	beq.n	800fcf4 <_free_r+0x8c>
 800fc70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc74:	1f0c      	subs	r4, r1, #4
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	bfb8      	it	lt
 800fc7a:	18e4      	addlt	r4, r4, r3
 800fc7c:	f000 f8e0 	bl	800fe40 <__malloc_lock>
 800fc80:	4a1d      	ldr	r2, [pc, #116]	@ (800fcf8 <_free_r+0x90>)
 800fc82:	6813      	ldr	r3, [r2, #0]
 800fc84:	b933      	cbnz	r3, 800fc94 <_free_r+0x2c>
 800fc86:	6063      	str	r3, [r4, #4]
 800fc88:	6014      	str	r4, [r2, #0]
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc90:	f000 b8dc 	b.w	800fe4c <__malloc_unlock>
 800fc94:	42a3      	cmp	r3, r4
 800fc96:	d908      	bls.n	800fcaa <_free_r+0x42>
 800fc98:	6820      	ldr	r0, [r4, #0]
 800fc9a:	1821      	adds	r1, r4, r0
 800fc9c:	428b      	cmp	r3, r1
 800fc9e:	bf01      	itttt	eq
 800fca0:	6819      	ldreq	r1, [r3, #0]
 800fca2:	685b      	ldreq	r3, [r3, #4]
 800fca4:	1809      	addeq	r1, r1, r0
 800fca6:	6021      	streq	r1, [r4, #0]
 800fca8:	e7ed      	b.n	800fc86 <_free_r+0x1e>
 800fcaa:	461a      	mov	r2, r3
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	b10b      	cbz	r3, 800fcb4 <_free_r+0x4c>
 800fcb0:	42a3      	cmp	r3, r4
 800fcb2:	d9fa      	bls.n	800fcaa <_free_r+0x42>
 800fcb4:	6811      	ldr	r1, [r2, #0]
 800fcb6:	1850      	adds	r0, r2, r1
 800fcb8:	42a0      	cmp	r0, r4
 800fcba:	d10b      	bne.n	800fcd4 <_free_r+0x6c>
 800fcbc:	6820      	ldr	r0, [r4, #0]
 800fcbe:	4401      	add	r1, r0
 800fcc0:	1850      	adds	r0, r2, r1
 800fcc2:	4283      	cmp	r3, r0
 800fcc4:	6011      	str	r1, [r2, #0]
 800fcc6:	d1e0      	bne.n	800fc8a <_free_r+0x22>
 800fcc8:	6818      	ldr	r0, [r3, #0]
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	6053      	str	r3, [r2, #4]
 800fcce:	4408      	add	r0, r1
 800fcd0:	6010      	str	r0, [r2, #0]
 800fcd2:	e7da      	b.n	800fc8a <_free_r+0x22>
 800fcd4:	d902      	bls.n	800fcdc <_free_r+0x74>
 800fcd6:	230c      	movs	r3, #12
 800fcd8:	602b      	str	r3, [r5, #0]
 800fcda:	e7d6      	b.n	800fc8a <_free_r+0x22>
 800fcdc:	6820      	ldr	r0, [r4, #0]
 800fcde:	1821      	adds	r1, r4, r0
 800fce0:	428b      	cmp	r3, r1
 800fce2:	bf04      	itt	eq
 800fce4:	6819      	ldreq	r1, [r3, #0]
 800fce6:	685b      	ldreq	r3, [r3, #4]
 800fce8:	6063      	str	r3, [r4, #4]
 800fcea:	bf04      	itt	eq
 800fcec:	1809      	addeq	r1, r1, r0
 800fcee:	6021      	streq	r1, [r4, #0]
 800fcf0:	6054      	str	r4, [r2, #4]
 800fcf2:	e7ca      	b.n	800fc8a <_free_r+0x22>
 800fcf4:	bd38      	pop	{r3, r4, r5, pc}
 800fcf6:	bf00      	nop
 800fcf8:	20001ef0 	.word	0x20001ef0

0800fcfc <sbrk_aligned>:
 800fcfc:	b570      	push	{r4, r5, r6, lr}
 800fcfe:	4e0f      	ldr	r6, [pc, #60]	@ (800fd3c <sbrk_aligned+0x40>)
 800fd00:	460c      	mov	r4, r1
 800fd02:	6831      	ldr	r1, [r6, #0]
 800fd04:	4605      	mov	r5, r0
 800fd06:	b911      	cbnz	r1, 800fd0e <sbrk_aligned+0x12>
 800fd08:	f000 fca4 	bl	8010654 <_sbrk_r>
 800fd0c:	6030      	str	r0, [r6, #0]
 800fd0e:	4621      	mov	r1, r4
 800fd10:	4628      	mov	r0, r5
 800fd12:	f000 fc9f 	bl	8010654 <_sbrk_r>
 800fd16:	1c43      	adds	r3, r0, #1
 800fd18:	d103      	bne.n	800fd22 <sbrk_aligned+0x26>
 800fd1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800fd1e:	4620      	mov	r0, r4
 800fd20:	bd70      	pop	{r4, r5, r6, pc}
 800fd22:	1cc4      	adds	r4, r0, #3
 800fd24:	f024 0403 	bic.w	r4, r4, #3
 800fd28:	42a0      	cmp	r0, r4
 800fd2a:	d0f8      	beq.n	800fd1e <sbrk_aligned+0x22>
 800fd2c:	1a21      	subs	r1, r4, r0
 800fd2e:	4628      	mov	r0, r5
 800fd30:	f000 fc90 	bl	8010654 <_sbrk_r>
 800fd34:	3001      	adds	r0, #1
 800fd36:	d1f2      	bne.n	800fd1e <sbrk_aligned+0x22>
 800fd38:	e7ef      	b.n	800fd1a <sbrk_aligned+0x1e>
 800fd3a:	bf00      	nop
 800fd3c:	20001eec 	.word	0x20001eec

0800fd40 <_malloc_r>:
 800fd40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd44:	1ccd      	adds	r5, r1, #3
 800fd46:	f025 0503 	bic.w	r5, r5, #3
 800fd4a:	3508      	adds	r5, #8
 800fd4c:	2d0c      	cmp	r5, #12
 800fd4e:	bf38      	it	cc
 800fd50:	250c      	movcc	r5, #12
 800fd52:	2d00      	cmp	r5, #0
 800fd54:	4606      	mov	r6, r0
 800fd56:	db01      	blt.n	800fd5c <_malloc_r+0x1c>
 800fd58:	42a9      	cmp	r1, r5
 800fd5a:	d904      	bls.n	800fd66 <_malloc_r+0x26>
 800fd5c:	230c      	movs	r3, #12
 800fd5e:	6033      	str	r3, [r6, #0]
 800fd60:	2000      	movs	r0, #0
 800fd62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fe3c <_malloc_r+0xfc>
 800fd6a:	f000 f869 	bl	800fe40 <__malloc_lock>
 800fd6e:	f8d8 3000 	ldr.w	r3, [r8]
 800fd72:	461c      	mov	r4, r3
 800fd74:	bb44      	cbnz	r4, 800fdc8 <_malloc_r+0x88>
 800fd76:	4629      	mov	r1, r5
 800fd78:	4630      	mov	r0, r6
 800fd7a:	f7ff ffbf 	bl	800fcfc <sbrk_aligned>
 800fd7e:	1c43      	adds	r3, r0, #1
 800fd80:	4604      	mov	r4, r0
 800fd82:	d158      	bne.n	800fe36 <_malloc_r+0xf6>
 800fd84:	f8d8 4000 	ldr.w	r4, [r8]
 800fd88:	4627      	mov	r7, r4
 800fd8a:	2f00      	cmp	r7, #0
 800fd8c:	d143      	bne.n	800fe16 <_malloc_r+0xd6>
 800fd8e:	2c00      	cmp	r4, #0
 800fd90:	d04b      	beq.n	800fe2a <_malloc_r+0xea>
 800fd92:	6823      	ldr	r3, [r4, #0]
 800fd94:	4639      	mov	r1, r7
 800fd96:	4630      	mov	r0, r6
 800fd98:	eb04 0903 	add.w	r9, r4, r3
 800fd9c:	f000 fc5a 	bl	8010654 <_sbrk_r>
 800fda0:	4581      	cmp	r9, r0
 800fda2:	d142      	bne.n	800fe2a <_malloc_r+0xea>
 800fda4:	6821      	ldr	r1, [r4, #0]
 800fda6:	1a6d      	subs	r5, r5, r1
 800fda8:	4629      	mov	r1, r5
 800fdaa:	4630      	mov	r0, r6
 800fdac:	f7ff ffa6 	bl	800fcfc <sbrk_aligned>
 800fdb0:	3001      	adds	r0, #1
 800fdb2:	d03a      	beq.n	800fe2a <_malloc_r+0xea>
 800fdb4:	6823      	ldr	r3, [r4, #0]
 800fdb6:	442b      	add	r3, r5
 800fdb8:	6023      	str	r3, [r4, #0]
 800fdba:	f8d8 3000 	ldr.w	r3, [r8]
 800fdbe:	685a      	ldr	r2, [r3, #4]
 800fdc0:	bb62      	cbnz	r2, 800fe1c <_malloc_r+0xdc>
 800fdc2:	f8c8 7000 	str.w	r7, [r8]
 800fdc6:	e00f      	b.n	800fde8 <_malloc_r+0xa8>
 800fdc8:	6822      	ldr	r2, [r4, #0]
 800fdca:	1b52      	subs	r2, r2, r5
 800fdcc:	d420      	bmi.n	800fe10 <_malloc_r+0xd0>
 800fdce:	2a0b      	cmp	r2, #11
 800fdd0:	d917      	bls.n	800fe02 <_malloc_r+0xc2>
 800fdd2:	1961      	adds	r1, r4, r5
 800fdd4:	42a3      	cmp	r3, r4
 800fdd6:	6025      	str	r5, [r4, #0]
 800fdd8:	bf18      	it	ne
 800fdda:	6059      	strne	r1, [r3, #4]
 800fddc:	6863      	ldr	r3, [r4, #4]
 800fdde:	bf08      	it	eq
 800fde0:	f8c8 1000 	streq.w	r1, [r8]
 800fde4:	5162      	str	r2, [r4, r5]
 800fde6:	604b      	str	r3, [r1, #4]
 800fde8:	4630      	mov	r0, r6
 800fdea:	f000 f82f 	bl	800fe4c <__malloc_unlock>
 800fdee:	f104 000b 	add.w	r0, r4, #11
 800fdf2:	1d23      	adds	r3, r4, #4
 800fdf4:	f020 0007 	bic.w	r0, r0, #7
 800fdf8:	1ac2      	subs	r2, r0, r3
 800fdfa:	bf1c      	itt	ne
 800fdfc:	1a1b      	subne	r3, r3, r0
 800fdfe:	50a3      	strne	r3, [r4, r2]
 800fe00:	e7af      	b.n	800fd62 <_malloc_r+0x22>
 800fe02:	6862      	ldr	r2, [r4, #4]
 800fe04:	42a3      	cmp	r3, r4
 800fe06:	bf0c      	ite	eq
 800fe08:	f8c8 2000 	streq.w	r2, [r8]
 800fe0c:	605a      	strne	r2, [r3, #4]
 800fe0e:	e7eb      	b.n	800fde8 <_malloc_r+0xa8>
 800fe10:	4623      	mov	r3, r4
 800fe12:	6864      	ldr	r4, [r4, #4]
 800fe14:	e7ae      	b.n	800fd74 <_malloc_r+0x34>
 800fe16:	463c      	mov	r4, r7
 800fe18:	687f      	ldr	r7, [r7, #4]
 800fe1a:	e7b6      	b.n	800fd8a <_malloc_r+0x4a>
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	42a3      	cmp	r3, r4
 800fe22:	d1fb      	bne.n	800fe1c <_malloc_r+0xdc>
 800fe24:	2300      	movs	r3, #0
 800fe26:	6053      	str	r3, [r2, #4]
 800fe28:	e7de      	b.n	800fde8 <_malloc_r+0xa8>
 800fe2a:	230c      	movs	r3, #12
 800fe2c:	6033      	str	r3, [r6, #0]
 800fe2e:	4630      	mov	r0, r6
 800fe30:	f000 f80c 	bl	800fe4c <__malloc_unlock>
 800fe34:	e794      	b.n	800fd60 <_malloc_r+0x20>
 800fe36:	6005      	str	r5, [r0, #0]
 800fe38:	e7d6      	b.n	800fde8 <_malloc_r+0xa8>
 800fe3a:	bf00      	nop
 800fe3c:	20001ef0 	.word	0x20001ef0

0800fe40 <__malloc_lock>:
 800fe40:	4801      	ldr	r0, [pc, #4]	@ (800fe48 <__malloc_lock+0x8>)
 800fe42:	f7ff bf0e 	b.w	800fc62 <__retarget_lock_acquire_recursive>
 800fe46:	bf00      	nop
 800fe48:	20001ee8 	.word	0x20001ee8

0800fe4c <__malloc_unlock>:
 800fe4c:	4801      	ldr	r0, [pc, #4]	@ (800fe54 <__malloc_unlock+0x8>)
 800fe4e:	f7ff bf09 	b.w	800fc64 <__retarget_lock_release_recursive>
 800fe52:	bf00      	nop
 800fe54:	20001ee8 	.word	0x20001ee8

0800fe58 <__sfputc_r>:
 800fe58:	6893      	ldr	r3, [r2, #8]
 800fe5a:	3b01      	subs	r3, #1
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	b410      	push	{r4}
 800fe60:	6093      	str	r3, [r2, #8]
 800fe62:	da08      	bge.n	800fe76 <__sfputc_r+0x1e>
 800fe64:	6994      	ldr	r4, [r2, #24]
 800fe66:	42a3      	cmp	r3, r4
 800fe68:	db01      	blt.n	800fe6e <__sfputc_r+0x16>
 800fe6a:	290a      	cmp	r1, #10
 800fe6c:	d103      	bne.n	800fe76 <__sfputc_r+0x1e>
 800fe6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe72:	f7ff bde8 	b.w	800fa46 <__swbuf_r>
 800fe76:	6813      	ldr	r3, [r2, #0]
 800fe78:	1c58      	adds	r0, r3, #1
 800fe7a:	6010      	str	r0, [r2, #0]
 800fe7c:	7019      	strb	r1, [r3, #0]
 800fe7e:	4608      	mov	r0, r1
 800fe80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe84:	4770      	bx	lr

0800fe86 <__sfputs_r>:
 800fe86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe88:	4606      	mov	r6, r0
 800fe8a:	460f      	mov	r7, r1
 800fe8c:	4614      	mov	r4, r2
 800fe8e:	18d5      	adds	r5, r2, r3
 800fe90:	42ac      	cmp	r4, r5
 800fe92:	d101      	bne.n	800fe98 <__sfputs_r+0x12>
 800fe94:	2000      	movs	r0, #0
 800fe96:	e007      	b.n	800fea8 <__sfputs_r+0x22>
 800fe98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe9c:	463a      	mov	r2, r7
 800fe9e:	4630      	mov	r0, r6
 800fea0:	f7ff ffda 	bl	800fe58 <__sfputc_r>
 800fea4:	1c43      	adds	r3, r0, #1
 800fea6:	d1f3      	bne.n	800fe90 <__sfputs_r+0xa>
 800fea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800feac <_vfiprintf_r>:
 800feac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb0:	460d      	mov	r5, r1
 800feb2:	b09d      	sub	sp, #116	@ 0x74
 800feb4:	4614      	mov	r4, r2
 800feb6:	4698      	mov	r8, r3
 800feb8:	4606      	mov	r6, r0
 800feba:	b118      	cbz	r0, 800fec4 <_vfiprintf_r+0x18>
 800febc:	6a03      	ldr	r3, [r0, #32]
 800febe:	b90b      	cbnz	r3, 800fec4 <_vfiprintf_r+0x18>
 800fec0:	f7ff fcd8 	bl	800f874 <__sinit>
 800fec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fec6:	07d9      	lsls	r1, r3, #31
 800fec8:	d405      	bmi.n	800fed6 <_vfiprintf_r+0x2a>
 800feca:	89ab      	ldrh	r3, [r5, #12]
 800fecc:	059a      	lsls	r2, r3, #22
 800fece:	d402      	bmi.n	800fed6 <_vfiprintf_r+0x2a>
 800fed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fed2:	f7ff fec6 	bl	800fc62 <__retarget_lock_acquire_recursive>
 800fed6:	89ab      	ldrh	r3, [r5, #12]
 800fed8:	071b      	lsls	r3, r3, #28
 800feda:	d501      	bpl.n	800fee0 <_vfiprintf_r+0x34>
 800fedc:	692b      	ldr	r3, [r5, #16]
 800fede:	b99b      	cbnz	r3, 800ff08 <_vfiprintf_r+0x5c>
 800fee0:	4629      	mov	r1, r5
 800fee2:	4630      	mov	r0, r6
 800fee4:	f7ff fdee 	bl	800fac4 <__swsetup_r>
 800fee8:	b170      	cbz	r0, 800ff08 <_vfiprintf_r+0x5c>
 800feea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800feec:	07dc      	lsls	r4, r3, #31
 800feee:	d504      	bpl.n	800fefa <_vfiprintf_r+0x4e>
 800fef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fef4:	b01d      	add	sp, #116	@ 0x74
 800fef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fefa:	89ab      	ldrh	r3, [r5, #12]
 800fefc:	0598      	lsls	r0, r3, #22
 800fefe:	d4f7      	bmi.n	800fef0 <_vfiprintf_r+0x44>
 800ff00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff02:	f7ff feaf 	bl	800fc64 <__retarget_lock_release_recursive>
 800ff06:	e7f3      	b.n	800fef0 <_vfiprintf_r+0x44>
 800ff08:	2300      	movs	r3, #0
 800ff0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff0c:	2320      	movs	r3, #32
 800ff0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ff12:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff16:	2330      	movs	r3, #48	@ 0x30
 800ff18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80100c8 <_vfiprintf_r+0x21c>
 800ff1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ff20:	f04f 0901 	mov.w	r9, #1
 800ff24:	4623      	mov	r3, r4
 800ff26:	469a      	mov	sl, r3
 800ff28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff2c:	b10a      	cbz	r2, 800ff32 <_vfiprintf_r+0x86>
 800ff2e:	2a25      	cmp	r2, #37	@ 0x25
 800ff30:	d1f9      	bne.n	800ff26 <_vfiprintf_r+0x7a>
 800ff32:	ebba 0b04 	subs.w	fp, sl, r4
 800ff36:	d00b      	beq.n	800ff50 <_vfiprintf_r+0xa4>
 800ff38:	465b      	mov	r3, fp
 800ff3a:	4622      	mov	r2, r4
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	4630      	mov	r0, r6
 800ff40:	f7ff ffa1 	bl	800fe86 <__sfputs_r>
 800ff44:	3001      	adds	r0, #1
 800ff46:	f000 80a7 	beq.w	8010098 <_vfiprintf_r+0x1ec>
 800ff4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff4c:	445a      	add	r2, fp
 800ff4e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff50:	f89a 3000 	ldrb.w	r3, [sl]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	f000 809f 	beq.w	8010098 <_vfiprintf_r+0x1ec>
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ff60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff64:	f10a 0a01 	add.w	sl, sl, #1
 800ff68:	9304      	str	r3, [sp, #16]
 800ff6a:	9307      	str	r3, [sp, #28]
 800ff6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ff70:	931a      	str	r3, [sp, #104]	@ 0x68
 800ff72:	4654      	mov	r4, sl
 800ff74:	2205      	movs	r2, #5
 800ff76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff7a:	4853      	ldr	r0, [pc, #332]	@ (80100c8 <_vfiprintf_r+0x21c>)
 800ff7c:	f7f8 f930 	bl	80081e0 <memchr>
 800ff80:	9a04      	ldr	r2, [sp, #16]
 800ff82:	b9d8      	cbnz	r0, 800ffbc <_vfiprintf_r+0x110>
 800ff84:	06d1      	lsls	r1, r2, #27
 800ff86:	bf44      	itt	mi
 800ff88:	2320      	movmi	r3, #32
 800ff8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff8e:	0713      	lsls	r3, r2, #28
 800ff90:	bf44      	itt	mi
 800ff92:	232b      	movmi	r3, #43	@ 0x2b
 800ff94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff98:	f89a 3000 	ldrb.w	r3, [sl]
 800ff9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff9e:	d015      	beq.n	800ffcc <_vfiprintf_r+0x120>
 800ffa0:	9a07      	ldr	r2, [sp, #28]
 800ffa2:	4654      	mov	r4, sl
 800ffa4:	2000      	movs	r0, #0
 800ffa6:	f04f 0c0a 	mov.w	ip, #10
 800ffaa:	4621      	mov	r1, r4
 800ffac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffb0:	3b30      	subs	r3, #48	@ 0x30
 800ffb2:	2b09      	cmp	r3, #9
 800ffb4:	d94b      	bls.n	801004e <_vfiprintf_r+0x1a2>
 800ffb6:	b1b0      	cbz	r0, 800ffe6 <_vfiprintf_r+0x13a>
 800ffb8:	9207      	str	r2, [sp, #28]
 800ffba:	e014      	b.n	800ffe6 <_vfiprintf_r+0x13a>
 800ffbc:	eba0 0308 	sub.w	r3, r0, r8
 800ffc0:	fa09 f303 	lsl.w	r3, r9, r3
 800ffc4:	4313      	orrs	r3, r2
 800ffc6:	9304      	str	r3, [sp, #16]
 800ffc8:	46a2      	mov	sl, r4
 800ffca:	e7d2      	b.n	800ff72 <_vfiprintf_r+0xc6>
 800ffcc:	9b03      	ldr	r3, [sp, #12]
 800ffce:	1d19      	adds	r1, r3, #4
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	9103      	str	r1, [sp, #12]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	bfbb      	ittet	lt
 800ffd8:	425b      	neglt	r3, r3
 800ffda:	f042 0202 	orrlt.w	r2, r2, #2
 800ffde:	9307      	strge	r3, [sp, #28]
 800ffe0:	9307      	strlt	r3, [sp, #28]
 800ffe2:	bfb8      	it	lt
 800ffe4:	9204      	strlt	r2, [sp, #16]
 800ffe6:	7823      	ldrb	r3, [r4, #0]
 800ffe8:	2b2e      	cmp	r3, #46	@ 0x2e
 800ffea:	d10a      	bne.n	8010002 <_vfiprintf_r+0x156>
 800ffec:	7863      	ldrb	r3, [r4, #1]
 800ffee:	2b2a      	cmp	r3, #42	@ 0x2a
 800fff0:	d132      	bne.n	8010058 <_vfiprintf_r+0x1ac>
 800fff2:	9b03      	ldr	r3, [sp, #12]
 800fff4:	1d1a      	adds	r2, r3, #4
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	9203      	str	r2, [sp, #12]
 800fffa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fffe:	3402      	adds	r4, #2
 8010000:	9305      	str	r3, [sp, #20]
 8010002:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80100d8 <_vfiprintf_r+0x22c>
 8010006:	7821      	ldrb	r1, [r4, #0]
 8010008:	2203      	movs	r2, #3
 801000a:	4650      	mov	r0, sl
 801000c:	f7f8 f8e8 	bl	80081e0 <memchr>
 8010010:	b138      	cbz	r0, 8010022 <_vfiprintf_r+0x176>
 8010012:	9b04      	ldr	r3, [sp, #16]
 8010014:	eba0 000a 	sub.w	r0, r0, sl
 8010018:	2240      	movs	r2, #64	@ 0x40
 801001a:	4082      	lsls	r2, r0
 801001c:	4313      	orrs	r3, r2
 801001e:	3401      	adds	r4, #1
 8010020:	9304      	str	r3, [sp, #16]
 8010022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010026:	4829      	ldr	r0, [pc, #164]	@ (80100cc <_vfiprintf_r+0x220>)
 8010028:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801002c:	2206      	movs	r2, #6
 801002e:	f7f8 f8d7 	bl	80081e0 <memchr>
 8010032:	2800      	cmp	r0, #0
 8010034:	d03f      	beq.n	80100b6 <_vfiprintf_r+0x20a>
 8010036:	4b26      	ldr	r3, [pc, #152]	@ (80100d0 <_vfiprintf_r+0x224>)
 8010038:	bb1b      	cbnz	r3, 8010082 <_vfiprintf_r+0x1d6>
 801003a:	9b03      	ldr	r3, [sp, #12]
 801003c:	3307      	adds	r3, #7
 801003e:	f023 0307 	bic.w	r3, r3, #7
 8010042:	3308      	adds	r3, #8
 8010044:	9303      	str	r3, [sp, #12]
 8010046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010048:	443b      	add	r3, r7
 801004a:	9309      	str	r3, [sp, #36]	@ 0x24
 801004c:	e76a      	b.n	800ff24 <_vfiprintf_r+0x78>
 801004e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010052:	460c      	mov	r4, r1
 8010054:	2001      	movs	r0, #1
 8010056:	e7a8      	b.n	800ffaa <_vfiprintf_r+0xfe>
 8010058:	2300      	movs	r3, #0
 801005a:	3401      	adds	r4, #1
 801005c:	9305      	str	r3, [sp, #20]
 801005e:	4619      	mov	r1, r3
 8010060:	f04f 0c0a 	mov.w	ip, #10
 8010064:	4620      	mov	r0, r4
 8010066:	f810 2b01 	ldrb.w	r2, [r0], #1
 801006a:	3a30      	subs	r2, #48	@ 0x30
 801006c:	2a09      	cmp	r2, #9
 801006e:	d903      	bls.n	8010078 <_vfiprintf_r+0x1cc>
 8010070:	2b00      	cmp	r3, #0
 8010072:	d0c6      	beq.n	8010002 <_vfiprintf_r+0x156>
 8010074:	9105      	str	r1, [sp, #20]
 8010076:	e7c4      	b.n	8010002 <_vfiprintf_r+0x156>
 8010078:	fb0c 2101 	mla	r1, ip, r1, r2
 801007c:	4604      	mov	r4, r0
 801007e:	2301      	movs	r3, #1
 8010080:	e7f0      	b.n	8010064 <_vfiprintf_r+0x1b8>
 8010082:	ab03      	add	r3, sp, #12
 8010084:	9300      	str	r3, [sp, #0]
 8010086:	462a      	mov	r2, r5
 8010088:	4b12      	ldr	r3, [pc, #72]	@ (80100d4 <_vfiprintf_r+0x228>)
 801008a:	a904      	add	r1, sp, #16
 801008c:	4630      	mov	r0, r6
 801008e:	f3af 8000 	nop.w
 8010092:	4607      	mov	r7, r0
 8010094:	1c78      	adds	r0, r7, #1
 8010096:	d1d6      	bne.n	8010046 <_vfiprintf_r+0x19a>
 8010098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801009a:	07d9      	lsls	r1, r3, #31
 801009c:	d405      	bmi.n	80100aa <_vfiprintf_r+0x1fe>
 801009e:	89ab      	ldrh	r3, [r5, #12]
 80100a0:	059a      	lsls	r2, r3, #22
 80100a2:	d402      	bmi.n	80100aa <_vfiprintf_r+0x1fe>
 80100a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80100a6:	f7ff fddd 	bl	800fc64 <__retarget_lock_release_recursive>
 80100aa:	89ab      	ldrh	r3, [r5, #12]
 80100ac:	065b      	lsls	r3, r3, #25
 80100ae:	f53f af1f 	bmi.w	800fef0 <_vfiprintf_r+0x44>
 80100b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80100b4:	e71e      	b.n	800fef4 <_vfiprintf_r+0x48>
 80100b6:	ab03      	add	r3, sp, #12
 80100b8:	9300      	str	r3, [sp, #0]
 80100ba:	462a      	mov	r2, r5
 80100bc:	4b05      	ldr	r3, [pc, #20]	@ (80100d4 <_vfiprintf_r+0x228>)
 80100be:	a904      	add	r1, sp, #16
 80100c0:	4630      	mov	r0, r6
 80100c2:	f000 f879 	bl	80101b8 <_printf_i>
 80100c6:	e7e4      	b.n	8010092 <_vfiprintf_r+0x1e6>
 80100c8:	08010764 	.word	0x08010764
 80100cc:	0801076e 	.word	0x0801076e
 80100d0:	00000000 	.word	0x00000000
 80100d4:	0800fe87 	.word	0x0800fe87
 80100d8:	0801076a 	.word	0x0801076a

080100dc <_printf_common>:
 80100dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100e0:	4616      	mov	r6, r2
 80100e2:	4698      	mov	r8, r3
 80100e4:	688a      	ldr	r2, [r1, #8]
 80100e6:	690b      	ldr	r3, [r1, #16]
 80100e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80100ec:	4293      	cmp	r3, r2
 80100ee:	bfb8      	it	lt
 80100f0:	4613      	movlt	r3, r2
 80100f2:	6033      	str	r3, [r6, #0]
 80100f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80100f8:	4607      	mov	r7, r0
 80100fa:	460c      	mov	r4, r1
 80100fc:	b10a      	cbz	r2, 8010102 <_printf_common+0x26>
 80100fe:	3301      	adds	r3, #1
 8010100:	6033      	str	r3, [r6, #0]
 8010102:	6823      	ldr	r3, [r4, #0]
 8010104:	0699      	lsls	r1, r3, #26
 8010106:	bf42      	ittt	mi
 8010108:	6833      	ldrmi	r3, [r6, #0]
 801010a:	3302      	addmi	r3, #2
 801010c:	6033      	strmi	r3, [r6, #0]
 801010e:	6825      	ldr	r5, [r4, #0]
 8010110:	f015 0506 	ands.w	r5, r5, #6
 8010114:	d106      	bne.n	8010124 <_printf_common+0x48>
 8010116:	f104 0a19 	add.w	sl, r4, #25
 801011a:	68e3      	ldr	r3, [r4, #12]
 801011c:	6832      	ldr	r2, [r6, #0]
 801011e:	1a9b      	subs	r3, r3, r2
 8010120:	42ab      	cmp	r3, r5
 8010122:	dc26      	bgt.n	8010172 <_printf_common+0x96>
 8010124:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010128:	6822      	ldr	r2, [r4, #0]
 801012a:	3b00      	subs	r3, #0
 801012c:	bf18      	it	ne
 801012e:	2301      	movne	r3, #1
 8010130:	0692      	lsls	r2, r2, #26
 8010132:	d42b      	bmi.n	801018c <_printf_common+0xb0>
 8010134:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010138:	4641      	mov	r1, r8
 801013a:	4638      	mov	r0, r7
 801013c:	47c8      	blx	r9
 801013e:	3001      	adds	r0, #1
 8010140:	d01e      	beq.n	8010180 <_printf_common+0xa4>
 8010142:	6823      	ldr	r3, [r4, #0]
 8010144:	6922      	ldr	r2, [r4, #16]
 8010146:	f003 0306 	and.w	r3, r3, #6
 801014a:	2b04      	cmp	r3, #4
 801014c:	bf02      	ittt	eq
 801014e:	68e5      	ldreq	r5, [r4, #12]
 8010150:	6833      	ldreq	r3, [r6, #0]
 8010152:	1aed      	subeq	r5, r5, r3
 8010154:	68a3      	ldr	r3, [r4, #8]
 8010156:	bf0c      	ite	eq
 8010158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801015c:	2500      	movne	r5, #0
 801015e:	4293      	cmp	r3, r2
 8010160:	bfc4      	itt	gt
 8010162:	1a9b      	subgt	r3, r3, r2
 8010164:	18ed      	addgt	r5, r5, r3
 8010166:	2600      	movs	r6, #0
 8010168:	341a      	adds	r4, #26
 801016a:	42b5      	cmp	r5, r6
 801016c:	d11a      	bne.n	80101a4 <_printf_common+0xc8>
 801016e:	2000      	movs	r0, #0
 8010170:	e008      	b.n	8010184 <_printf_common+0xa8>
 8010172:	2301      	movs	r3, #1
 8010174:	4652      	mov	r2, sl
 8010176:	4641      	mov	r1, r8
 8010178:	4638      	mov	r0, r7
 801017a:	47c8      	blx	r9
 801017c:	3001      	adds	r0, #1
 801017e:	d103      	bne.n	8010188 <_printf_common+0xac>
 8010180:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010188:	3501      	adds	r5, #1
 801018a:	e7c6      	b.n	801011a <_printf_common+0x3e>
 801018c:	18e1      	adds	r1, r4, r3
 801018e:	1c5a      	adds	r2, r3, #1
 8010190:	2030      	movs	r0, #48	@ 0x30
 8010192:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010196:	4422      	add	r2, r4
 8010198:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801019c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80101a0:	3302      	adds	r3, #2
 80101a2:	e7c7      	b.n	8010134 <_printf_common+0x58>
 80101a4:	2301      	movs	r3, #1
 80101a6:	4622      	mov	r2, r4
 80101a8:	4641      	mov	r1, r8
 80101aa:	4638      	mov	r0, r7
 80101ac:	47c8      	blx	r9
 80101ae:	3001      	adds	r0, #1
 80101b0:	d0e6      	beq.n	8010180 <_printf_common+0xa4>
 80101b2:	3601      	adds	r6, #1
 80101b4:	e7d9      	b.n	801016a <_printf_common+0x8e>
	...

080101b8 <_printf_i>:
 80101b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101bc:	7e0f      	ldrb	r7, [r1, #24]
 80101be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80101c0:	2f78      	cmp	r7, #120	@ 0x78
 80101c2:	4691      	mov	r9, r2
 80101c4:	4680      	mov	r8, r0
 80101c6:	460c      	mov	r4, r1
 80101c8:	469a      	mov	sl, r3
 80101ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80101ce:	d807      	bhi.n	80101e0 <_printf_i+0x28>
 80101d0:	2f62      	cmp	r7, #98	@ 0x62
 80101d2:	d80a      	bhi.n	80101ea <_printf_i+0x32>
 80101d4:	2f00      	cmp	r7, #0
 80101d6:	f000 80d1 	beq.w	801037c <_printf_i+0x1c4>
 80101da:	2f58      	cmp	r7, #88	@ 0x58
 80101dc:	f000 80b8 	beq.w	8010350 <_printf_i+0x198>
 80101e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80101e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80101e8:	e03a      	b.n	8010260 <_printf_i+0xa8>
 80101ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80101ee:	2b15      	cmp	r3, #21
 80101f0:	d8f6      	bhi.n	80101e0 <_printf_i+0x28>
 80101f2:	a101      	add	r1, pc, #4	@ (adr r1, 80101f8 <_printf_i+0x40>)
 80101f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80101f8:	08010251 	.word	0x08010251
 80101fc:	08010265 	.word	0x08010265
 8010200:	080101e1 	.word	0x080101e1
 8010204:	080101e1 	.word	0x080101e1
 8010208:	080101e1 	.word	0x080101e1
 801020c:	080101e1 	.word	0x080101e1
 8010210:	08010265 	.word	0x08010265
 8010214:	080101e1 	.word	0x080101e1
 8010218:	080101e1 	.word	0x080101e1
 801021c:	080101e1 	.word	0x080101e1
 8010220:	080101e1 	.word	0x080101e1
 8010224:	08010363 	.word	0x08010363
 8010228:	0801028f 	.word	0x0801028f
 801022c:	0801031d 	.word	0x0801031d
 8010230:	080101e1 	.word	0x080101e1
 8010234:	080101e1 	.word	0x080101e1
 8010238:	08010385 	.word	0x08010385
 801023c:	080101e1 	.word	0x080101e1
 8010240:	0801028f 	.word	0x0801028f
 8010244:	080101e1 	.word	0x080101e1
 8010248:	080101e1 	.word	0x080101e1
 801024c:	08010325 	.word	0x08010325
 8010250:	6833      	ldr	r3, [r6, #0]
 8010252:	1d1a      	adds	r2, r3, #4
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	6032      	str	r2, [r6, #0]
 8010258:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801025c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010260:	2301      	movs	r3, #1
 8010262:	e09c      	b.n	801039e <_printf_i+0x1e6>
 8010264:	6833      	ldr	r3, [r6, #0]
 8010266:	6820      	ldr	r0, [r4, #0]
 8010268:	1d19      	adds	r1, r3, #4
 801026a:	6031      	str	r1, [r6, #0]
 801026c:	0606      	lsls	r6, r0, #24
 801026e:	d501      	bpl.n	8010274 <_printf_i+0xbc>
 8010270:	681d      	ldr	r5, [r3, #0]
 8010272:	e003      	b.n	801027c <_printf_i+0xc4>
 8010274:	0645      	lsls	r5, r0, #25
 8010276:	d5fb      	bpl.n	8010270 <_printf_i+0xb8>
 8010278:	f9b3 5000 	ldrsh.w	r5, [r3]
 801027c:	2d00      	cmp	r5, #0
 801027e:	da03      	bge.n	8010288 <_printf_i+0xd0>
 8010280:	232d      	movs	r3, #45	@ 0x2d
 8010282:	426d      	negs	r5, r5
 8010284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010288:	4858      	ldr	r0, [pc, #352]	@ (80103ec <_printf_i+0x234>)
 801028a:	230a      	movs	r3, #10
 801028c:	e011      	b.n	80102b2 <_printf_i+0xfa>
 801028e:	6821      	ldr	r1, [r4, #0]
 8010290:	6833      	ldr	r3, [r6, #0]
 8010292:	0608      	lsls	r0, r1, #24
 8010294:	f853 5b04 	ldr.w	r5, [r3], #4
 8010298:	d402      	bmi.n	80102a0 <_printf_i+0xe8>
 801029a:	0649      	lsls	r1, r1, #25
 801029c:	bf48      	it	mi
 801029e:	b2ad      	uxthmi	r5, r5
 80102a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80102a2:	4852      	ldr	r0, [pc, #328]	@ (80103ec <_printf_i+0x234>)
 80102a4:	6033      	str	r3, [r6, #0]
 80102a6:	bf14      	ite	ne
 80102a8:	230a      	movne	r3, #10
 80102aa:	2308      	moveq	r3, #8
 80102ac:	2100      	movs	r1, #0
 80102ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80102b2:	6866      	ldr	r6, [r4, #4]
 80102b4:	60a6      	str	r6, [r4, #8]
 80102b6:	2e00      	cmp	r6, #0
 80102b8:	db05      	blt.n	80102c6 <_printf_i+0x10e>
 80102ba:	6821      	ldr	r1, [r4, #0]
 80102bc:	432e      	orrs	r6, r5
 80102be:	f021 0104 	bic.w	r1, r1, #4
 80102c2:	6021      	str	r1, [r4, #0]
 80102c4:	d04b      	beq.n	801035e <_printf_i+0x1a6>
 80102c6:	4616      	mov	r6, r2
 80102c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80102cc:	fb03 5711 	mls	r7, r3, r1, r5
 80102d0:	5dc7      	ldrb	r7, [r0, r7]
 80102d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80102d6:	462f      	mov	r7, r5
 80102d8:	42bb      	cmp	r3, r7
 80102da:	460d      	mov	r5, r1
 80102dc:	d9f4      	bls.n	80102c8 <_printf_i+0x110>
 80102de:	2b08      	cmp	r3, #8
 80102e0:	d10b      	bne.n	80102fa <_printf_i+0x142>
 80102e2:	6823      	ldr	r3, [r4, #0]
 80102e4:	07df      	lsls	r7, r3, #31
 80102e6:	d508      	bpl.n	80102fa <_printf_i+0x142>
 80102e8:	6923      	ldr	r3, [r4, #16]
 80102ea:	6861      	ldr	r1, [r4, #4]
 80102ec:	4299      	cmp	r1, r3
 80102ee:	bfde      	ittt	le
 80102f0:	2330      	movle	r3, #48	@ 0x30
 80102f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80102f6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80102fa:	1b92      	subs	r2, r2, r6
 80102fc:	6122      	str	r2, [r4, #16]
 80102fe:	f8cd a000 	str.w	sl, [sp]
 8010302:	464b      	mov	r3, r9
 8010304:	aa03      	add	r2, sp, #12
 8010306:	4621      	mov	r1, r4
 8010308:	4640      	mov	r0, r8
 801030a:	f7ff fee7 	bl	80100dc <_printf_common>
 801030e:	3001      	adds	r0, #1
 8010310:	d14a      	bne.n	80103a8 <_printf_i+0x1f0>
 8010312:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010316:	b004      	add	sp, #16
 8010318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801031c:	6823      	ldr	r3, [r4, #0]
 801031e:	f043 0320 	orr.w	r3, r3, #32
 8010322:	6023      	str	r3, [r4, #0]
 8010324:	4832      	ldr	r0, [pc, #200]	@ (80103f0 <_printf_i+0x238>)
 8010326:	2778      	movs	r7, #120	@ 0x78
 8010328:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801032c:	6823      	ldr	r3, [r4, #0]
 801032e:	6831      	ldr	r1, [r6, #0]
 8010330:	061f      	lsls	r7, r3, #24
 8010332:	f851 5b04 	ldr.w	r5, [r1], #4
 8010336:	d402      	bmi.n	801033e <_printf_i+0x186>
 8010338:	065f      	lsls	r7, r3, #25
 801033a:	bf48      	it	mi
 801033c:	b2ad      	uxthmi	r5, r5
 801033e:	6031      	str	r1, [r6, #0]
 8010340:	07d9      	lsls	r1, r3, #31
 8010342:	bf44      	itt	mi
 8010344:	f043 0320 	orrmi.w	r3, r3, #32
 8010348:	6023      	strmi	r3, [r4, #0]
 801034a:	b11d      	cbz	r5, 8010354 <_printf_i+0x19c>
 801034c:	2310      	movs	r3, #16
 801034e:	e7ad      	b.n	80102ac <_printf_i+0xf4>
 8010350:	4826      	ldr	r0, [pc, #152]	@ (80103ec <_printf_i+0x234>)
 8010352:	e7e9      	b.n	8010328 <_printf_i+0x170>
 8010354:	6823      	ldr	r3, [r4, #0]
 8010356:	f023 0320 	bic.w	r3, r3, #32
 801035a:	6023      	str	r3, [r4, #0]
 801035c:	e7f6      	b.n	801034c <_printf_i+0x194>
 801035e:	4616      	mov	r6, r2
 8010360:	e7bd      	b.n	80102de <_printf_i+0x126>
 8010362:	6833      	ldr	r3, [r6, #0]
 8010364:	6825      	ldr	r5, [r4, #0]
 8010366:	6961      	ldr	r1, [r4, #20]
 8010368:	1d18      	adds	r0, r3, #4
 801036a:	6030      	str	r0, [r6, #0]
 801036c:	062e      	lsls	r6, r5, #24
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	d501      	bpl.n	8010376 <_printf_i+0x1be>
 8010372:	6019      	str	r1, [r3, #0]
 8010374:	e002      	b.n	801037c <_printf_i+0x1c4>
 8010376:	0668      	lsls	r0, r5, #25
 8010378:	d5fb      	bpl.n	8010372 <_printf_i+0x1ba>
 801037a:	8019      	strh	r1, [r3, #0]
 801037c:	2300      	movs	r3, #0
 801037e:	6123      	str	r3, [r4, #16]
 8010380:	4616      	mov	r6, r2
 8010382:	e7bc      	b.n	80102fe <_printf_i+0x146>
 8010384:	6833      	ldr	r3, [r6, #0]
 8010386:	1d1a      	adds	r2, r3, #4
 8010388:	6032      	str	r2, [r6, #0]
 801038a:	681e      	ldr	r6, [r3, #0]
 801038c:	6862      	ldr	r2, [r4, #4]
 801038e:	2100      	movs	r1, #0
 8010390:	4630      	mov	r0, r6
 8010392:	f7f7 ff25 	bl	80081e0 <memchr>
 8010396:	b108      	cbz	r0, 801039c <_printf_i+0x1e4>
 8010398:	1b80      	subs	r0, r0, r6
 801039a:	6060      	str	r0, [r4, #4]
 801039c:	6863      	ldr	r3, [r4, #4]
 801039e:	6123      	str	r3, [r4, #16]
 80103a0:	2300      	movs	r3, #0
 80103a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80103a6:	e7aa      	b.n	80102fe <_printf_i+0x146>
 80103a8:	6923      	ldr	r3, [r4, #16]
 80103aa:	4632      	mov	r2, r6
 80103ac:	4649      	mov	r1, r9
 80103ae:	4640      	mov	r0, r8
 80103b0:	47d0      	blx	sl
 80103b2:	3001      	adds	r0, #1
 80103b4:	d0ad      	beq.n	8010312 <_printf_i+0x15a>
 80103b6:	6823      	ldr	r3, [r4, #0]
 80103b8:	079b      	lsls	r3, r3, #30
 80103ba:	d413      	bmi.n	80103e4 <_printf_i+0x22c>
 80103bc:	68e0      	ldr	r0, [r4, #12]
 80103be:	9b03      	ldr	r3, [sp, #12]
 80103c0:	4298      	cmp	r0, r3
 80103c2:	bfb8      	it	lt
 80103c4:	4618      	movlt	r0, r3
 80103c6:	e7a6      	b.n	8010316 <_printf_i+0x15e>
 80103c8:	2301      	movs	r3, #1
 80103ca:	4632      	mov	r2, r6
 80103cc:	4649      	mov	r1, r9
 80103ce:	4640      	mov	r0, r8
 80103d0:	47d0      	blx	sl
 80103d2:	3001      	adds	r0, #1
 80103d4:	d09d      	beq.n	8010312 <_printf_i+0x15a>
 80103d6:	3501      	adds	r5, #1
 80103d8:	68e3      	ldr	r3, [r4, #12]
 80103da:	9903      	ldr	r1, [sp, #12]
 80103dc:	1a5b      	subs	r3, r3, r1
 80103de:	42ab      	cmp	r3, r5
 80103e0:	dcf2      	bgt.n	80103c8 <_printf_i+0x210>
 80103e2:	e7eb      	b.n	80103bc <_printf_i+0x204>
 80103e4:	2500      	movs	r5, #0
 80103e6:	f104 0619 	add.w	r6, r4, #25
 80103ea:	e7f5      	b.n	80103d8 <_printf_i+0x220>
 80103ec:	08010775 	.word	0x08010775
 80103f0:	08010786 	.word	0x08010786

080103f4 <__sflush_r>:
 80103f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80103f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103fc:	0716      	lsls	r6, r2, #28
 80103fe:	4605      	mov	r5, r0
 8010400:	460c      	mov	r4, r1
 8010402:	d454      	bmi.n	80104ae <__sflush_r+0xba>
 8010404:	684b      	ldr	r3, [r1, #4]
 8010406:	2b00      	cmp	r3, #0
 8010408:	dc02      	bgt.n	8010410 <__sflush_r+0x1c>
 801040a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801040c:	2b00      	cmp	r3, #0
 801040e:	dd48      	ble.n	80104a2 <__sflush_r+0xae>
 8010410:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010412:	2e00      	cmp	r6, #0
 8010414:	d045      	beq.n	80104a2 <__sflush_r+0xae>
 8010416:	2300      	movs	r3, #0
 8010418:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801041c:	682f      	ldr	r7, [r5, #0]
 801041e:	6a21      	ldr	r1, [r4, #32]
 8010420:	602b      	str	r3, [r5, #0]
 8010422:	d030      	beq.n	8010486 <__sflush_r+0x92>
 8010424:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010426:	89a3      	ldrh	r3, [r4, #12]
 8010428:	0759      	lsls	r1, r3, #29
 801042a:	d505      	bpl.n	8010438 <__sflush_r+0x44>
 801042c:	6863      	ldr	r3, [r4, #4]
 801042e:	1ad2      	subs	r2, r2, r3
 8010430:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010432:	b10b      	cbz	r3, 8010438 <__sflush_r+0x44>
 8010434:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010436:	1ad2      	subs	r2, r2, r3
 8010438:	2300      	movs	r3, #0
 801043a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801043c:	6a21      	ldr	r1, [r4, #32]
 801043e:	4628      	mov	r0, r5
 8010440:	47b0      	blx	r6
 8010442:	1c43      	adds	r3, r0, #1
 8010444:	89a3      	ldrh	r3, [r4, #12]
 8010446:	d106      	bne.n	8010456 <__sflush_r+0x62>
 8010448:	6829      	ldr	r1, [r5, #0]
 801044a:	291d      	cmp	r1, #29
 801044c:	d82b      	bhi.n	80104a6 <__sflush_r+0xb2>
 801044e:	4a2a      	ldr	r2, [pc, #168]	@ (80104f8 <__sflush_r+0x104>)
 8010450:	40ca      	lsrs	r2, r1
 8010452:	07d6      	lsls	r6, r2, #31
 8010454:	d527      	bpl.n	80104a6 <__sflush_r+0xb2>
 8010456:	2200      	movs	r2, #0
 8010458:	6062      	str	r2, [r4, #4]
 801045a:	04d9      	lsls	r1, r3, #19
 801045c:	6922      	ldr	r2, [r4, #16]
 801045e:	6022      	str	r2, [r4, #0]
 8010460:	d504      	bpl.n	801046c <__sflush_r+0x78>
 8010462:	1c42      	adds	r2, r0, #1
 8010464:	d101      	bne.n	801046a <__sflush_r+0x76>
 8010466:	682b      	ldr	r3, [r5, #0]
 8010468:	b903      	cbnz	r3, 801046c <__sflush_r+0x78>
 801046a:	6560      	str	r0, [r4, #84]	@ 0x54
 801046c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801046e:	602f      	str	r7, [r5, #0]
 8010470:	b1b9      	cbz	r1, 80104a2 <__sflush_r+0xae>
 8010472:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010476:	4299      	cmp	r1, r3
 8010478:	d002      	beq.n	8010480 <__sflush_r+0x8c>
 801047a:	4628      	mov	r0, r5
 801047c:	f7ff fbf4 	bl	800fc68 <_free_r>
 8010480:	2300      	movs	r3, #0
 8010482:	6363      	str	r3, [r4, #52]	@ 0x34
 8010484:	e00d      	b.n	80104a2 <__sflush_r+0xae>
 8010486:	2301      	movs	r3, #1
 8010488:	4628      	mov	r0, r5
 801048a:	47b0      	blx	r6
 801048c:	4602      	mov	r2, r0
 801048e:	1c50      	adds	r0, r2, #1
 8010490:	d1c9      	bne.n	8010426 <__sflush_r+0x32>
 8010492:	682b      	ldr	r3, [r5, #0]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d0c6      	beq.n	8010426 <__sflush_r+0x32>
 8010498:	2b1d      	cmp	r3, #29
 801049a:	d001      	beq.n	80104a0 <__sflush_r+0xac>
 801049c:	2b16      	cmp	r3, #22
 801049e:	d11e      	bne.n	80104de <__sflush_r+0xea>
 80104a0:	602f      	str	r7, [r5, #0]
 80104a2:	2000      	movs	r0, #0
 80104a4:	e022      	b.n	80104ec <__sflush_r+0xf8>
 80104a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104aa:	b21b      	sxth	r3, r3
 80104ac:	e01b      	b.n	80104e6 <__sflush_r+0xf2>
 80104ae:	690f      	ldr	r7, [r1, #16]
 80104b0:	2f00      	cmp	r7, #0
 80104b2:	d0f6      	beq.n	80104a2 <__sflush_r+0xae>
 80104b4:	0793      	lsls	r3, r2, #30
 80104b6:	680e      	ldr	r6, [r1, #0]
 80104b8:	bf08      	it	eq
 80104ba:	694b      	ldreq	r3, [r1, #20]
 80104bc:	600f      	str	r7, [r1, #0]
 80104be:	bf18      	it	ne
 80104c0:	2300      	movne	r3, #0
 80104c2:	eba6 0807 	sub.w	r8, r6, r7
 80104c6:	608b      	str	r3, [r1, #8]
 80104c8:	f1b8 0f00 	cmp.w	r8, #0
 80104cc:	dde9      	ble.n	80104a2 <__sflush_r+0xae>
 80104ce:	6a21      	ldr	r1, [r4, #32]
 80104d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80104d2:	4643      	mov	r3, r8
 80104d4:	463a      	mov	r2, r7
 80104d6:	4628      	mov	r0, r5
 80104d8:	47b0      	blx	r6
 80104da:	2800      	cmp	r0, #0
 80104dc:	dc08      	bgt.n	80104f0 <__sflush_r+0xfc>
 80104de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104e6:	81a3      	strh	r3, [r4, #12]
 80104e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80104ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104f0:	4407      	add	r7, r0
 80104f2:	eba8 0800 	sub.w	r8, r8, r0
 80104f6:	e7e7      	b.n	80104c8 <__sflush_r+0xd4>
 80104f8:	20400001 	.word	0x20400001

080104fc <_fflush_r>:
 80104fc:	b538      	push	{r3, r4, r5, lr}
 80104fe:	690b      	ldr	r3, [r1, #16]
 8010500:	4605      	mov	r5, r0
 8010502:	460c      	mov	r4, r1
 8010504:	b913      	cbnz	r3, 801050c <_fflush_r+0x10>
 8010506:	2500      	movs	r5, #0
 8010508:	4628      	mov	r0, r5
 801050a:	bd38      	pop	{r3, r4, r5, pc}
 801050c:	b118      	cbz	r0, 8010516 <_fflush_r+0x1a>
 801050e:	6a03      	ldr	r3, [r0, #32]
 8010510:	b90b      	cbnz	r3, 8010516 <_fflush_r+0x1a>
 8010512:	f7ff f9af 	bl	800f874 <__sinit>
 8010516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d0f3      	beq.n	8010506 <_fflush_r+0xa>
 801051e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010520:	07d0      	lsls	r0, r2, #31
 8010522:	d404      	bmi.n	801052e <_fflush_r+0x32>
 8010524:	0599      	lsls	r1, r3, #22
 8010526:	d402      	bmi.n	801052e <_fflush_r+0x32>
 8010528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801052a:	f7ff fb9a 	bl	800fc62 <__retarget_lock_acquire_recursive>
 801052e:	4628      	mov	r0, r5
 8010530:	4621      	mov	r1, r4
 8010532:	f7ff ff5f 	bl	80103f4 <__sflush_r>
 8010536:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010538:	07da      	lsls	r2, r3, #31
 801053a:	4605      	mov	r5, r0
 801053c:	d4e4      	bmi.n	8010508 <_fflush_r+0xc>
 801053e:	89a3      	ldrh	r3, [r4, #12]
 8010540:	059b      	lsls	r3, r3, #22
 8010542:	d4e1      	bmi.n	8010508 <_fflush_r+0xc>
 8010544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010546:	f7ff fb8d 	bl	800fc64 <__retarget_lock_release_recursive>
 801054a:	e7dd      	b.n	8010508 <_fflush_r+0xc>

0801054c <__swhatbuf_r>:
 801054c:	b570      	push	{r4, r5, r6, lr}
 801054e:	460c      	mov	r4, r1
 8010550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010554:	2900      	cmp	r1, #0
 8010556:	b096      	sub	sp, #88	@ 0x58
 8010558:	4615      	mov	r5, r2
 801055a:	461e      	mov	r6, r3
 801055c:	da0d      	bge.n	801057a <__swhatbuf_r+0x2e>
 801055e:	89a3      	ldrh	r3, [r4, #12]
 8010560:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010564:	f04f 0100 	mov.w	r1, #0
 8010568:	bf14      	ite	ne
 801056a:	2340      	movne	r3, #64	@ 0x40
 801056c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010570:	2000      	movs	r0, #0
 8010572:	6031      	str	r1, [r6, #0]
 8010574:	602b      	str	r3, [r5, #0]
 8010576:	b016      	add	sp, #88	@ 0x58
 8010578:	bd70      	pop	{r4, r5, r6, pc}
 801057a:	466a      	mov	r2, sp
 801057c:	f000 f848 	bl	8010610 <_fstat_r>
 8010580:	2800      	cmp	r0, #0
 8010582:	dbec      	blt.n	801055e <__swhatbuf_r+0x12>
 8010584:	9901      	ldr	r1, [sp, #4]
 8010586:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801058a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801058e:	4259      	negs	r1, r3
 8010590:	4159      	adcs	r1, r3
 8010592:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010596:	e7eb      	b.n	8010570 <__swhatbuf_r+0x24>

08010598 <__smakebuf_r>:
 8010598:	898b      	ldrh	r3, [r1, #12]
 801059a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801059c:	079d      	lsls	r5, r3, #30
 801059e:	4606      	mov	r6, r0
 80105a0:	460c      	mov	r4, r1
 80105a2:	d507      	bpl.n	80105b4 <__smakebuf_r+0x1c>
 80105a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80105a8:	6023      	str	r3, [r4, #0]
 80105aa:	6123      	str	r3, [r4, #16]
 80105ac:	2301      	movs	r3, #1
 80105ae:	6163      	str	r3, [r4, #20]
 80105b0:	b003      	add	sp, #12
 80105b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105b4:	ab01      	add	r3, sp, #4
 80105b6:	466a      	mov	r2, sp
 80105b8:	f7ff ffc8 	bl	801054c <__swhatbuf_r>
 80105bc:	9f00      	ldr	r7, [sp, #0]
 80105be:	4605      	mov	r5, r0
 80105c0:	4639      	mov	r1, r7
 80105c2:	4630      	mov	r0, r6
 80105c4:	f7ff fbbc 	bl	800fd40 <_malloc_r>
 80105c8:	b948      	cbnz	r0, 80105de <__smakebuf_r+0x46>
 80105ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105ce:	059a      	lsls	r2, r3, #22
 80105d0:	d4ee      	bmi.n	80105b0 <__smakebuf_r+0x18>
 80105d2:	f023 0303 	bic.w	r3, r3, #3
 80105d6:	f043 0302 	orr.w	r3, r3, #2
 80105da:	81a3      	strh	r3, [r4, #12]
 80105dc:	e7e2      	b.n	80105a4 <__smakebuf_r+0xc>
 80105de:	89a3      	ldrh	r3, [r4, #12]
 80105e0:	6020      	str	r0, [r4, #0]
 80105e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105e6:	81a3      	strh	r3, [r4, #12]
 80105e8:	9b01      	ldr	r3, [sp, #4]
 80105ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80105ee:	b15b      	cbz	r3, 8010608 <__smakebuf_r+0x70>
 80105f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105f4:	4630      	mov	r0, r6
 80105f6:	f000 f81d 	bl	8010634 <_isatty_r>
 80105fa:	b128      	cbz	r0, 8010608 <__smakebuf_r+0x70>
 80105fc:	89a3      	ldrh	r3, [r4, #12]
 80105fe:	f023 0303 	bic.w	r3, r3, #3
 8010602:	f043 0301 	orr.w	r3, r3, #1
 8010606:	81a3      	strh	r3, [r4, #12]
 8010608:	89a3      	ldrh	r3, [r4, #12]
 801060a:	431d      	orrs	r5, r3
 801060c:	81a5      	strh	r5, [r4, #12]
 801060e:	e7cf      	b.n	80105b0 <__smakebuf_r+0x18>

08010610 <_fstat_r>:
 8010610:	b538      	push	{r3, r4, r5, lr}
 8010612:	4d07      	ldr	r5, [pc, #28]	@ (8010630 <_fstat_r+0x20>)
 8010614:	2300      	movs	r3, #0
 8010616:	4604      	mov	r4, r0
 8010618:	4608      	mov	r0, r1
 801061a:	4611      	mov	r1, r2
 801061c:	602b      	str	r3, [r5, #0]
 801061e:	f7f8 f96e 	bl	80088fe <_fstat>
 8010622:	1c43      	adds	r3, r0, #1
 8010624:	d102      	bne.n	801062c <_fstat_r+0x1c>
 8010626:	682b      	ldr	r3, [r5, #0]
 8010628:	b103      	cbz	r3, 801062c <_fstat_r+0x1c>
 801062a:	6023      	str	r3, [r4, #0]
 801062c:	bd38      	pop	{r3, r4, r5, pc}
 801062e:	bf00      	nop
 8010630:	20001ee4 	.word	0x20001ee4

08010634 <_isatty_r>:
 8010634:	b538      	push	{r3, r4, r5, lr}
 8010636:	4d06      	ldr	r5, [pc, #24]	@ (8010650 <_isatty_r+0x1c>)
 8010638:	2300      	movs	r3, #0
 801063a:	4604      	mov	r4, r0
 801063c:	4608      	mov	r0, r1
 801063e:	602b      	str	r3, [r5, #0]
 8010640:	f7f8 f96d 	bl	800891e <_isatty>
 8010644:	1c43      	adds	r3, r0, #1
 8010646:	d102      	bne.n	801064e <_isatty_r+0x1a>
 8010648:	682b      	ldr	r3, [r5, #0]
 801064a:	b103      	cbz	r3, 801064e <_isatty_r+0x1a>
 801064c:	6023      	str	r3, [r4, #0]
 801064e:	bd38      	pop	{r3, r4, r5, pc}
 8010650:	20001ee4 	.word	0x20001ee4

08010654 <_sbrk_r>:
 8010654:	b538      	push	{r3, r4, r5, lr}
 8010656:	4d06      	ldr	r5, [pc, #24]	@ (8010670 <_sbrk_r+0x1c>)
 8010658:	2300      	movs	r3, #0
 801065a:	4604      	mov	r4, r0
 801065c:	4608      	mov	r0, r1
 801065e:	602b      	str	r3, [r5, #0]
 8010660:	f7f8 f976 	bl	8008950 <_sbrk>
 8010664:	1c43      	adds	r3, r0, #1
 8010666:	d102      	bne.n	801066e <_sbrk_r+0x1a>
 8010668:	682b      	ldr	r3, [r5, #0]
 801066a:	b103      	cbz	r3, 801066e <_sbrk_r+0x1a>
 801066c:	6023      	str	r3, [r4, #0]
 801066e:	bd38      	pop	{r3, r4, r5, pc}
 8010670:	20001ee4 	.word	0x20001ee4

08010674 <_init>:
 8010674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010676:	bf00      	nop
 8010678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801067a:	bc08      	pop	{r3}
 801067c:	469e      	mov	lr, r3
 801067e:	4770      	bx	lr

08010680 <_fini>:
 8010680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010682:	bf00      	nop
 8010684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010686:	bc08      	pop	{r3}
 8010688:	469e      	mov	lr, r3
 801068a:	4770      	bx	lr
