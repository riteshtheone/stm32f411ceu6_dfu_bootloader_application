
stm32_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c1c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08005dbc  08005dbc  00006dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006238  08006238  00008140  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006238  08006238  00007238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006240  08006240  00008140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006240  08006240  00007240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006244  08006244  00007244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000138  20000008  08006248  00008008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c4  20000140  08006380  00008140  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001204  08006380  00008204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f00  00000000  00000000  00008170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eb5  00000000  00000000  0001f070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00022f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c08  00000000  00000000  00023f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a9e  00000000  00000000  00024b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001987a  00000000  00000000  0003e5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cb70  00000000  00000000  00057e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e49e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003054  00000000  00000000  000e4a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000a308  00000000  00000000  000e7a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000f1d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000140 	.word	0x20000140
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005da4 	.word	0x08005da4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000144 	.word	0x20000144
 80001dc:	08005da4 	.word	0x08005da4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_GPIO_Init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void) {
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	b089      	sub	sp, #36	@ 0x24

    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005b0:	2400      	movs	r4, #0
 80005b2:	9403      	str	r4, [sp, #12]
 80005b4:	9404      	str	r4, [sp, #16]
 80005b6:	9405      	str	r4, [sp, #20]
 80005b8:	9406      	str	r4, [sp, #24]
 80005ba:	9407      	str	r4, [sp, #28]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005bc:	9400      	str	r4, [sp, #0]
 80005be:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <MX_GPIO_Init+0x88>)
 80005c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005c2:	f042 0204 	orr.w	r2, r2, #4
 80005c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ca:	f002 0204 	and.w	r2, r2, #4
 80005ce:	9200      	str	r2, [sp, #0]
 80005d0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	9401      	str	r4, [sp, #4]
 80005d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80005da:	631a      	str	r2, [r3, #48]	@ 0x30
 80005dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005de:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005e2:	9201      	str	r2, [sp, #4]
 80005e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	9402      	str	r4, [sp, #8]
 80005e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ea:	f042 0201 	orr.w	r2, r2, #1
 80005ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	9302      	str	r3, [sp, #8]
 80005f8:	9b02      	ldr	r3, [sp, #8]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005fa:	4d0f      	ldr	r5, [pc, #60]	@ (8000638 <MX_GPIO_Init+0x8c>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000602:	4628      	mov	r0, r5
 8000604:	f000 ff23 	bl	800144e <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8000608:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800060c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800060e:	2311      	movs	r3, #17
 8000610:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000616:	a903      	add	r1, sp, #12
 8000618:	4628      	mov	r0, r5
 800061a:	f000 fe2d 	bl	8001278 <HAL_GPIO_Init>

    /*Configure GPIO pin : BTN_Pin */
    GPIO_InitStruct.Pin = BTN_Pin;
 800061e:	2301      	movs	r3, #1
 8000620:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000622:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000624:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000626:	a903      	add	r1, sp, #12
 8000628:	4804      	ldr	r0, [pc, #16]	@ (800063c <MX_GPIO_Init+0x90>)
 800062a:	f000 fe25 	bl	8001278 <HAL_GPIO_Init>

}
 800062e:	b009      	add	sp, #36	@ 0x24
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40020800 	.word	0x40020800
 800063c:	40020000 	.word	0x40020000

08000640 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000640:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000644:	4905      	ldr	r1, [pc, #20]	@ (800065c <__NVIC_SystemReset+0x1c>)
 8000646:	68ca      	ldr	r2, [r1, #12]
 8000648:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800064c:	4b04      	ldr	r3, [pc, #16]	@ (8000660 <__NVIC_SystemReset+0x20>)
 800064e:	4313      	orrs	r3, r2
 8000650:	60cb      	str	r3, [r1, #12]
 8000652:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000656:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8000658:	e7fd      	b.n	8000656 <__NVIC_SystemReset+0x16>
 800065a:	bf00      	nop
 800065c:	e000ed00 	.word	0xe000ed00
 8000660:	05fa0004 	.word	0x05fa0004

08000664 <_halt>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000664:	b672      	cpsid	i
/* USER CODE BEGIN 0 */

void _halt() {
    __disable_irq();
    while (1) {
        __WFI();
 8000666:	bf30      	wfi
    while (1) {
 8000668:	e7fd      	b.n	8000666 <_halt+0x2>
	...

0800066c <delay>:
    }
}

void delay(uint32_t ms) {
    uint32_t _wait = uwTick + ms;
 800066c:	4b05      	ldr	r3, [pc, #20]	@ (8000684 <delay+0x18>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4418      	add	r0, r3
    while ((int32_t)(uwTick - _wait) < 0) {
 8000672:	e000      	b.n	8000676 <delay+0xa>
        __NOP();
 8000674:	bf00      	nop
    while ((int32_t)(uwTick - _wait) < 0) {
 8000676:	4b03      	ldr	r3, [pc, #12]	@ (8000684 <delay+0x18>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	1a1b      	subs	r3, r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	dbf9      	blt.n	8000674 <delay+0x8>
    }
}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	200001ac 	.word	0x200001ac

08000688 <set_boot_flag>:

void set_boot_flag(uint32_t flag) {
    BOOT_FLAG_PTR->flag = flag;
 8000688:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800068c:	6018      	str	r0, [r3, #0]
    BOOT_FLAG_PTR->reserved = RESERVED;
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
}
 8000692:	4770      	bx	lr

08000694 <check_app_vector_table>:

void check_app_vector_table(void) {
 8000694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t is_app_sp_valid = (APP_SP >= SRAM_BASE) && (APP_SP <= SRAM_BASE + 128 * 1024) && ((APP_SP & 0x3UL) == 0x0U);
 8000698:	4b44      	ldr	r3, [pc, #272]	@ (80007ac <check_app_vector_table+0x118>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006a0:	d30b      	bcc.n	80006ba <check_app_vector_table+0x26>
 80006a2:	4b42      	ldr	r3, [pc, #264]	@ (80007ac <check_app_vector_table+0x118>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	4b42      	ldr	r3, [pc, #264]	@ (80007b0 <check_app_vector_table+0x11c>)
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d812      	bhi.n	80006d2 <check_app_vector_table+0x3e>
 80006ac:	4b3f      	ldr	r3, [pc, #252]	@ (80007ac <check_app_vector_table+0x118>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f013 0f03 	tst.w	r3, #3
 80006b4:	d00f      	beq.n	80006d6 <check_app_vector_table+0x42>
 80006b6:	2400      	movs	r4, #0
 80006b8:	e000      	b.n	80006bc <check_app_vector_table+0x28>
 80006ba:	2400      	movs	r4, #0
 80006bc:	b2e4      	uxtb	r4, r4
    uint8_t is_app_entry_valid = (APP_ENTRY >= APP_ADDR) && (APP_ENTRY <= FLASH_END);
 80006be:	4b3b      	ldr	r3, [pc, #236]	@ (80007ac <check_app_vector_table+0x118>)
 80006c0:	685a      	ldr	r2, [r3, #4]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d309      	bcc.n	80006da <check_app_vector_table+0x46>
 80006c6:	685a      	ldr	r2, [r3, #4]
 80006c8:	4b3a      	ldr	r3, [pc, #232]	@ (80007b4 <check_app_vector_table+0x120>)
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d912      	bls.n	80006f4 <check_app_vector_table+0x60>
 80006ce:	2500      	movs	r5, #0
 80006d0:	e004      	b.n	80006dc <check_app_vector_table+0x48>
    uint8_t is_app_sp_valid = (APP_SP >= SRAM_BASE) && (APP_SP <= SRAM_BASE + 128 * 1024) && ((APP_SP & 0x3UL) == 0x0U);
 80006d2:	2400      	movs	r4, #0
 80006d4:	e7f2      	b.n	80006bc <check_app_vector_table+0x28>
 80006d6:	2401      	movs	r4, #1
 80006d8:	e7f0      	b.n	80006bc <check_app_vector_table+0x28>
    uint8_t is_app_entry_valid = (APP_ENTRY >= APP_ADDR) && (APP_ENTRY <= FLASH_END);
 80006da:	2500      	movs	r5, #0
 80006dc:	b2ed      	uxtb	r5, r5
    uint8_t is_thumb_mode = (APP_ENTRY & 0x1UL) == 0x1UL;
 80006de:	4b33      	ldr	r3, [pc, #204]	@ (80007ac <check_app_vector_table+0x118>)
 80006e0:	685e      	ldr	r6, [r3, #4]
 80006e2:	f006 0601 	and.w	r6, r6, #1

    uint8_t is_app_present = is_app_sp_valid && is_app_entry_valid && is_thumb_mode;
 80006e6:	b13c      	cbz	r4, 80006f8 <check_app_vector_table+0x64>
 80006e8:	2d00      	cmp	r5, #0
 80006ea:	d052      	beq.n	8000792 <check_app_vector_table+0xfe>
 80006ec:	2e00      	cmp	r6, #0
 80006ee:	d152      	bne.n	8000796 <check_app_vector_table+0x102>
 80006f0:	2700      	movs	r7, #0
 80006f2:	e002      	b.n	80006fa <check_app_vector_table+0x66>
    uint8_t is_app_entry_valid = (APP_ENTRY >= APP_ADDR) && (APP_ENTRY <= FLASH_END);
 80006f4:	2501      	movs	r5, #1
 80006f6:	e7f1      	b.n	80006dc <check_app_vector_table+0x48>
    uint8_t is_app_present = is_app_sp_valid && is_app_entry_valid && is_thumb_mode;
 80006f8:	2700      	movs	r7, #0
 80006fa:	b2ff      	uxtb	r7, r7
    //
    //     printf(COLOR_BORDER "│" COLOR_HEADER " => User Application Available : %s" COLOR_BORDER "        │\n" COLOR_RESET, BOOL_COLOR(is_app_present));
    //     printf(COLOR_BORDER "└──────────────────────────────────────────────┘\n" COLOR_RESET);

#define BOOL_STR(bool) ((bool) ? "true" : "false")
    printf("\n+---------------------------------------------+\n");
 80006fc:	482e      	ldr	r0, [pc, #184]	@ (80007b8 <check_app_vector_table+0x124>)
 80006fe:	f004 fcef 	bl	80050e0 <puts>
    printf("|               Bootloader Info               |\n");
 8000702:	482e      	ldr	r0, [pc, #184]	@ (80007bc <check_app_vector_table+0x128>)
 8000704:	f004 fcec 	bl	80050e0 <puts>
    printf("+---------------------------------------------+\n");
 8000708:	482d      	ldr	r0, [pc, #180]	@ (80007c0 <check_app_vector_table+0x12c>)
 800070a:	f004 fce9 	bl	80050e0 <puts>

    printf("| Boot Flag .flag       : 0x%08lX          |\n", BOOT_FLAG_PTR->flag);
 800070e:	f04f 5800 	mov.w	r8, #536870912	@ 0x20000000
 8000712:	f8d8 1000 	ldr.w	r1, [r8]
 8000716:	482b      	ldr	r0, [pc, #172]	@ (80007c4 <check_app_vector_table+0x130>)
 8000718:	f004 fc7a 	bl	8005010 <iprintf>
    printf("| Boot Flag .reserved   : 0x%08lX          |\n", BOOT_FLAG_PTR->reserved);
 800071c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8000720:	4829      	ldr	r0, [pc, #164]	@ (80007c8 <check_app_vector_table+0x134>)
 8000722:	f004 fc75 	bl	8005010 <iprintf>
    printf("|                                             |\n");
 8000726:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 80007ec <check_app_vector_table+0x158>
 800072a:	4640      	mov	r0, r8
 800072c:	f004 fcd8 	bl	80050e0 <puts>

    printf("| User Application Vector Table:              |\n");
 8000730:	4826      	ldr	r0, [pc, #152]	@ (80007cc <check_app_vector_table+0x138>)
 8000732:	f004 fcd5 	bl	80050e0 <puts>
    printf("|   Application Stack   : 0x%08lX          |\n", APP_SP);
 8000736:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 80007ac <check_app_vector_table+0x118>
 800073a:	f8d9 1000 	ldr.w	r1, [r9]
 800073e:	4824      	ldr	r0, [pc, #144]	@ (80007d0 <check_app_vector_table+0x13c>)
 8000740:	f004 fc66 	bl	8005010 <iprintf>
    printf("|   Application Entry   : 0x%08lX          |\n", APP_ENTRY);
 8000744:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8000748:	4822      	ldr	r0, [pc, #136]	@ (80007d4 <check_app_vector_table+0x140>)
 800074a:	f004 fc61 	bl	8005010 <iprintf>
    printf("|                                             |\n");
 800074e:	4640      	mov	r0, r8
 8000750:	f004 fcc6 	bl	80050e0 <puts>

    printf("| User Application Details:                   |\n");
 8000754:	4820      	ldr	r0, [pc, #128]	@ (80007d8 <check_app_vector_table+0x144>)
 8000756:	f004 fcc3 	bl	80050e0 <puts>
    printf("|   Stack Pointer in RAM : %-5s              |\n", BOOL_STR(is_app_sp_valid));
 800075a:	b1f4      	cbz	r4, 800079a <check_app_vector_table+0x106>
 800075c:	491f      	ldr	r1, [pc, #124]	@ (80007dc <check_app_vector_table+0x148>)
 800075e:	4820      	ldr	r0, [pc, #128]	@ (80007e0 <check_app_vector_table+0x14c>)
 8000760:	f004 fc56 	bl	8005010 <iprintf>
    printf("|   Entry Point in Flash : %-5s              |\n", BOOL_STR(is_app_entry_valid));
 8000764:	b1dd      	cbz	r5, 800079e <check_app_vector_table+0x10a>
 8000766:	491d      	ldr	r1, [pc, #116]	@ (80007dc <check_app_vector_table+0x148>)
 8000768:	481e      	ldr	r0, [pc, #120]	@ (80007e4 <check_app_vector_table+0x150>)
 800076a:	f004 fc51 	bl	8005010 <iprintf>
    printf("|   MCU in Thumb Mode    : %-5s              |\n", BOOL_STR(is_thumb_mode));
 800076e:	b1c6      	cbz	r6, 80007a2 <check_app_vector_table+0x10e>
 8000770:	491a      	ldr	r1, [pc, #104]	@ (80007dc <check_app_vector_table+0x148>)
 8000772:	481d      	ldr	r0, [pc, #116]	@ (80007e8 <check_app_vector_table+0x154>)
 8000774:	f004 fc4c 	bl	8005010 <iprintf>
    printf("|                                             |\n");
 8000778:	481c      	ldr	r0, [pc, #112]	@ (80007ec <check_app_vector_table+0x158>)
 800077a:	f004 fcb1 	bl	80050e0 <puts>

    printf("| => User Application Valid : %-5s           |\n", BOOL_STR(is_app_present));
 800077e:	b197      	cbz	r7, 80007a6 <check_app_vector_table+0x112>
 8000780:	4916      	ldr	r1, [pc, #88]	@ (80007dc <check_app_vector_table+0x148>)
 8000782:	481b      	ldr	r0, [pc, #108]	@ (80007f0 <check_app_vector_table+0x15c>)
 8000784:	f004 fc44 	bl	8005010 <iprintf>
    printf("+--------------------xxx----------------------+\n\n");
 8000788:	481a      	ldr	r0, [pc, #104]	@ (80007f4 <check_app_vector_table+0x160>)
 800078a:	f004 fca9 	bl	80050e0 <puts>
}
 800078e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t is_app_present = is_app_sp_valid && is_app_entry_valid && is_thumb_mode;
 8000792:	2700      	movs	r7, #0
 8000794:	e7b1      	b.n	80006fa <check_app_vector_table+0x66>
 8000796:	2701      	movs	r7, #1
 8000798:	e7af      	b.n	80006fa <check_app_vector_table+0x66>
    printf("|   Stack Pointer in RAM : %-5s              |\n", BOOL_STR(is_app_sp_valid));
 800079a:	4917      	ldr	r1, [pc, #92]	@ (80007f8 <check_app_vector_table+0x164>)
 800079c:	e7df      	b.n	800075e <check_app_vector_table+0xca>
    printf("|   Entry Point in Flash : %-5s              |\n", BOOL_STR(is_app_entry_valid));
 800079e:	4916      	ldr	r1, [pc, #88]	@ (80007f8 <check_app_vector_table+0x164>)
 80007a0:	e7e2      	b.n	8000768 <check_app_vector_table+0xd4>
    printf("|   MCU in Thumb Mode    : %-5s              |\n", BOOL_STR(is_thumb_mode));
 80007a2:	4915      	ldr	r1, [pc, #84]	@ (80007f8 <check_app_vector_table+0x164>)
 80007a4:	e7e5      	b.n	8000772 <check_app_vector_table+0xde>
    printf("| => User Application Valid : %-5s           |\n", BOOL_STR(is_app_present));
 80007a6:	4914      	ldr	r1, [pc, #80]	@ (80007f8 <check_app_vector_table+0x164>)
 80007a8:	e7eb      	b.n	8000782 <check_app_vector_table+0xee>
 80007aa:	bf00      	nop
 80007ac:	08008000 	.word	0x08008000
 80007b0:	20020000 	.word	0x20020000
 80007b4:	0807ffff 	.word	0x0807ffff
 80007b8:	08005dcc 	.word	0x08005dcc
 80007bc:	08005e00 	.word	0x08005e00
 80007c0:	08005e30 	.word	0x08005e30
 80007c4:	08005e60 	.word	0x08005e60
 80007c8:	08005e90 	.word	0x08005e90
 80007cc:	08005ef0 	.word	0x08005ef0
 80007d0:	08005f20 	.word	0x08005f20
 80007d4:	08005f50 	.word	0x08005f50
 80007d8:	08005f80 	.word	0x08005f80
 80007dc:	08005dbc 	.word	0x08005dbc
 80007e0:	08005fb0 	.word	0x08005fb0
 80007e4:	08005fe0 	.word	0x08005fe0
 80007e8:	08006010 	.word	0x08006010
 80007ec:	08005ec0 	.word	0x08005ec0
 80007f0:	08006040 	.word	0x08006040
 80007f4:	08006070 	.word	0x08006070
 80007f8:	08005dc4 	.word	0x08005dc4

080007fc <is_app_vector_table_valid>:

uint8_t is_app_vector_table_valid(void) {
    uint8_t is_app_sp_valid = (APP_SP >= SRAM_BASE) && (APP_SP <= SRAM_BASE + 128 * 1024) && ((APP_SP & 0x3UL) == 0x0U);
 80007fc:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <is_app_vector_table_valid+0x68>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000804:	d30b      	bcc.n	800081e <is_app_vector_table_valid+0x22>
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <is_app_vector_table_valid+0x68>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <is_app_vector_table_valid+0x6c>)
 800080c:	429a      	cmp	r2, r3
 800080e:	d812      	bhi.n	8000836 <is_app_vector_table_valid+0x3a>
 8000810:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <is_app_vector_table_valid+0x68>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f013 0f03 	tst.w	r3, #3
 8000818:	d00f      	beq.n	800083a <is_app_vector_table_valid+0x3e>
 800081a:	2300      	movs	r3, #0
 800081c:	e000      	b.n	8000820 <is_app_vector_table_valid+0x24>
 800081e:	2300      	movs	r3, #0
 8000820:	b2db      	uxtb	r3, r3
    uint8_t is_app_entry_valid = (APP_ENTRY >= APP_ADDR) && (APP_ENTRY <= FLASH_END);
 8000822:	4a10      	ldr	r2, [pc, #64]	@ (8000864 <is_app_vector_table_valid+0x68>)
 8000824:	6851      	ldr	r1, [r2, #4]
 8000826:	4291      	cmp	r1, r2
 8000828:	d309      	bcc.n	800083e <is_app_vector_table_valid+0x42>
 800082a:	6851      	ldr	r1, [r2, #4]
 800082c:	4a0f      	ldr	r2, [pc, #60]	@ (800086c <is_app_vector_table_valid+0x70>)
 800082e:	4291      	cmp	r1, r2
 8000830:	d910      	bls.n	8000854 <is_app_vector_table_valid+0x58>
 8000832:	2200      	movs	r2, #0
 8000834:	e004      	b.n	8000840 <is_app_vector_table_valid+0x44>
    uint8_t is_app_sp_valid = (APP_SP >= SRAM_BASE) && (APP_SP <= SRAM_BASE + 128 * 1024) && ((APP_SP & 0x3UL) == 0x0U);
 8000836:	2300      	movs	r3, #0
 8000838:	e7f2      	b.n	8000820 <is_app_vector_table_valid+0x24>
 800083a:	2301      	movs	r3, #1
 800083c:	e7f0      	b.n	8000820 <is_app_vector_table_valid+0x24>
    uint8_t is_app_entry_valid = (APP_ENTRY >= APP_ADDR) && (APP_ENTRY <= FLASH_END);
 800083e:	2200      	movs	r2, #0
 8000840:	b2d2      	uxtb	r2, r2
    uint8_t is_thumb_mode = (APP_ENTRY & 0x1UL) == 0x1UL;
 8000842:	4908      	ldr	r1, [pc, #32]	@ (8000864 <is_app_vector_table_valid+0x68>)
 8000844:	6849      	ldr	r1, [r1, #4]
 8000846:	f001 0101 	and.w	r1, r1, #1

    return is_app_sp_valid && is_app_entry_valid && is_thumb_mode;
 800084a:	b12b      	cbz	r3, 8000858 <is_app_vector_table_valid+0x5c>
 800084c:	b132      	cbz	r2, 800085c <is_app_vector_table_valid+0x60>
 800084e:	b939      	cbnz	r1, 8000860 <is_app_vector_table_valid+0x64>
 8000850:	2000      	movs	r0, #0
 8000852:	4770      	bx	lr
    uint8_t is_app_entry_valid = (APP_ENTRY >= APP_ADDR) && (APP_ENTRY <= FLASH_END);
 8000854:	2201      	movs	r2, #1
 8000856:	e7f3      	b.n	8000840 <is_app_vector_table_valid+0x44>
    return is_app_sp_valid && is_app_entry_valid && is_thumb_mode;
 8000858:	2000      	movs	r0, #0
 800085a:	4770      	bx	lr
 800085c:	2000      	movs	r0, #0
 800085e:	4770      	bx	lr
 8000860:	2001      	movs	r0, #1
}
 8000862:	4770      	bx	lr
 8000864:	08008000 	.word	0x08008000
 8000868:	20020000 	.word	0x20020000
 800086c:	0807ffff 	.word	0x0807ffff

08000870 <jump_to_application>:

void jump_to_application(void) {
 8000870:	b508      	push	{r3, lr}
    __set_MSP(APP_SP);
 8000872:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <jump_to_application+0x18>)
 8000874:	681a      	ldr	r2, [r3, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000876:	f382 8808 	msr	MSP, r2

    SCB->VTOR = APP_ADDR;
 800087a:	4a04      	ldr	r2, [pc, #16]	@ (800088c <jump_to_application+0x1c>)
 800087c:	6093      	str	r3, [r2, #8]
    ((void (*)(void))APP_ENTRY)();
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	4798      	blx	r3

    _halt();
 8000882:	f7ff feef 	bl	8000664 <_halt>
 8000886:	bf00      	nop
 8000888:	08008000 	.word	0x08008000
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <check_boot_flag>:
}

void check_boot_flag() {
 8000890:	b508      	push	{r3, lr}
    if (BOOT_FLAG_PTR->flag == APP_FLAG && BOOT_FLAG_PTR->reserved == RESERVED) {
 8000892:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <check_boot_flag+0x24>)
 800089a:	429a      	cmp	r2, r3
 800089c:	d000      	beq.n	80008a0 <check_boot_flag+0x10>
        set_boot_flag(RESERVED);
        jump_to_application();
    }
}
 800089e:	bd08      	pop	{r3, pc}
    if (BOOT_FLAG_PTR->flag == APP_FLAG && BOOT_FLAG_PTR->reserved == RESERVED) {
 80008a0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1f9      	bne.n	800089e <check_boot_flag+0xe>
        set_boot_flag(RESERVED);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff feec 	bl	8000688 <set_boot_flag>
        jump_to_application();
 80008b0:	f7ff ffde 	bl	8000870 <jump_to_application>
 80008b4:	deadbeef 	.word	0xdeadbeef

080008b8 <is_time_elapsed>:
    uint32_t interval;
    uint32_t last_tick;
} TimedTask;

uint8_t is_time_elapsed(TimedTask *task, uint32_t now) {
    if ((int32_t)(now - task->last_tick) >= (int32_t)task->interval) {
 80008b8:	6843      	ldr	r3, [r0, #4]
 80008ba:	1acb      	subs	r3, r1, r3
 80008bc:	6802      	ldr	r2, [r0, #0]
 80008be:	4293      	cmp	r3, r2
 80008c0:	da01      	bge.n	80008c6 <is_time_elapsed+0xe>
        task->last_tick = now;
        return 1;
    }
    return 0;
 80008c2:	2000      	movs	r0, #0
}
 80008c4:	4770      	bx	lr
        task->last_tick = now;
 80008c6:	6041      	str	r1, [r0, #4]
        return 1;
 80008c8:	2001      	movs	r0, #1
 80008ca:	4770      	bx	lr

080008cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008cc:	b500      	push	{lr}
 80008ce:	b083      	sub	sp, #12
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    // __disable_irq();
    //
    TimedTask err_led_blink = {.interval = 1000, .last_tick = 0};
 80008d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	2300      	movs	r3, #0
 80008d8:	9301      	str	r3, [sp, #4]
 80008da:	e001      	b.n	80008e0 <Error_Handler+0x14>

            if (_blink_count >= 4) {            // 2 blinks = 4 toggles (ON-OFF-ON-OFF)
                err_led_blink.interval = 1500;  // Long pause
                _blink_count = 0;
            } else {
                err_led_blink.interval = 80;  // Short blink
 80008dc:	2350      	movs	r3, #80	@ 0x50
 80008de:	9300      	str	r3, [sp, #0]
        uint32_t _now = uwTick;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <Error_Handler+0x48>)
 80008e2:	6819      	ldr	r1, [r3, #0]
        if (is_time_elapsed(&err_led_blink, _now)) {
 80008e4:	4668      	mov	r0, sp
 80008e6:	f7ff ffe7 	bl	80008b8 <is_time_elapsed>
 80008ea:	2800      	cmp	r0, #0
 80008ec:	d0f8      	beq.n	80008e0 <Error_Handler+0x14>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008f2:	4809      	ldr	r0, [pc, #36]	@ (8000918 <Error_Handler+0x4c>)
 80008f4:	f000 fdb1 	bl	800145a <HAL_GPIO_TogglePin>
            _blink_count++;
 80008f8:	4a08      	ldr	r2, [pc, #32]	@ (800091c <Error_Handler+0x50>)
 80008fa:	7813      	ldrb	r3, [r2, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	7013      	strb	r3, [r2, #0]
            if (_blink_count >= 4) {            // 2 blinks = 4 toggles (ON-OFF-ON-OFF)
 8000902:	2b03      	cmp	r3, #3
 8000904:	d9ea      	bls.n	80008dc <Error_Handler+0x10>
                err_led_blink.interval = 1500;  // Long pause
 8000906:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800090a:	9300      	str	r3, [sp, #0]
                _blink_count = 0;
 800090c:	4613      	mov	r3, r2
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
 8000912:	e7e5      	b.n	80008e0 <Error_Handler+0x14>
 8000914:	200001ac 	.word	0x200001ac
 8000918:	40020800 	.word	0x40020800
 800091c:	2000015c 	.word	0x2000015c

08000920 <check_firmware_upgrade_btn>:
void check_firmware_upgrade_btn(void) {
 8000920:	b508      	push	{r3, lr}
    if (BOOT_FLAG_PTR->flag == DFU_FLAG && BOOT_FLAG_PTR->reserved == RESERVED) {
 8000922:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 800092c:	d103      	bne.n	8000936 <check_firmware_upgrade_btn+0x16>
 800092e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	b19b      	cbz	r3, 800095e <check_firmware_upgrade_btn+0x3e>
    if (HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == GPIO_PIN_RESET) {
 8000936:	2101      	movs	r1, #1
 8000938:	481a      	ldr	r0, [pc, #104]	@ (80009a4 <check_firmware_upgrade_btn+0x84>)
 800093a:	f000 fd81 	bl	8001440 <HAL_GPIO_ReadPin>
 800093e:	b190      	cbz	r0, 8000966 <check_firmware_upgrade_btn+0x46>
        printf("Booting User Application...\n");
 8000940:	4819      	ldr	r0, [pc, #100]	@ (80009a8 <check_firmware_upgrade_btn+0x88>)
 8000942:	f004 fbcd 	bl	80050e0 <puts>
        if (!is_app_vector_table_valid()) {
 8000946:	f7ff ff59 	bl	80007fc <is_app_vector_table_valid>
 800094a:	bb18      	cbnz	r0, 8000994 <check_firmware_upgrade_btn+0x74>
            delay(500);
 800094c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000950:	f7ff fe8c 	bl	800066c <delay>
            printf("Failed, User Application is not available...\n");
 8000954:	4815      	ldr	r0, [pc, #84]	@ (80009ac <check_firmware_upgrade_btn+0x8c>)
 8000956:	f004 fbc3 	bl	80050e0 <puts>
            Error_Handler();
 800095a:	f7ff ffb7 	bl	80008cc <Error_Handler>
        set_boot_flag(RESERVED);
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff fe92 	bl	8000688 <set_boot_flag>
}
 8000964:	bd08      	pop	{r3, pc}
        printf("Button is pressed, Waiting for realease...\n");
 8000966:	4812      	ldr	r0, [pc, #72]	@ (80009b0 <check_firmware_upgrade_btn+0x90>)
 8000968:	f004 fbba 	bl	80050e0 <puts>
        while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 800096c:	2101      	movs	r1, #1
 800096e:	480d      	ldr	r0, [pc, #52]	@ (80009a4 <check_firmware_upgrade_btn+0x84>)
 8000970:	f000 fd66 	bl	8001440 <HAL_GPIO_ReadPin>
 8000974:	b918      	cbnz	r0, 800097e <check_firmware_upgrade_btn+0x5e>
            delay(10);
 8000976:	200a      	movs	r0, #10
 8000978:	f7ff fe78 	bl	800066c <delay>
 800097c:	e7f6      	b.n	800096c <check_firmware_upgrade_btn+0x4c>
        delay(50);  // debounce wait...
 800097e:	2032      	movs	r0, #50	@ 0x32
 8000980:	f7ff fe74 	bl	800066c <delay>
        printf("Button is released, Entering in DFU mode...\n");
 8000984:	480b      	ldr	r0, [pc, #44]	@ (80009b4 <check_firmware_upgrade_btn+0x94>)
 8000986:	f004 fbab 	bl	80050e0 <puts>
        set_boot_flag(DFU_FLAG);
 800098a:	f04f 30a5 	mov.w	r0, #2779096485	@ 0xa5a5a5a5
 800098e:	f7ff fe7b 	bl	8000688 <set_boot_flag>
 8000992:	e002      	b.n	800099a <check_firmware_upgrade_btn+0x7a>
        set_boot_flag(APP_FLAG);
 8000994:	4808      	ldr	r0, [pc, #32]	@ (80009b8 <check_firmware_upgrade_btn+0x98>)
 8000996:	f7ff fe77 	bl	8000688 <set_boot_flag>
    delay(10);
 800099a:	200a      	movs	r0, #10
 800099c:	f7ff fe66 	bl	800066c <delay>
    NVIC_SystemReset();
 80009a0:	f7ff fe4e 	bl	8000640 <__NVIC_SystemReset>
 80009a4:	40020000 	.word	0x40020000
 80009a8:	080060fc 	.word	0x080060fc
 80009ac:	08006118 	.word	0x08006118
 80009b0:	080060a4 	.word	0x080060a4
 80009b4:	080060d0 	.word	0x080060d0
 80009b8:	deadbeef 	.word	0xdeadbeef

080009bc <SystemClock_Config>:
void SystemClock_Config(void) {
 80009bc:	b500      	push	{lr}
 80009be:	b095      	sub	sp, #84	@ 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c0:	2230      	movs	r2, #48	@ 0x30
 80009c2:	2100      	movs	r1, #0
 80009c4:	a808      	add	r0, sp, #32
 80009c6:	f004 fc6b 	bl	80052a0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ca:	2300      	movs	r3, #0
 80009cc:	9303      	str	r3, [sp, #12]
 80009ce:	9304      	str	r3, [sp, #16]
 80009d0:	9305      	str	r3, [sp, #20]
 80009d2:	9306      	str	r3, [sp, #24]
 80009d4:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000a58 <SystemClock_Config+0x9c>)
 80009da:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80009dc:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80009e0:	6411      	str	r1, [r2, #64]	@ 0x40
 80009e2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80009e4:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80009e8:	9201      	str	r2, [sp, #4]
 80009ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ec:	9302      	str	r3, [sp, #8]
 80009ee:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <SystemClock_Config+0xa0>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009fe:	9302      	str	r3, [sp, #8]
 8000a00:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a0a:	9309      	str	r3, [sp, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	930e      	str	r3, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a10:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a14:	920f      	str	r2, [sp, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 25;
 8000a16:	2219      	movs	r2, #25
 8000a18:	9210      	str	r2, [sp, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 192;
 8000a1a:	22c0      	movs	r2, #192	@ 0xc0
 8000a1c:	9211      	str	r2, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a1e:	9312      	str	r3, [sp, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a20:	2304      	movs	r3, #4
 8000a22:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a24:	a808      	add	r0, sp, #32
 8000a26:	f001 fb41 	bl	80020ac <HAL_RCC_OscConfig>
 8000a2a:	b988      	cbnz	r0, 8000a50 <SystemClock_Config+0x94>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a30:	2302      	movs	r3, #2
 8000a32:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a38:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a3c:	9206      	str	r2, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3e:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000a40:	2103      	movs	r1, #3
 8000a42:	a803      	add	r0, sp, #12
 8000a44:	f001 fd82 	bl	800254c <HAL_RCC_ClockConfig>
 8000a48:	b920      	cbnz	r0, 8000a54 <SystemClock_Config+0x98>
}
 8000a4a:	b015      	add	sp, #84	@ 0x54
 8000a4c:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8000a50:	f7ff ff3c 	bl	80008cc <Error_Handler>
        Error_Handler();
 8000a54:	f7ff ff3a 	bl	80008cc <Error_Handler>
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <main>:
int main(void) {
 8000a60:	b510      	push	{r4, lr}
 8000a62:	b084      	sub	sp, #16
    check_boot_flag();
 8000a64:	f7ff ff14 	bl	8000890 <check_boot_flag>
    HAL_Init();
 8000a68:	f000 f968 	bl	8000d3c <HAL_Init>
    SystemClock_Config();
 8000a6c:	f7ff ffa6 	bl	80009bc <SystemClock_Config>
    MX_GPIO_Init();
 8000a70:	f7ff fd9c 	bl	80005ac <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8000a74:	f000 f8be 	bl	8000bf4 <MX_USART1_UART_Init>
    check_app_vector_table();
 8000a78:	f7ff fe0c 	bl	8000694 <check_app_vector_table>
    check_firmware_upgrade_btn();
 8000a7c:	f7ff ff50 	bl	8000920 <check_firmware_upgrade_btn>
    MX_USB_DEVICE_Init();
 8000a80:	f003 ff3c 	bl	80048fc <MX_USB_DEVICE_Init>
    TimedTask led_blink = {.interval = 100, .last_tick = 0};
 8000a84:	2364      	movs	r3, #100	@ 0x64
 8000a86:	9302      	str	r3, [sp, #8]
 8000a88:	2300      	movs	r3, #0
 8000a8a:	9303      	str	r3, [sp, #12]
    TimedTask print_tick = {.interval = 1000, .last_tick = 0};
 8000a8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a90:	9200      	str	r2, [sp, #0]
 8000a92:	9301      	str	r3, [sp, #4]
        uint32_t _now = uwTick;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <main+0x68>)
 8000a96:	681c      	ldr	r4, [r3, #0]
        if (is_time_elapsed(&led_blink, _now)) {
 8000a98:	4621      	mov	r1, r4
 8000a9a:	a802      	add	r0, sp, #8
 8000a9c:	f7ff ff0c 	bl	80008b8 <is_time_elapsed>
 8000aa0:	b960      	cbnz	r0, 8000abc <main+0x5c>
        if (is_time_elapsed(&print_tick, _now)) {
 8000aa2:	4621      	mov	r1, r4
 8000aa4:	4668      	mov	r0, sp
 8000aa6:	f7ff ff07 	bl	80008b8 <is_time_elapsed>
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	d0f2      	beq.n	8000a94 <main+0x34>
            printf("Boot_Tick %lu\n", _now / print_tick.interval);
 8000aae:	9900      	ldr	r1, [sp, #0]
 8000ab0:	fbb4 f1f1 	udiv	r1, r4, r1
 8000ab4:	4805      	ldr	r0, [pc, #20]	@ (8000acc <main+0x6c>)
 8000ab6:	f004 faab 	bl	8005010 <iprintf>
 8000aba:	e7eb      	b.n	8000a94 <main+0x34>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000abc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac0:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <main+0x70>)
 8000ac2:	f000 fcca 	bl	800145a <HAL_GPIO_TogglePin>
 8000ac6:	e7ec      	b.n	8000aa2 <main+0x42>
 8000ac8:	200001ac 	.word	0x200001ac
 8000acc:	08006148 	.word	0x08006148
 8000ad0:	40020800 	.word	0x40020800

08000ad4 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000ad4:	b082      	sub	sp, #8

    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	9100      	str	r1, [sp, #0]
 8000ada:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <HAL_MspInit+0x34>)
 8000adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000ade:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000ae2:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ae4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000ae6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000aea:	9200      	str	r2, [sp, #0]
 8000aec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	9101      	str	r1, [sp, #4]
 8000af0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000af2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000af6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	9b01      	ldr	r3, [sp, #4]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8000b02:	b002      	add	sp, #8
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <NMI_Handler>:
void NMI_Handler(void) {
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler>

08000b0e <HardFault_Handler>:
 */
void HardFault_Handler(void) {
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler>

08000b10 <MemManage_Handler>:
 */
void MemManage_Handler(void) {
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler>

08000b12 <BusFault_Handler>:
 */
void BusFault_Handler(void) {
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler>

08000b14 <UsageFault_Handler>:
 */
void UsageFault_Handler(void) {
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler>

08000b16 <SVC_Handler>:

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8000b16:	4770      	bx	lr

08000b18 <DebugMon_Handler>:

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000b1c:	b508      	push	{r3, lr}
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8000b1e:	f000 f927 	bl	8000d70 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8000b22:	bd08      	pop	{r3, pc}

08000b24 <OTG_FS_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void) {
 8000b24:	b508      	push	{r3, lr}
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b26:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <OTG_FS_IRQHandler+0xc>)
 8000b28:	f000 ffb6 	bl	8001a98 <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b2c:	bd08      	pop	{r3, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000bd4 	.word	0x20000bd4

08000b34 <_read>:
    _kill(status, -1);
    while (1) {
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8000b34:	b570      	push	{r4, r5, r6, lr}
 8000b36:	460c      	mov	r4, r1
 8000b38:	4616      	mov	r6, r2
    (void) file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000b3a:	2500      	movs	r5, #0
 8000b3c:	e006      	b.n	8000b4c <_read+0x18>
        *ptr++ = __io_getchar();
 8000b3e:	f3af 8000 	nop.w
 8000b42:	4621      	mov	r1, r4
 8000b44:	f801 0b01 	strb.w	r0, [r1], #1
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000b48:	3501      	adds	r5, #1
        *ptr++ = __io_getchar();
 8000b4a:	460c      	mov	r4, r1
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000b4c:	42b5      	cmp	r5, r6
 8000b4e:	dbf6      	blt.n	8000b3e <_read+0xa>
    }

    return len;
}
 8000b50:	4630      	mov	r0, r6
 8000b52:	bd70      	pop	{r4, r5, r6, pc}

08000b54 <_close>:
}

int _close(int file) {
    (void) file;
    return -1;
}
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b58:	4770      	bx	lr

08000b5a <_fstat>:

int _fstat(int file, struct stat *st) {
    (void) file;
    st->st_mode = S_IFCHR;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b5e:	604b      	str	r3, [r1, #4]
    return 0;
}
 8000b60:	2000      	movs	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <_isatty>:

int _isatty(int file) {
    (void) file;
    return 1;
}
 8000b64:	2001      	movs	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <_lseek>:
int _lseek(int file, int ptr, int dir) {
    (void) file;
    (void) ptr;
    (void) dir;
    return 0;
}
 8000b68:	2000      	movs	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8000b6c:	b510      	push	{r4, lr}
 8000b6e:	4603      	mov	r3, r0
    extern uint8_t _end; /* Symbol defined in the linker script */
    extern uint8_t _estack; /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8000b70:	4a0c      	ldr	r2, [pc, #48]	@ (8000ba4 <_sbrk+0x38>)
 8000b72:	490d      	ldr	r1, [pc, #52]	@ (8000ba8 <_sbrk+0x3c>)
    const uint8_t *max_heap = (uint8_t*) stack_limit;
    uint8_t *prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8000b74:	480d      	ldr	r0, [pc, #52]	@ (8000bac <_sbrk+0x40>)
 8000b76:	6800      	ldr	r0, [r0, #0]
 8000b78:	b140      	cbz	r0, 8000b8c <_sbrk+0x20>
        __sbrk_heap_end = &_end;
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8000b7a:	480c      	ldr	r0, [pc, #48]	@ (8000bac <_sbrk+0x40>)
 8000b7c:	6800      	ldr	r0, [r0, #0]
 8000b7e:	4403      	add	r3, r0
 8000b80:	1a52      	subs	r2, r2, r1
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d806      	bhi.n	8000b94 <_sbrk+0x28>
        errno = ENOMEM;
        return (void*) -1;
    }

    prev_heap_end = __sbrk_heap_end;
    __sbrk_heap_end += incr;
 8000b86:	4a09      	ldr	r2, [pc, #36]	@ (8000bac <_sbrk+0x40>)
 8000b88:	6013      	str	r3, [r2, #0]

    return (void*) prev_heap_end;
}
 8000b8a:	bd10      	pop	{r4, pc}
        __sbrk_heap_end = &_end;
 8000b8c:	4807      	ldr	r0, [pc, #28]	@ (8000bac <_sbrk+0x40>)
 8000b8e:	4c08      	ldr	r4, [pc, #32]	@ (8000bb0 <_sbrk+0x44>)
 8000b90:	6004      	str	r4, [r0, #0]
 8000b92:	e7f2      	b.n	8000b7a <_sbrk+0xe>
        errno = ENOMEM;
 8000b94:	f004 fbd2 	bl	800533c <__errno>
 8000b98:	230c      	movs	r3, #12
 8000b9a:	6003      	str	r3, [r0, #0]
        return (void*) -1;
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ba0:	e7f3      	b.n	8000b8a <_sbrk+0x1e>
 8000ba2:	bf00      	nop
 8000ba4:	20020000 	.word	0x20020000
 8000ba8:	00000400 	.word	0x00000400
 8000bac:	20000160 	.word	0x20000160
 8000bb0:	20001208 	.word	0x20001208

08000bb4 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
    /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000bb4:	4a03      	ldr	r2, [pc, #12]	@ (8000bc4 <SystemInit+0x10>)
 8000bb6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000bba:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bbe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <_write>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "usart.h"

/* USER CODE BEGIN 0 */
int _write(int fd, char *ptr, int len) {
 8000bc8:	b510      	push	{r4, lr}
    HAL_StatusTypeDef hstatus;
    if (fd == 1 || fd == 2) {
 8000bca:	3801      	subs	r0, #1
 8000bcc:	2801      	cmp	r0, #1
 8000bce:	d80c      	bhi.n	8000bea <_write+0x22>
 8000bd0:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bd6:	b292      	uxth	r2, r2
 8000bd8:	4805      	ldr	r0, [pc, #20]	@ (8000bf0 <_write+0x28>)
 8000bda:	f001 feb6 	bl	800294a <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 8000bde:	b908      	cbnz	r0, 8000be4 <_write+0x1c>
            return len;
    }
    return -1;
}
 8000be0:	4620      	mov	r0, r4
 8000be2:	bd10      	pop	{r4, pc}
    return -1;
 8000be4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000be8:	e7fa      	b.n	8000be0 <_write+0x18>
 8000bea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000bee:	e7f7      	b.n	8000be0 <_write+0x18>
 8000bf0:	20000164 	.word	0x20000164

08000bf4 <MX_USART1_UART_Init>:

UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void) {
 8000bf4:	b508      	push	{r3, lr}
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8000bf6:	480a      	ldr	r0, [pc, #40]	@ (8000c20 <MX_USART1_UART_Init+0x2c>)
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <MX_USART1_UART_Init+0x30>)
 8000bfa:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 115200;
 8000bfc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000c00:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	2300      	movs	r3, #0
 8000c04:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000c06:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000c08:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000c12:	f001 fe6a 	bl	80028ea <HAL_UART_Init>
 8000c16:	b900      	cbnz	r0, 8000c1a <MX_USART1_UART_Init+0x26>
        Error_Handler();
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 8000c18:	bd08      	pop	{r3, pc}
        Error_Handler();
 8000c1a:	f7ff fe57 	bl	80008cc <Error_Handler>
}
 8000c1e:	e7fb      	b.n	8000c18 <MX_USART1_UART_Init+0x24>
 8000c20:	20000164 	.word	0x20000164
 8000c24:	40011000 	.word	0x40011000

08000c28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8000c28:	b500      	push	{lr}
 8000c2a:	b089      	sub	sp, #36	@ 0x24

    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	9303      	str	r3, [sp, #12]
 8000c30:	9304      	str	r3, [sp, #16]
 8000c32:	9305      	str	r3, [sp, #20]
 8000c34:	9306      	str	r3, [sp, #24]
 8000c36:	9307      	str	r3, [sp, #28]
    if (uartHandle->Instance == USART1) {
 8000c38:	6802      	ldr	r2, [r0, #0]
 8000c3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000c3e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d002      	beq.n	8000c4c <HAL_UART_MspInit+0x24>

        /* USER CODE BEGIN USART1_MspInit 1 */

        /* USER CODE END USART1_MspInit 1 */
    }
}
 8000c46:	b009      	add	sp, #36	@ 0x24
 8000c48:	f85d fb04 	ldr.w	pc, [sp], #4
        __HAL_RCC_USART1_CLK_ENABLE();
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	9101      	str	r1, [sp, #4]
 8000c50:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8000c54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c56:	f042 0210 	orr.w	r2, r2, #16
 8000c5a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000c5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c5e:	f002 0210 	and.w	r2, r2, #16
 8000c62:	9201      	str	r2, [sp, #4]
 8000c64:	9a01      	ldr	r2, [sp, #4]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	9102      	str	r1, [sp, #8]
 8000c68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c6a:	f042 0201 	orr.w	r2, r2, #1
 8000c6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	9302      	str	r3, [sp, #8]
 8000c78:	9b02      	ldr	r3, [sp, #8]
        GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8000c7a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c7e:	9303      	str	r3, [sp, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	9304      	str	r3, [sp, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	9306      	str	r3, [sp, #24]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c88:	2307      	movs	r3, #7
 8000c8a:	9307      	str	r3, [sp, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	a903      	add	r1, sp, #12
 8000c8e:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <HAL_UART_MspInit+0x70>)
 8000c90:	f000 faf2 	bl	8001278 <HAL_GPIO_Init>
}
 8000c94:	e7d7      	b.n	8000c46 <HAL_UART_MspInit+0x1e>
 8000c96:	bf00      	nop
 8000c98:	40020000 	.word	0x40020000

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ca0:	f7ff ff88 	bl	8000bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca4:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ca6:	490d      	ldr	r1, [pc, #52]	@ (8000cdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cca:	f004 fb3d 	bl	8005348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fec7 	bl	8000a60 <main>
  bx  lr    
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd8:	20000008 	.word	0x20000008
  ldr r1, =_edata
 8000cdc:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 8000ce0:	08006248 	.word	0x08006248
  ldr r2, =_sbss
 8000ce4:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 8000ce8:	20001204 	.word	0x20001204

08000cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC_IRQHandler>
	...

08000cf0 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000cf0:	b510      	push	{r4, lr}
 8000cf2:	4604      	mov	r4, r0
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <HAL_InitTick+0x40>)
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d00:	4a0c      	ldr	r2, [pc, #48]	@ (8000d34 <HAL_InitTick+0x44>)
 8000d02:	6810      	ldr	r0, [r2, #0]
 8000d04:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d08:	f000 f8c0 	bl	8000e8c <HAL_SYSTICK_Config>
 8000d0c:	b968      	cbnz	r0, 8000d2a <HAL_InitTick+0x3a>
        return HAL_ERROR;
    }

    /* Configure the SysTick IRQ priority */
    if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8000d0e:	2c0f      	cmp	r4, #15
 8000d10:	d901      	bls.n	8000d16 <HAL_InitTick+0x26>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
        uwTickPrio = TickPriority;
    } else {
        return HAL_ERROR;
 8000d12:	2001      	movs	r0, #1
 8000d14:	e00a      	b.n	8000d2c <HAL_InitTick+0x3c>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d16:	2200      	movs	r2, #0
 8000d18:	4621      	mov	r1, r4
 8000d1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d1e:	f000 f8a1 	bl	8000e64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d22:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <HAL_InitTick+0x48>)
 8000d24:	601c      	str	r4, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000d26:	2000      	movs	r0, #0
 8000d28:	e000      	b.n	8000d2c <HAL_InitTick+0x3c>
        return HAL_ERROR;
 8000d2a:	2001      	movs	r0, #1
}
 8000d2c:	bd10      	pop	{r4, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000000c 	.word	0x2000000c
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000010 	.word	0x20000010

08000d3c <HAL_Init>:
HAL_StatusTypeDef HAL_Init(void) {
 8000d3c:	b508      	push	{r3, lr}
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <HAL_Init+0x30>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d46:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000d4e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d56:	601a      	str	r2, [r3, #0]
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f871 	bl	8000e40 <HAL_NVIC_SetPriorityGrouping>
    HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f7ff ffc6 	bl	8000cf0 <HAL_InitTick>
    HAL_MspInit();
 8000d64:	f7ff feb6 	bl	8000ad4 <HAL_MspInit>
}
 8000d68:	2000      	movs	r0, #0
 8000d6a:	bd08      	pop	{r3, pc}
 8000d6c:	40023c00 	.word	0x40023c00

08000d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
    uwTick += uwTickFreq;
 8000d70:	4a03      	ldr	r2, [pc, #12]	@ (8000d80 <HAL_IncTick+0x10>)
 8000d72:	6811      	ldr	r1, [r2, #0]
 8000d74:	4b03      	ldr	r3, [pc, #12]	@ (8000d84 <HAL_IncTick+0x14>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	440b      	add	r3, r1
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200001ac 	.word	0x200001ac
 8000d84:	2000000c 	.word	0x2000000c

08000d88 <HAL_GetTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
    return uwTick;
 8000d88:	4b01      	ldr	r3, [pc, #4]	@ (8000d90 <HAL_GetTick+0x8>)
 8000d8a:	6818      	ldr	r0, [r3, #0]
}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200001ac 	.word	0x200001ac

08000d94 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8000d94:	b538      	push	{r3, r4, r5, lr}
 8000d96:	4604      	mov	r4, r0
    uint32_t tickstart = HAL_GetTick();
 8000d98:	f7ff fff6 	bl	8000d88 <HAL_GetTick>
 8000d9c:	4605      	mov	r5, r0
    uint32_t wait = Delay;

    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY) {
 8000d9e:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8000da2:	d002      	beq.n	8000daa <HAL_Delay+0x16>
        wait += (uint32_t) (uwTickFreq);
 8000da4:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <HAL_Delay+0x24>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	441c      	add	r4, r3
    }

    while ((HAL_GetTick() - tickstart) < wait) {
 8000daa:	f7ff ffed 	bl	8000d88 <HAL_GetTick>
 8000dae:	1b40      	subs	r0, r0, r5
 8000db0:	42a0      	cmp	r0, r4
 8000db2:	d3fa      	bcc.n	8000daa <HAL_Delay+0x16>
    }
}
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop
 8000db8:	2000000c 	.word	0x2000000c

08000dbc <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	db07      	blt.n	8000dd0 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc0:	f000 021f 	and.w	r2, r0, #31
 8000dc4:	0940      	lsrs	r0, r0, #5
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	4093      	lsls	r3, r2
 8000dca:	4a02      	ldr	r2, [pc, #8]	@ (8000dd4 <__NVIC_EnableIRQ+0x18>)
 8000dcc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	2800      	cmp	r0, #0
 8000dda:	db08      	blt.n	8000dee <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	0109      	lsls	r1, r1, #4
 8000dde:	b2c9      	uxtb	r1, r1
 8000de0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000de4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000de8:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000dec:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	f000 000f 	and.w	r0, r0, #15
 8000df2:	0109      	lsls	r1, r1, #4
 8000df4:	b2c9      	uxtb	r1, r1
 8000df6:	4b01      	ldr	r3, [pc, #4]	@ (8000dfc <__NVIC_SetPriority+0x24>)
 8000df8:	5419      	strb	r1, [r3, r0]
}
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed14 	.word	0xe000ed14

08000e00 <NVIC_EncodePriority>:
{
 8000e00:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e02:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e06:	f1c0 0c07 	rsb	ip, r0, #7
 8000e0a:	f1bc 0f04 	cmp.w	ip, #4
 8000e0e:	bf28      	it	cs
 8000e10:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e14:	1d03      	adds	r3, r0, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d90f      	bls.n	8000e3a <NVIC_EncodePriority+0x3a>
 8000e1a:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000e20:	fa0e f00c 	lsl.w	r0, lr, ip
 8000e24:	ea21 0100 	bic.w	r1, r1, r0
 8000e28:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2a:	fa0e fe03 	lsl.w	lr, lr, r3
 8000e2e:	ea22 020e 	bic.w	r2, r2, lr
}
 8000e32:	ea41 0002 	orr.w	r0, r1, r2
 8000e36:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e7ee      	b.n	8000e1c <NVIC_EncodePriority+0x1c>
	...

08000e40 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4a07      	ldr	r2, [pc, #28]	@ (8000e60 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e42:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e44:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e48:	041b      	lsls	r3, r3, #16
 8000e4a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e4c:	0200      	lsls	r0, r0, #8
 8000e4e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e52:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000e5c:	60d3      	str	r3, [r2, #12]
    /* Check the parameters */
    assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

    /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
    NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <HAL_NVIC_SetPriority>:
 * @param  SubPriority the subpriority level for the IRQ channel.
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority) {
 8000e64:	b510      	push	{r4, lr}
 8000e66:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <HAL_NVIC_SetPriority+0x1c>)
 8000e6a:	68d8      	ldr	r0, [r3, #12]
    assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
    assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

    prioritygroup = NVIC_GetPriorityGrouping();

    NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000e70:	f7ff ffc6 	bl	8000e00 <NVIC_EncodePriority>
 8000e74:	4601      	mov	r1, r0
 8000e76:	4620      	mov	r0, r4
 8000e78:	f7ff ffae 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000e7c:	bd10      	pop	{r4, pc}
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8000e84:	b508      	push	{r3, lr}
    /* Check the parameters */
    assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

    /* Enable interrupt */
    NVIC_EnableIRQ(IRQn);
 8000e86:	f7ff ff99 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000e8a:	bd08      	pop	{r3, pc}

08000e8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000e92:	d20b      	bcs.n	8000eac <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e94:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000e98:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	4a05      	ldr	r2, [pc, #20]	@ (8000eb0 <HAL_SYSTICK_Config+0x24>)
 8000e9c:	21f0      	movs	r1, #240	@ 0xf0
 8000e9e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	2207      	movs	r2, #7
 8000ea8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eaa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000eac:	2001      	movs	r0, #1
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
    return SysTick_Config(TicksNumb);
}
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <FLASH_Program_DoubleWord>:
 *
 * @param  Address specifies the address to be programmed.
 * @param  Data specifies the data to be programmed.
 * @retval None
 */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data) {
 8000eb4:	b410      	push	{r4}
    /* Check the parameters */
    assert_param(IS_FLASH_ADDRESS(Address));

    /* If the previous operation is completed, proceed to program the new data */
    CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000eb6:	490a      	ldr	r1, [pc, #40]	@ (8000ee0 <FLASH_Program_DoubleWord+0x2c>)
 8000eb8:	690c      	ldr	r4, [r1, #16]
 8000eba:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
 8000ebe:	610c      	str	r4, [r1, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000ec0:	690c      	ldr	r4, [r1, #16]
 8000ec2:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
 8000ec6:	610c      	str	r4, [r1, #16]
    FLASH->CR |= FLASH_CR_PG;
 8000ec8:	690c      	ldr	r4, [r1, #16]
 8000eca:	f044 0401 	orr.w	r4, r4, #1
 8000ece:	610c      	str	r4, [r1, #16]

    /* Program first word */
    *(__IO uint32_t*) Address = (uint32_t) Data;
 8000ed0:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8000ed2:	f3bf 8f6f 	isb	sy
    /* Barrier to ensure programming is performed in 2 steps, in right order
     (independently of compiler optimization behavior) */
    __ISB();

    /* Program second word */
    *(__IO uint32_t*) (Address + 4) = (uint32_t) (Data >> 32);
 8000ed6:	6043      	str	r3, [r0, #4]
}
 8000ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40023c00 	.word	0x40023c00

08000ee4 <FLASH_Program_Word>:
static void FLASH_Program_Word(uint32_t Address, uint32_t Data) {
    /* Check the parameters */
    assert_param(IS_FLASH_ADDRESS(Address));

    /* If the previous operation is completed, proceed to program the new data */
    CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ee4:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <FLASH_Program_Word+0x20>)
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000eec:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8000eee:	691a      	ldr	r2, [r3, #16]
 8000ef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000ef4:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8000ef6:	691a      	ldr	r2, [r3, #16]
 8000ef8:	f042 0201 	orr.w	r2, r2, #1
 8000efc:	611a      	str	r2, [r3, #16]

    *(__IO uint32_t*) Address = Data;
 8000efe:	6001      	str	r1, [r0, #0]
}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00

08000f08 <FLASH_Program_HalfWord>:
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data) {
    /* Check the parameters */
    assert_param(IS_FLASH_ADDRESS(Address));

    /* If the previous operation is completed, proceed to program the new data */
    CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f08:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <FLASH_Program_HalfWord+0x20>)
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000f10:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f18:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	f042 0201 	orr.w	r2, r2, #1
 8000f20:	611a      	str	r2, [r3, #16]

    *(__IO uint16_t*) Address = Data;
 8000f22:	8001      	strh	r1, [r0, #0]
}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40023c00 	.word	0x40023c00

08000f2c <FLASH_Program_Byte>:
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data) {
    /* Check the parameters */
    assert_param(IS_FLASH_ADDRESS(Address));

    /* If the previous operation is completed, proceed to program the new data */
    CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <FLASH_Program_Byte+0x1c>)
 8000f2e:	691a      	ldr	r2, [r3, #16]
 8000f30:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000f34:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8000f3a:	691a      	ldr	r2, [r3, #16]
 8000f3c:	f042 0201 	orr.w	r2, r2, #1
 8000f40:	611a      	str	r2, [r3, #16]

    *(__IO uint8_t*) Address = Data;
 8000f42:	7001      	strb	r1, [r0, #0]
}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40023c00 	.word	0x40023c00

08000f4c <FLASH_SetErrorCode>:
/**
 * @brief  Set the specific FLASH error flag.
 * @retval None
 */
static void FLASH_SetErrorCode(void) {
    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET) {
 8000f4c:	4b27      	ldr	r3, [pc, #156]	@ (8000fec <FLASH_SetErrorCode+0xa0>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	f013 0f10 	tst.w	r3, #16
 8000f54:	d007      	beq.n	8000f66 <FLASH_SetErrorCode+0x1a>
        pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000f56:	4a26      	ldr	r2, [pc, #152]	@ (8000ff0 <FLASH_SetErrorCode+0xa4>)
 8000f58:	69d3      	ldr	r3, [r2, #28]
 8000f5a:	f043 0310 	orr.w	r3, r3, #16
 8000f5e:	61d3      	str	r3, [r2, #28]

        /* Clear FLASH write protection error pending bit */
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000f60:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <FLASH_SetErrorCode+0xa0>)
 8000f62:	2210      	movs	r2, #16
 8000f64:	60da      	str	r2, [r3, #12]
    }

    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET) {
 8000f66:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <FLASH_SetErrorCode+0xa0>)
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	f013 0f20 	tst.w	r3, #32
 8000f6e:	d007      	beq.n	8000f80 <FLASH_SetErrorCode+0x34>
        pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000f70:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff0 <FLASH_SetErrorCode+0xa4>)
 8000f72:	69d3      	ldr	r3, [r2, #28]
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	61d3      	str	r3, [r2, #28]

        /* Clear FLASH Programming alignment error pending bit */
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <FLASH_SetErrorCode+0xa0>)
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	60da      	str	r2, [r3, #12]
    }

    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET) {
 8000f80:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <FLASH_SetErrorCode+0xa0>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8000f88:	d007      	beq.n	8000f9a <FLASH_SetErrorCode+0x4e>
        pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000f8a:	4a19      	ldr	r2, [pc, #100]	@ (8000ff0 <FLASH_SetErrorCode+0xa4>)
 8000f8c:	69d3      	ldr	r3, [r2, #28]
 8000f8e:	f043 0304 	orr.w	r3, r3, #4
 8000f92:	61d3      	str	r3, [r2, #28]

        /* Clear FLASH Programming parallelism error pending bit */
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <FLASH_SetErrorCode+0xa0>)
 8000f96:	2240      	movs	r2, #64	@ 0x40
 8000f98:	60da      	str	r2, [r3, #12]
    }

    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET) {
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <FLASH_SetErrorCode+0xa0>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000fa2:	d007      	beq.n	8000fb4 <FLASH_SetErrorCode+0x68>
        pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000fa4:	4a12      	ldr	r2, [pc, #72]	@ (8000ff0 <FLASH_SetErrorCode+0xa4>)
 8000fa6:	69d3      	ldr	r3, [r2, #28]
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	61d3      	str	r3, [r2, #28]

        /* Clear FLASH Programming sequence error pending bit */
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <FLASH_SetErrorCode+0xa0>)
 8000fb0:	2280      	movs	r2, #128	@ 0x80
 8000fb2:	60da      	str	r2, [r3, #12]
    }
#if defined(FLASH_SR_RDERR)
    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET) {
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <FLASH_SetErrorCode+0xa0>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000fbc:	d008      	beq.n	8000fd0 <FLASH_SetErrorCode+0x84>
        pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff0 <FLASH_SetErrorCode+0xa4>)
 8000fc0:	69d3      	ldr	r3, [r2, #28]
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	61d3      	str	r3, [r2, #28]

        /* Clear FLASH Proprietary readout protection error pending bit */
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <FLASH_SetErrorCode+0xa0>)
 8000fca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fce:	60da      	str	r2, [r3, #12]
    }
#endif /* FLASH_SR_RDERR */
    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET) {
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <FLASH_SetErrorCode+0xa0>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	f013 0f02 	tst.w	r3, #2
 8000fd8:	d007      	beq.n	8000fea <FLASH_SetErrorCode+0x9e>
        pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000fda:	4a05      	ldr	r2, [pc, #20]	@ (8000ff0 <FLASH_SetErrorCode+0xa4>)
 8000fdc:	69d3      	ldr	r3, [r2, #28]
 8000fde:	f043 0320 	orr.w	r3, r3, #32
 8000fe2:	61d3      	str	r3, [r2, #28]

        /* Clear FLASH Operation error pending bit */
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000fe4:	4b01      	ldr	r3, [pc, #4]	@ (8000fec <FLASH_SetErrorCode+0xa0>)
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	60da      	str	r2, [r3, #12]
    }
}
 8000fea:	4770      	bx	lr
 8000fec:	40023c00 	.word	0x40023c00
 8000ff0:	200001b0 	.word	0x200001b0

08000ff4 <HAL_FLASH_Unlock>:
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET) {
 8000ff4:	4b09      	ldr	r3, [pc, #36]	@ (800101c <HAL_FLASH_Unlock+0x28>)
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db01      	blt.n	8001000 <HAL_FLASH_Unlock+0xc>
    HAL_StatusTypeDef status = HAL_OK;
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	4770      	bx	lr
        WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_FLASH_Unlock+0x28>)
 8001002:	4a07      	ldr	r2, [pc, #28]	@ (8001020 <HAL_FLASH_Unlock+0x2c>)
 8001004:	605a      	str	r2, [r3, #4]
        WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001006:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 800100a:	605a      	str	r2, [r3, #4]
        if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET) {
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	2b00      	cmp	r3, #0
 8001010:	db01      	blt.n	8001016 <HAL_FLASH_Unlock+0x22>
    HAL_StatusTypeDef status = HAL_OK;
 8001012:	2000      	movs	r0, #0
 8001014:	4770      	bx	lr
            status = HAL_ERROR;
 8001016:	2001      	movs	r0, #1
}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40023c00 	.word	0x40023c00
 8001020:	45670123 	.word	0x45670123

08001024 <HAL_FLASH_Lock>:
    FLASH->CR |= FLASH_CR_LOCK;
 8001024:	4a03      	ldr	r2, [pc, #12]	@ (8001034 <HAL_FLASH_Lock+0x10>)
 8001026:	6913      	ldr	r3, [r2, #16]
 8001028:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800102c:	6113      	str	r3, [r2, #16]
}
 800102e:	2000      	movs	r0, #0
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40023c00 	.word	0x40023c00

08001038 <FLASH_WaitForLastOperation>:
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout) {
 8001038:	b538      	push	{r3, r4, r5, lr}
 800103a:	4604      	mov	r4, r0
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <FLASH_WaitForLastOperation+0x58>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
    tickstart = HAL_GetTick();
 8001042:	f7ff fea1 	bl	8000d88 <HAL_GetTick>
 8001046:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) {
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <FLASH_WaitForLastOperation+0x5c>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001050:	d00a      	beq.n	8001068 <FLASH_WaitForLastOperation+0x30>
        if (Timeout != HAL_MAX_DELAY) {
 8001052:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8001056:	d0f7      	beq.n	8001048 <FLASH_WaitForLastOperation+0x10>
            if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout)) {
 8001058:	b124      	cbz	r4, 8001064 <FLASH_WaitForLastOperation+0x2c>
 800105a:	f7ff fe95 	bl	8000d88 <HAL_GetTick>
 800105e:	1b40      	subs	r0, r0, r5
 8001060:	42a0      	cmp	r0, r4
 8001062:	d9f1      	bls.n	8001048 <FLASH_WaitForLastOperation+0x10>
                return HAL_TIMEOUT;
 8001064:	2003      	movs	r0, #3
 8001066:	e00d      	b.n	8001084 <FLASH_WaitForLastOperation+0x4c>
    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET) {
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <FLASH_WaitForLastOperation+0x5c>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	f013 0f01 	tst.w	r3, #1
 8001070:	d002      	beq.n	8001078 <FLASH_WaitForLastOperation+0x40>
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001072:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <FLASH_WaitForLastOperation+0x5c>)
 8001074:	2201      	movs	r2, #1
 8001076:	60da      	str	r2, [r3, #12]
    if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <FLASH_WaitForLastOperation+0x5c>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	f413 7ff9 	tst.w	r3, #498	@ 0x1f2
 8001080:	d101      	bne.n	8001086 <FLASH_WaitForLastOperation+0x4e>
    return HAL_OK;
 8001082:	2000      	movs	r0, #0
}
 8001084:	bd38      	pop	{r3, r4, r5, pc}
        FLASH_SetErrorCode();
 8001086:	f7ff ff61 	bl	8000f4c <FLASH_SetErrorCode>
        return HAL_ERROR;
 800108a:	2001      	movs	r0, #1
 800108c:	e7fa      	b.n	8001084 <FLASH_WaitForLastOperation+0x4c>
 800108e:	bf00      	nop
 8001090:	200001b0 	.word	0x200001b0
 8001094:	40023c00 	.word	0x40023c00

08001098 <HAL_FLASH_Program>:
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data) {
 8001098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800109a:	4616      	mov	r6, r2
    __HAL_LOCK(&pFlash);
 800109c:	4a1b      	ldr	r2, [pc, #108]	@ (800110c <HAL_FLASH_Program+0x74>)
 800109e:	7e12      	ldrb	r2, [r2, #24]
 80010a0:	2a01      	cmp	r2, #1
 80010a2:	d030      	beq.n	8001106 <HAL_FLASH_Program+0x6e>
 80010a4:	4604      	mov	r4, r0
 80010a6:	460d      	mov	r5, r1
 80010a8:	461f      	mov	r7, r3
 80010aa:	4b18      	ldr	r3, [pc, #96]	@ (800110c <HAL_FLASH_Program+0x74>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t) FLASH_TIMEOUT_VALUE);
 80010b0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80010b4:	f7ff ffc0 	bl	8001038 <FLASH_WaitForLastOperation>
    if (status == HAL_OK) {
 80010b8:	b990      	cbnz	r0, 80010e0 <HAL_FLASH_Program+0x48>
        if (TypeProgram == FLASH_TYPEPROGRAM_BYTE) {
 80010ba:	b1ac      	cbz	r4, 80010e8 <HAL_FLASH_Program+0x50>
        } else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD) {
 80010bc:	2c01      	cmp	r4, #1
 80010be:	d018      	beq.n	80010f2 <HAL_FLASH_Program+0x5a>
        } else if (TypeProgram == FLASH_TYPEPROGRAM_WORD) {
 80010c0:	2c02      	cmp	r4, #2
 80010c2:	d01b      	beq.n	80010fc <HAL_FLASH_Program+0x64>
            FLASH_Program_DoubleWord(Address, Data);
 80010c4:	4632      	mov	r2, r6
 80010c6:	463b      	mov	r3, r7
 80010c8:	4628      	mov	r0, r5
 80010ca:	f7ff fef3 	bl	8000eb4 <FLASH_Program_DoubleWord>
        status = FLASH_WaitForLastOperation((uint32_t) FLASH_TIMEOUT_VALUE);
 80010ce:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80010d2:	f7ff ffb1 	bl	8001038 <FLASH_WaitForLastOperation>
        FLASH->CR &= (~FLASH_CR_PG);
 80010d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001110 <HAL_FLASH_Program+0x78>)
 80010d8:	6913      	ldr	r3, [r2, #16]
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	6113      	str	r3, [r2, #16]
    __HAL_UNLOCK(&pFlash);
 80010e0:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_FLASH_Program+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	761a      	strb	r2, [r3, #24]
}
 80010e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            FLASH_Program_Byte(Address, (uint8_t) Data);
 80010e8:	b2f1      	uxtb	r1, r6
 80010ea:	4628      	mov	r0, r5
 80010ec:	f7ff ff1e 	bl	8000f2c <FLASH_Program_Byte>
 80010f0:	e7ed      	b.n	80010ce <HAL_FLASH_Program+0x36>
            FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80010f2:	b2b1      	uxth	r1, r6
 80010f4:	4628      	mov	r0, r5
 80010f6:	f7ff ff07 	bl	8000f08 <FLASH_Program_HalfWord>
 80010fa:	e7e8      	b.n	80010ce <HAL_FLASH_Program+0x36>
            FLASH_Program_Word(Address, (uint32_t) Data);
 80010fc:	4631      	mov	r1, r6
 80010fe:	4628      	mov	r0, r5
 8001100:	f7ff fef0 	bl	8000ee4 <FLASH_Program_Word>
 8001104:	e7e3      	b.n	80010ce <HAL_FLASH_Program+0x36>
    __HAL_LOCK(&pFlash);
 8001106:	2002      	movs	r0, #2
 8001108:	e7ed      	b.n	80010e6 <HAL_FLASH_Program+0x4e>
 800110a:	bf00      	nop
 800110c:	200001b0 	.word	0x200001b0
 8001110:	40023c00 	.word	0x40023c00

08001114 <FLASH_MassErase>:
    /* Check the parameters */
    assert_param(IS_VOLTAGERANGE(VoltageRange));
    assert_param(IS_FLASH_BANK(Banks));

    /* If the previous operation is completed, proceed to erase all sectors */
    CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001114:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <FLASH_MassErase+0x20>)
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800111c:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_MER;
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	f042 0204 	orr.w	r2, r2, #4
 8001124:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_STRT | ((uint32_t) VoltageRange << 8U);
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800112c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001130:	611a      	str	r2, [r3, #16]
}
 8001132:	4770      	bx	lr
 8001134:	40023c00 	.word	0x40023c00

08001138 <FLASH_Erase_Sector>:

    /* Check the parameters */
    assert_param(IS_FLASH_SECTOR(Sector));
    assert_param(IS_VOLTAGERANGE(VoltageRange));

    if (VoltageRange == FLASH_VOLTAGE_RANGE_1) {
 8001138:	2901      	cmp	r1, #1
 800113a:	d005      	beq.n	8001148 <FLASH_Erase_Sector+0x10>
 800113c:	2902      	cmp	r1, #2
 800113e:	d006      	beq.n	800114e <FLASH_Erase_Sector+0x16>
 8001140:	b139      	cbz	r1, 8001152 <FLASH_Erase_Sector+0x1a>
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange) {
 8001142:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001146:	e004      	b.n	8001152 <FLASH_Erase_Sector+0x1a>
 8001148:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800114c:	e001      	b.n	8001152 <FLASH_Erase_Sector+0x1a>
 800114e:	f44f 7100 	mov.w	r1, #512	@ 0x200
    } else {
        tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
    }

    /* If the previous operation is completed, proceed to erase the sector */
    CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <FLASH_Erase_Sector+0x48>)
 8001154:	691a      	ldr	r2, [r3, #16]
 8001156:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800115a:	611a      	str	r2, [r3, #16]
    FLASH->CR |= tmp_psize;
 800115c:	691a      	ldr	r2, [r3, #16]
 800115e:	430a      	orrs	r2, r1
 8001160:	611a      	str	r2, [r3, #16]
    CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8001168:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8001170:	f040 0002 	orr.w	r0, r0, #2
 8001174:	6118      	str	r0, [r3, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800117c:	611a      	str	r2, [r3, #16]
}
 800117e:	4770      	bx	lr
 8001180:	40023c00 	.word	0x40023c00

08001184 <FLASH_FlushCaches>:
 * @brief  Flush the instruction and data caches
 * @retval None
 */
void FLASH_FlushCaches(void) {
    /* Flush instruction cache  */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET) {
 8001184:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <FLASH_FlushCaches+0x5c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800118c:	d010      	beq.n	80011b0 <FLASH_FlushCaches+0x2c>
        /* Disable instruction cache  */
        __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800118e:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <FLASH_FlushCaches+0x5c>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001196:	601a      	str	r2, [r3, #0]
        /* Reset instruction cache */
        __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011a6:	601a      	str	r2, [r3, #0]
        /* Enable instruction cache */
        __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011ae:	601a      	str	r2, [r3, #0]
    }

    /* Flush data cache */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET) {
 80011b0:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <FLASH_FlushCaches+0x5c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80011b8:	d010      	beq.n	80011dc <FLASH_FlushCaches+0x58>
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <FLASH_FlushCaches+0x5c>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011c2:	601a      	str	r2, [r3, #0]
        /* Reset data cache */
        __HAL_FLASH_DATA_CACHE_RESET();
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80011d2:	601a      	str	r2, [r3, #0]
        /* Enable data cache */
        __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80011da:	601a      	str	r2, [r3, #0]
    }
}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40023c00 	.word	0x40023c00

080011e4 <HAL_FLASHEx_Erase>:
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError) {
 80011e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __HAL_LOCK(&pFlash);
 80011e6:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <HAL_FLASHEx_Erase+0x8c>)
 80011e8:	7e1b      	ldrb	r3, [r3, #24]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d03e      	beq.n	800126c <HAL_FLASHEx_Erase+0x88>
 80011ee:	4604      	mov	r4, r0
 80011f0:	460e      	mov	r6, r1
 80011f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <HAL_FLASHEx_Erase+0x8c>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t) FLASH_TIMEOUT_VALUE);
 80011f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011fc:	f7ff ff1c 	bl	8001038 <FLASH_WaitForLastOperation>
    if (status == HAL_OK) {
 8001200:	4607      	mov	r7, r0
 8001202:	bb70      	cbnz	r0, 8001262 <HAL_FLASHEx_Erase+0x7e>
        *SectorError = 0xFFFFFFFFU;
 8001204:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001208:	6033      	str	r3, [r6, #0]
        if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE) {
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d016      	beq.n	800123e <HAL_FLASHEx_Erase+0x5a>
            for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++) {
 8001210:	68a5      	ldr	r5, [r4, #8]
 8001212:	68e3      	ldr	r3, [r4, #12]
 8001214:	68a2      	ldr	r2, [r4, #8]
 8001216:	4413      	add	r3, r2
 8001218:	42ab      	cmp	r3, r5
 800121a:	d920      	bls.n	800125e <HAL_FLASHEx_Erase+0x7a>
                FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800121c:	7c21      	ldrb	r1, [r4, #16]
 800121e:	4628      	mov	r0, r5
 8001220:	f7ff ff8a 	bl	8001138 <FLASH_Erase_Sector>
                status = FLASH_WaitForLastOperation((uint32_t) FLASH_TIMEOUT_VALUE);
 8001224:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001228:	f7ff ff06 	bl	8001038 <FLASH_WaitForLastOperation>
                CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800122c:	4a11      	ldr	r2, [pc, #68]	@ (8001274 <HAL_FLASHEx_Erase+0x90>)
 800122e:	6913      	ldr	r3, [r2, #16]
 8001230:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001234:	6113      	str	r3, [r2, #16]
                if (status != HAL_OK) {
 8001236:	4607      	mov	r7, r0
 8001238:	b980      	cbnz	r0, 800125c <HAL_FLASHEx_Erase+0x78>
            for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++) {
 800123a:	3501      	adds	r5, #1
 800123c:	e7e9      	b.n	8001212 <HAL_FLASHEx_Erase+0x2e>
            FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800123e:	6861      	ldr	r1, [r4, #4]
 8001240:	7c20      	ldrb	r0, [r4, #16]
 8001242:	f7ff ff67 	bl	8001114 <FLASH_MassErase>
            status = FLASH_WaitForLastOperation((uint32_t) FLASH_TIMEOUT_VALUE);
 8001246:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800124a:	f7ff fef5 	bl	8001038 <FLASH_WaitForLastOperation>
 800124e:	4607      	mov	r7, r0
            FLASH->CR &= (~FLASH_MER_BIT);
 8001250:	4a08      	ldr	r2, [pc, #32]	@ (8001274 <HAL_FLASHEx_Erase+0x90>)
 8001252:	6913      	ldr	r3, [r2, #16]
 8001254:	f023 0304 	bic.w	r3, r3, #4
 8001258:	6113      	str	r3, [r2, #16]
 800125a:	e000      	b.n	800125e <HAL_FLASHEx_Erase+0x7a>
                    *SectorError = index;
 800125c:	6035      	str	r5, [r6, #0]
        FLASH_FlushCaches();
 800125e:	f7ff ff91 	bl	8001184 <FLASH_FlushCaches>
    __HAL_UNLOCK(&pFlash);
 8001262:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <HAL_FLASHEx_Erase+0x8c>)
 8001264:	2200      	movs	r2, #0
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	4638      	mov	r0, r7
 800126a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(&pFlash);
 800126c:	2702      	movs	r7, #2
 800126e:	e7fb      	b.n	8001268 <HAL_FLASHEx_Erase+0x84>
 8001270:	200001b0 	.word	0x200001b0
 8001274:	40023c00 	.word	0x40023c00

08001278 <HAL_GPIO_Init>:
    assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
    assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
    assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

    /* Configure the port pins */
    for (position = 0U; position < GPIO_NUMBER; position++) {
 8001278:	2300      	movs	r3, #0
 800127a:	2b0f      	cmp	r3, #15
 800127c:	f200 80d7 	bhi.w	800142e <HAL_GPIO_Init+0x1b6>
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8001280:	b570      	push	{r4, r5, r6, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	e065      	b.n	8001352 <HAL_GPIO_Init+0xda>
            /* In case of Output or Alternate function mode selection */
            if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
                /* Check the Speed parameter */
                assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
                /* Configure the IO Speed */
                temp = GPIOx->OSPEEDR;
 8001286:	6885      	ldr	r5, [r0, #8]
                temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001288:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800128c:	2403      	movs	r4, #3
 800128e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001292:	ea25 0504 	bic.w	r5, r5, r4
                temp |= (GPIO_Init->Speed << (position * 2U));
 8001296:	68cc      	ldr	r4, [r1, #12]
 8001298:	fa04 f40e 	lsl.w	r4, r4, lr
 800129c:	432c      	orrs	r4, r5
                GPIOx->OSPEEDR = temp;
 800129e:	6084      	str	r4, [r0, #8]

                /* Configure the IO Output Type */
                temp = GPIOx->OTYPER;
 80012a0:	6844      	ldr	r4, [r0, #4]
                temp &= ~(GPIO_OTYPER_OT_0 << position);
 80012a2:	ea24 0402 	bic.w	r4, r4, r2
                temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a6:	684a      	ldr	r2, [r1, #4]
 80012a8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80012ac:	409a      	lsls	r2, r3
 80012ae:	4322      	orrs	r2, r4
                GPIOx->OTYPER = temp;
 80012b0:	6042      	str	r2, [r0, #4]
 80012b2:	e05c      	b.n	800136e <HAL_GPIO_Init+0xf6>
            /* In case of Alternate function mode selection */
            if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
                /* Check the Alternate function parameter */
                assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
                /* Configure Alternate function mapped with the current IO */
                temp = GPIOx->AFR[position >> 3U];
 80012b4:	08dc      	lsrs	r4, r3, #3
 80012b6:	3408      	adds	r4, #8
 80012b8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
                temp &= ~(0xFU << ((uint32_t) (position & 0x07U) * 4U));
 80012bc:	f003 0507 	and.w	r5, r3, #7
 80012c0:	00ad      	lsls	r5, r5, #2
 80012c2:	f04f 0e0f 	mov.w	lr, #15
 80012c6:	fa0e fe05 	lsl.w	lr, lr, r5
 80012ca:	ea22 0e0e 	bic.w	lr, r2, lr
                temp |= ((uint32_t) (GPIO_Init->Alternate) << (((uint32_t) position & 0x07U) * 4U));
 80012ce:	690a      	ldr	r2, [r1, #16]
 80012d0:	40aa      	lsls	r2, r5
 80012d2:	ea42 020e 	orr.w	r2, r2, lr
                GPIOx->AFR[position >> 3U] = temp;
 80012d6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80012da:	e05c      	b.n	8001396 <HAL_GPIO_Init+0x11e>
                /* Enable SYSCFG Clock */
                __HAL_RCC_SYSCFG_CLK_ENABLE();

                temp = SYSCFG->EXTICR[position >> 2U];
                temp &= ~(0x0FU << (4U * (position & 0x03U)));
                temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012dc:	2204      	movs	r2, #4
 80012de:	e000      	b.n	80012e2 <HAL_GPIO_Init+0x6a>
 80012e0:	2200      	movs	r2, #0
 80012e2:	fa02 f20e 	lsl.w	r2, r2, lr
 80012e6:	432a      	orrs	r2, r5
                SYSCFG->EXTICR[position >> 2U] = temp;
 80012e8:	3402      	adds	r4, #2
 80012ea:	4d51      	ldr	r5, [pc, #324]	@ (8001430 <HAL_GPIO_Init+0x1b8>)
 80012ec:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

                /* Clear Rising Falling edge configuration */
                temp = EXTI->RTSR;
 80012f0:	4a50      	ldr	r2, [pc, #320]	@ (8001434 <HAL_GPIO_Init+0x1bc>)
 80012f2:	6894      	ldr	r4, [r2, #8]
                temp &= ~((uint32_t) iocurrent);
 80012f4:	ea6f 020c 	mvn.w	r2, ip
 80012f8:	ea24 050c 	bic.w	r5, r4, ip
                if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 80012fc:	684e      	ldr	r6, [r1, #4]
 80012fe:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001302:	d001      	beq.n	8001308 <HAL_GPIO_Init+0x90>
                    temp |= iocurrent;
 8001304:	ea4c 0504 	orr.w	r5, ip, r4
                }
                EXTI->RTSR = temp;
 8001308:	4c4a      	ldr	r4, [pc, #296]	@ (8001434 <HAL_GPIO_Init+0x1bc>)
 800130a:	60a5      	str	r5, [r4, #8]

                temp = EXTI->FTSR;
 800130c:	68e4      	ldr	r4, [r4, #12]
                temp &= ~((uint32_t) iocurrent);
 800130e:	ea02 0504 	and.w	r5, r2, r4
                if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 8001312:	684e      	ldr	r6, [r1, #4]
 8001314:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001318:	d001      	beq.n	800131e <HAL_GPIO_Init+0xa6>
                    temp |= iocurrent;
 800131a:	ea4c 0504 	orr.w	r5, ip, r4
                }
                EXTI->FTSR = temp;
 800131e:	4c45      	ldr	r4, [pc, #276]	@ (8001434 <HAL_GPIO_Init+0x1bc>)
 8001320:	60e5      	str	r5, [r4, #12]

                temp = EXTI->EMR;
 8001322:	6864      	ldr	r4, [r4, #4]
                temp &= ~((uint32_t) iocurrent);
 8001324:	ea02 0504 	and.w	r5, r2, r4
                if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 8001328:	684e      	ldr	r6, [r1, #4]
 800132a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800132e:	d001      	beq.n	8001334 <HAL_GPIO_Init+0xbc>
                    temp |= iocurrent;
 8001330:	ea4c 0504 	orr.w	r5, ip, r4
                }
                EXTI->EMR = temp;
 8001334:	4c3f      	ldr	r4, [pc, #252]	@ (8001434 <HAL_GPIO_Init+0x1bc>)
 8001336:	6065      	str	r5, [r4, #4]

                /* Clear EXTI line configuration */
                temp = EXTI->IMR;
 8001338:	6824      	ldr	r4, [r4, #0]
                temp &= ~((uint32_t) iocurrent);
 800133a:	4022      	ands	r2, r4
                if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 800133c:	684d      	ldr	r5, [r1, #4]
 800133e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001342:	d001      	beq.n	8001348 <HAL_GPIO_Init+0xd0>
                    temp |= iocurrent;
 8001344:	ea4c 0204 	orr.w	r2, ip, r4
                }
                EXTI->IMR = temp;
 8001348:	4c3a      	ldr	r4, [pc, #232]	@ (8001434 <HAL_GPIO_Init+0x1bc>)
 800134a:	6022      	str	r2, [r4, #0]
    for (position = 0U; position < GPIO_NUMBER; position++) {
 800134c:	3301      	adds	r3, #1
 800134e:	2b0f      	cmp	r3, #15
 8001350:	d86b      	bhi.n	800142a <HAL_GPIO_Init+0x1b2>
        ioposition = 0x01U << position;
 8001352:	2201      	movs	r2, #1
 8001354:	409a      	lsls	r2, r3
        iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 8001356:	680c      	ldr	r4, [r1, #0]
 8001358:	ea04 0c02 	and.w	ip, r4, r2
        if (iocurrent == ioposition) {
 800135c:	ea32 0404 	bics.w	r4, r2, r4
 8001360:	d1f4      	bne.n	800134c <HAL_GPIO_Init+0xd4>
            if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8001362:	684c      	ldr	r4, [r1, #4]
 8001364:	f004 0403 	and.w	r4, r4, #3
 8001368:	3c01      	subs	r4, #1
 800136a:	2c01      	cmp	r4, #1
 800136c:	d98b      	bls.n	8001286 <HAL_GPIO_Init+0xe>
            if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 800136e:	684a      	ldr	r2, [r1, #4]
 8001370:	f002 0203 	and.w	r2, r2, #3
 8001374:	2a03      	cmp	r2, #3
 8001376:	d009      	beq.n	800138c <HAL_GPIO_Init+0x114>
                temp = GPIOx->PUPDR;
 8001378:	68c4      	ldr	r4, [r0, #12]
                temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800137a:	005d      	lsls	r5, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	40aa      	lsls	r2, r5
 8001380:	ea24 0402 	bic.w	r4, r4, r2
                temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001384:	688a      	ldr	r2, [r1, #8]
 8001386:	40aa      	lsls	r2, r5
 8001388:	4322      	orrs	r2, r4
                GPIOx->PUPDR = temp;
 800138a:	60c2      	str	r2, [r0, #12]
            if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 800138c:	684a      	ldr	r2, [r1, #4]
 800138e:	f002 0203 	and.w	r2, r2, #3
 8001392:	2a02      	cmp	r2, #2
 8001394:	d08e      	beq.n	80012b4 <HAL_GPIO_Init+0x3c>
            temp = GPIOx->MODER;
 8001396:	6804      	ldr	r4, [r0, #0]
            temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001398:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800139c:	2203      	movs	r2, #3
 800139e:	fa02 f20e 	lsl.w	r2, r2, lr
 80013a2:	ea24 0402 	bic.w	r4, r4, r2
            temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a6:	684a      	ldr	r2, [r1, #4]
 80013a8:	f002 0203 	and.w	r2, r2, #3
 80013ac:	fa02 f20e 	lsl.w	r2, r2, lr
 80013b0:	4322      	orrs	r2, r4
            GPIOx->MODER = temp;
 80013b2:	6002      	str	r2, [r0, #0]
            if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 80013b4:	684a      	ldr	r2, [r1, #4]
 80013b6:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80013ba:	d0c7      	beq.n	800134c <HAL_GPIO_Init+0xd4>
                __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013bc:	2200      	movs	r2, #0
 80013be:	9201      	str	r2, [sp, #4]
 80013c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001438 <HAL_GPIO_Init+0x1c0>)
 80013c2:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80013c4:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80013c8:	6454      	str	r4, [r2, #68]	@ 0x44
 80013ca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80013cc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80013d0:	9201      	str	r2, [sp, #4]
 80013d2:	9a01      	ldr	r2, [sp, #4]
                temp = SYSCFG->EXTICR[position >> 2U];
 80013d4:	089c      	lsrs	r4, r3, #2
 80013d6:	1ca5      	adds	r5, r4, #2
 80013d8:	4a15      	ldr	r2, [pc, #84]	@ (8001430 <HAL_GPIO_Init+0x1b8>)
 80013da:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
                temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013de:	f003 0e03 	and.w	lr, r3, #3
 80013e2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f20e 	lsl.w	r2, r2, lr
 80013ec:	ea25 0502 	bic.w	r5, r5, r2
                temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013f0:	4a12      	ldr	r2, [pc, #72]	@ (800143c <HAL_GPIO_Init+0x1c4>)
 80013f2:	4290      	cmp	r0, r2
 80013f4:	f43f af74 	beq.w	80012e0 <HAL_GPIO_Init+0x68>
 80013f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80013fc:	4290      	cmp	r0, r2
 80013fe:	d00e      	beq.n	800141e <HAL_GPIO_Init+0x1a6>
 8001400:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001404:	4290      	cmp	r0, r2
 8001406:	d00c      	beq.n	8001422 <HAL_GPIO_Init+0x1aa>
 8001408:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800140c:	4290      	cmp	r0, r2
 800140e:	d00a      	beq.n	8001426 <HAL_GPIO_Init+0x1ae>
 8001410:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001414:	4290      	cmp	r0, r2
 8001416:	f43f af61 	beq.w	80012dc <HAL_GPIO_Init+0x64>
 800141a:	2207      	movs	r2, #7
 800141c:	e761      	b.n	80012e2 <HAL_GPIO_Init+0x6a>
 800141e:	2201      	movs	r2, #1
 8001420:	e75f      	b.n	80012e2 <HAL_GPIO_Init+0x6a>
 8001422:	2202      	movs	r2, #2
 8001424:	e75d      	b.n	80012e2 <HAL_GPIO_Init+0x6a>
 8001426:	2203      	movs	r2, #3
 8001428:	e75b      	b.n	80012e2 <HAL_GPIO_Init+0x6a>
            }
        }
    }
}
 800142a:	b002      	add	sp, #8
 800142c:	bd70      	pop	{r4, r5, r6, pc}
 800142e:	4770      	bx	lr
 8001430:	40013800 	.word	0x40013800
 8001434:	40013c00 	.word	0x40013c00
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000

08001440 <HAL_GPIO_ReadPin>:
    GPIO_PinState bitstatus;

    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));

    if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) GPIO_PIN_RESET) {
 8001440:	6903      	ldr	r3, [r0, #16]
 8001442:	4219      	tst	r1, r3
 8001444:	d001      	beq.n	800144a <HAL_GPIO_ReadPin+0xa>
        bitstatus = GPIO_PIN_SET;
 8001446:	2001      	movs	r0, #1
 8001448:	4770      	bx	lr
    } else {
        bitstatus = GPIO_PIN_RESET;
 800144a:	2000      	movs	r0, #0
    }
    return bitstatus;
}
 800144c:	4770      	bx	lr

0800144e <HAL_GPIO_WritePin>:
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState) {
    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));
    assert_param(IS_GPIO_PIN_ACTION(PinState));

    if (PinState != GPIO_PIN_RESET) {
 800144e:	b10a      	cbz	r2, 8001454 <HAL_GPIO_WritePin+0x6>
        GPIOx->BSRR = GPIO_Pin;
 8001450:	6181      	str	r1, [r0, #24]
 8001452:	4770      	bx	lr
    } else {
        GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
 8001454:	0409      	lsls	r1, r1, #16
 8001456:	6181      	str	r1, [r0, #24]
    }
}
 8001458:	4770      	bx	lr

0800145a <HAL_GPIO_TogglePin>:

    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));

    /* get current Output Data Register value */
    odr = GPIOx->ODR;
 800145a:	6943      	ldr	r3, [r0, #20]

    /* Set selected pins that were at low level, and reset ones that were high */
    GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800145c:	ea01 0203 	and.w	r2, r1, r3
 8001460:	ea21 0103 	bic.w	r1, r1, r3
 8001464:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001468:	6181      	str	r1, [r0, #24]
}
 800146a:	4770      	bx	lr

0800146c <PCD_WriteEmptyTxFifo>:
 * @brief  Check FIFO for the next packet to be loaded.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum) {
 800146c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001470:	b083      	sub	sp, #12
    USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001472:	f8d0 8000 	ldr.w	r8, [r0]
    uint32_t len32b;
    uint32_t fifoemptymsk;

    ep = &hpcd->IN_ep[epnum];

    if (ep->xfer_count > ep->xfer_len) {
 8001476:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800147a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800147e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001482:	429a      	cmp	r2, r3
 8001484:	d854      	bhi.n	8001530 <PCD_WriteEmptyTxFifo+0xc4>
 8001486:	4607      	mov	r7, r0
 8001488:	460c      	mov	r4, r1
        return HAL_ERROR;
    }

    len = ep->xfer_len - ep->xfer_count;
 800148a:	1a9b      	subs	r3, r3, r2

    if (len > ep->maxpacket) {
 800148c:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8001490:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001494:	69d2      	ldr	r2, [r2, #28]
 8001496:	429a      	cmp	r2, r3
 8001498:	d300      	bcc.n	800149c <PCD_WriteEmptyTxFifo+0x30>
    len = ep->xfer_len - ep->xfer_count;
 800149a:	461a      	mov	r2, r3
        len = ep->maxpacket;
    }

    len32b = (len + 3U) / 4U;
 800149c:	f102 0903 	add.w	r9, r2, #3
 80014a0:	ea4f 0999 	mov.w	r9, r9, lsr #2

    while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) && (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U)) {
 80014a4:	e015      	b.n	80014d2 <PCD_WriteEmptyTxFifo+0x66>
        len = ep->xfer_len - ep->xfer_count;

        if (len > ep->maxpacket) {
            len = ep->maxpacket;
        }
        len32b = (len + 3U) / 4U;
 80014a6:	f106 0903 	add.w	r9, r6, #3
 80014aa:	ea4f 0999 	mov.w	r9, r9, lsr #2

        (void) USB_WritePacket(USBx, ep->xfer_buff, (uint8_t) epnum, (uint16_t) len, (uint8_t) hpcd->Init.dma_enable);
 80014ae:	79bb      	ldrb	r3, [r7, #6]
 80014b0:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 80014b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80014b8:	6a29      	ldr	r1, [r5, #32]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	b2b3      	uxth	r3, r6
 80014be:	b2e2      	uxtb	r2, r4
 80014c0:	4640      	mov	r0, r8
 80014c2:	f001 fd72 	bl	8002faa <USB_WritePacket>

        ep->xfer_buff += len;
 80014c6:	6a2b      	ldr	r3, [r5, #32]
 80014c8:	4433      	add	r3, r6
 80014ca:	622b      	str	r3, [r5, #32]
        ep->xfer_count += len;
 80014cc:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80014ce:	4433      	add	r3, r6
 80014d0:	62ab      	str	r3, [r5, #40]	@ 0x28
    while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) && (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U)) {
 80014d2:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 80014d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	454b      	cmp	r3, r9
 80014e0:	d312      	bcc.n	8001508 <PCD_WriteEmptyTxFifo+0x9c>
 80014e2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80014e6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80014ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d20a      	bcs.n	8001508 <PCD_WriteEmptyTxFifo+0x9c>
 80014f2:	b14b      	cbz	r3, 8001508 <PCD_WriteEmptyTxFifo+0x9c>
        len = ep->xfer_len - ep->xfer_count;
 80014f4:	1a9b      	subs	r3, r3, r2
        if (len > ep->maxpacket) {
 80014f6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 80014fa:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80014fe:	69d6      	ldr	r6, [r2, #28]
 8001500:	429e      	cmp	r6, r3
 8001502:	d3d0      	bcc.n	80014a6 <PCD_WriteEmptyTxFifo+0x3a>
        len = ep->xfer_len - ep->xfer_count;
 8001504:	461e      	mov	r6, r3
 8001506:	e7ce      	b.n	80014a6 <PCD_WriteEmptyTxFifo+0x3a>
    }

    if (ep->xfer_len <= ep->xfer_count) {
 8001508:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800150c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8001510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001514:	429a      	cmp	r2, r3
 8001516:	d80f      	bhi.n	8001538 <PCD_WriteEmptyTxFifo+0xcc>
        fifoemptymsk = (uint32_t) (0x1UL << (epnum & EP_ADDR_MSK));
 8001518:	f004 040f 	and.w	r4, r4, #15
 800151c:	2201      	movs	r2, #1
 800151e:	40a2      	lsls	r2, r4
        USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001520:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 8001524:	ea23 0302 	bic.w	r3, r3, r2
 8001528:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
    }

    return HAL_OK;
 800152c:	2000      	movs	r0, #0
 800152e:	e000      	b.n	8001532 <PCD_WriteEmptyTxFifo+0xc6>
        return HAL_ERROR;
 8001530:	2001      	movs	r0, #1
}
 8001532:	b003      	add	sp, #12
 8001534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_OK;
 8001538:	2000      	movs	r0, #0
 800153a:	e7fa      	b.n	8001532 <PCD_WriteEmptyTxFifo+0xc6>

0800153c <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd) {
 800153c:	b530      	push	{r4, r5, lr}
 800153e:	b083      	sub	sp, #12
    if (hpcd == NULL) {
 8001540:	2800      	cmp	r0, #0
 8001542:	d07a      	beq.n	800163a <HAL_PCD_Init+0xfe>
 8001544:	4604      	mov	r4, r0
    USBx = hpcd->Instance;
 8001546:	6805      	ldr	r5, [r0, #0]
    if (hpcd->State == HAL_PCD_STATE_RESET) {
 8001548:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 800154c:	b1c3      	cbz	r3, 8001580 <HAL_PCD_Init+0x44>
    hpcd->State = HAL_PCD_STATE_BUSY;
 800154e:	2303      	movs	r3, #3
 8001550:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    if (USBx == USB_OTG_FS) {
 8001554:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 8001558:	d017      	beq.n	800158a <HAL_PCD_Init+0x4e>
    __HAL_PCD_DISABLE(hpcd);
 800155a:	6820      	ldr	r0, [r4, #0]
 800155c:	f001 fb48 	bl	8002bf0 <USB_DisableGlobalInt>
    if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK) {
 8001560:	7c23      	ldrb	r3, [r4, #16]
 8001562:	f88d 3000 	strb.w	r3, [sp]
 8001566:	1d23      	adds	r3, r4, #4
 8001568:	cb0e      	ldmia	r3, {r1, r2, r3}
 800156a:	6820      	ldr	r0, [r4, #0]
 800156c:	f001 fa7f 	bl	8002a6e <USB_CoreInit>
 8001570:	b170      	cbz	r0, 8001590 <HAL_PCD_Init+0x54>
        hpcd->State = HAL_PCD_STATE_ERROR;
 8001572:	2302      	movs	r3, #2
 8001574:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
        return HAL_ERROR;
 8001578:	2501      	movs	r5, #1
}
 800157a:	4628      	mov	r0, r5
 800157c:	b003      	add	sp, #12
 800157e:	bd30      	pop	{r4, r5, pc}
        hpcd->Lock = HAL_UNLOCKED;
 8001580:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
        HAL_PCD_MspInit(hpcd);
 8001584:	f003 fb36 	bl	8004bf4 <HAL_PCD_MspInit>
 8001588:	e7e1      	b.n	800154e <HAL_PCD_Init+0x12>
        hpcd->Init.dma_enable = 0U;
 800158a:	2300      	movs	r3, #0
 800158c:	71a3      	strb	r3, [r4, #6]
 800158e:	e7e4      	b.n	800155a <HAL_PCD_Init+0x1e>
    if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK) {
 8001590:	2100      	movs	r1, #0
 8001592:	6820      	ldr	r0, [r4, #0]
 8001594:	f001 ff1f 	bl	80033d6 <USB_SetCurrentMode>
 8001598:	4602      	mov	r2, r0
 800159a:	b908      	cbnz	r0, 80015a0 <HAL_PCD_Init+0x64>
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 800159c:	4603      	mov	r3, r0
 800159e:	e017      	b.n	80015d0 <HAL_PCD_Init+0x94>
        hpcd->State = HAL_PCD_STATE_ERROR;
 80015a0:	2302      	movs	r3, #2
 80015a2:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
        return HAL_ERROR;
 80015a6:	2501      	movs	r5, #1
 80015a8:	e7e7      	b.n	800157a <HAL_PCD_Init+0x3e>
        hpcd->IN_ep[i].is_in = 1U;
 80015aa:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80015ae:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80015b2:	2001      	movs	r0, #1
 80015b4:	7548      	strb	r0, [r1, #21]
        hpcd->IN_ep[i].num = i;
 80015b6:	750b      	strb	r3, [r1, #20]
        hpcd->IN_ep[i].tx_fifo_num = i;
 80015b8:	85cb      	strh	r3, [r1, #46]	@ 0x2e
        hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015ba:	2000      	movs	r0, #0
 80015bc:	7608      	strb	r0, [r1, #24]
        hpcd->IN_ep[i].maxpacket = 0U;
 80015be:	61c8      	str	r0, [r1, #28]
        hpcd->IN_ep[i].xfer_buff = 0U;
 80015c0:	6208      	str	r0, [r1, #32]
        hpcd->IN_ep[i].xfer_len = 0U;
 80015c2:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80015c6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80015ca:	6248      	str	r0, [r1, #36]	@ 0x24
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 80015cc:	3301      	adds	r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	7920      	ldrb	r0, [r4, #4]
 80015d2:	4298      	cmp	r0, r3
 80015d4:	d8e9      	bhi.n	80015aa <HAL_PCD_Init+0x6e>
 80015d6:	e016      	b.n	8001606 <HAL_PCD_Init+0xca>
        hpcd->OUT_ep[i].is_in = 0U;
 80015d8:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 80015dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80015e0:	2100      	movs	r1, #0
 80015e2:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
        hpcd->OUT_ep[i].num = i;
 80015e6:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
        hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015ea:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
        hpcd->OUT_ep[i].maxpacket = 0U;
 80015ee:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
        hpcd->OUT_ep[i].xfer_buff = 0U;
 80015f2:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
        hpcd->OUT_ep[i].xfer_len = 0U;
 80015f6:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 80015fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80015fe:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8001602:	3201      	adds	r2, #1
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	4290      	cmp	r0, r2
 8001608:	d8e6      	bhi.n	80015d8 <HAL_PCD_Init+0x9c>
    if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK) {
 800160a:	7c23      	ldrb	r3, [r4, #16]
 800160c:	f88d 3000 	strb.w	r3, [sp]
 8001610:	1d23      	adds	r3, r4, #4
 8001612:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001614:	6820      	ldr	r0, [r4, #0]
 8001616:	f001 fb41 	bl	8002c9c <USB_DevInit>
 800161a:	4605      	mov	r5, r0
 800161c:	b120      	cbz	r0, 8001628 <HAL_PCD_Init+0xec>
        hpcd->State = HAL_PCD_STATE_ERROR;
 800161e:	2302      	movs	r3, #2
 8001620:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
        return HAL_ERROR;
 8001624:	2501      	movs	r5, #1
 8001626:	e7a8      	b.n	800157a <HAL_PCD_Init+0x3e>
    hpcd->USB_Address = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	7463      	strb	r3, [r4, #17]
    hpcd->State = HAL_PCD_STATE_READY;
 800162c:	2301      	movs	r3, #1
 800162e:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    (void) USB_DevDisconnect(hpcd->Instance);
 8001632:	6820      	ldr	r0, [r4, #0]
 8001634:	f001 fe8e 	bl	8003354 <USB_DevDisconnect>
    return HAL_OK;
 8001638:	e79f      	b.n	800157a <HAL_PCD_Init+0x3e>
        return HAL_ERROR;
 800163a:	2501      	movs	r5, #1
 800163c:	e79d      	b.n	800157a <HAL_PCD_Init+0x3e>

0800163e <HAL_PCD_Start>:
    USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800163e:	6803      	ldr	r3, [r0, #0]
    __HAL_LOCK(hpcd);
 8001640:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8001644:	2a01      	cmp	r2, #1
 8001646:	d01a      	beq.n	800167e <HAL_PCD_Start+0x40>
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd) {
 8001648:	b510      	push	{r4, lr}
 800164a:	4604      	mov	r4, r0
    __HAL_LOCK(hpcd);
 800164c:	2201      	movs	r2, #1
 800164e:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
    if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) && (hpcd->Init.battery_charging_enable == 1U)) {
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8001658:	d002      	beq.n	8001660 <HAL_PCD_Start+0x22>
 800165a:	7b42      	ldrb	r2, [r0, #13]
 800165c:	2a01      	cmp	r2, #1
 800165e:	d009      	beq.n	8001674 <HAL_PCD_Start+0x36>
    __HAL_PCD_ENABLE(hpcd);
 8001660:	6820      	ldr	r0, [r4, #0]
 8001662:	f001 fabf 	bl	8002be4 <USB_EnableGlobalInt>
    (void) USB_DevConnect(hpcd->Instance);
 8001666:	6820      	ldr	r0, [r4, #0]
 8001668:	f001 fe66 	bl	8003338 <USB_DevConnect>
    __HAL_UNLOCK(hpcd);
 800166c:	2000      	movs	r0, #0
 800166e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001672:	bd10      	pop	{r4, pc}
        USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001674:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001676:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800167a:	639a      	str	r2, [r3, #56]	@ 0x38
 800167c:	e7f0      	b.n	8001660 <HAL_PCD_Start+0x22>
    __HAL_LOCK(hpcd);
 800167e:	2002      	movs	r0, #2
}
 8001680:	4770      	bx	lr

08001682 <HAL_PCD_Stop>:
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd) {
 8001682:	b538      	push	{r3, r4, r5, lr}
    USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001684:	6805      	ldr	r5, [r0, #0]
    __HAL_LOCK(hpcd);
 8001686:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 800168a:	2b01      	cmp	r3, #1
 800168c:	d01d      	beq.n	80016ca <HAL_PCD_Stop+0x48>
 800168e:	4604      	mov	r4, r0
 8001690:	2301      	movs	r3, #1
 8001692:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    __HAL_PCD_DISABLE(hpcd);
 8001696:	4628      	mov	r0, r5
 8001698:	f001 faaa 	bl	8002bf0 <USB_DisableGlobalInt>
    (void) USB_DevDisconnect(hpcd->Instance);
 800169c:	6820      	ldr	r0, [r4, #0]
 800169e:	f001 fe59 	bl	8003354 <USB_DevDisconnect>
    (void) USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016a2:	2110      	movs	r1, #16
 80016a4:	6820      	ldr	r0, [r4, #0]
 80016a6:	f001 faa9 	bl	8002bfc <USB_FlushTxFifo>
    if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) && (hpcd->Init.battery_charging_enable == 1U)) {
 80016aa:	68eb      	ldr	r3, [r5, #12]
 80016ac:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80016b0:	d002      	beq.n	80016b8 <HAL_PCD_Stop+0x36>
 80016b2:	7b63      	ldrb	r3, [r4, #13]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d003      	beq.n	80016c0 <HAL_PCD_Stop+0x3e>
    __HAL_UNLOCK(hpcd);
 80016b8:	2000      	movs	r0, #0
 80016ba:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80016be:	bd38      	pop	{r3, r4, r5, pc}
        USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80016c0:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80016c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016c6:	63ab      	str	r3, [r5, #56]	@ 0x38
 80016c8:	e7f6      	b.n	80016b8 <HAL_PCD_Stop+0x36>
    __HAL_LOCK(hpcd);
 80016ca:	2002      	movs	r0, #2
 80016cc:	e7f7      	b.n	80016be <HAL_PCD_Stop+0x3c>
	...

080016d0 <PCD_EP_OutXfrComplete_int>:
 * @brief  process EP OUT transfer complete interrupt.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum) {
 80016d0:	b570      	push	{r4, r5, r6, lr}
 80016d2:	4604      	mov	r4, r0
 80016d4:	460d      	mov	r5, r1
    USB_OTG_EPTypeDef *ep;
    const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016d6:	6800      	ldr	r0, [r0, #0]
    uint32_t USBx_BASE = (uint32_t) USBx;
    uint32_t gSNPSiD = *(__IO const uint32_t*) (&USBx->CID + 0x1U);
 80016d8:	6c06      	ldr	r6, [r0, #64]	@ 0x40
    uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80016da:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80016de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016e2:	689a      	ldr	r2, [r3, #8]

    if (hpcd->Init.dma_enable == 1U) {
 80016e4:	79a1      	ldrb	r1, [r4, #6]
 80016e6:	2901      	cmp	r1, #1
 80016e8:	d011      	beq.n	800170e <PCD_EP_OutXfrComplete_int+0x3e>
            }
        } else {
            /* ... */
        }
    } else {
        if (gSNPSiD == USB_OTG_CORE_ID_310A) {
 80016ea:	4938      	ldr	r1, [pc, #224]	@ (80017cc <PCD_EP_OutXfrComplete_int+0xfc>)
 80016ec:	428e      	cmp	r6, r1
 80016ee:	d056      	beq.n	800179e <PCD_EP_OutXfrComplete_int+0xce>
#else
                HAL_PCD_DataOutStageCallback(hpcd, (uint8_t) epnum);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
        } else {
            if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U)) {
 80016f0:	b93d      	cbnz	r5, 8001702 <PCD_EP_OutXfrComplete_int+0x32>
 80016f2:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 80016f6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80016fa:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d05e      	beq.n	80017c0 <PCD_EP_OutXfrComplete_int+0xf0>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataOutStageCallback(hpcd, (uint8_t) epnum);
 8001702:	b2e9      	uxtb	r1, r5
 8001704:	4620      	mov	r0, r4
 8001706:	f003 fabf 	bl	8004c88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
    }

    return HAL_OK;
}
 800170a:	2000      	movs	r0, #0
 800170c:	bd70      	pop	{r4, r5, r6, pc}
        if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800170e:	f012 0f08 	tst.w	r2, #8
 8001712:	d009      	beq.n	8001728 <PCD_EP_OutXfrComplete_int+0x58>
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) && ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 8001714:	492e      	ldr	r1, [pc, #184]	@ (80017d0 <PCD_EP_OutXfrComplete_int+0x100>)
 8001716:	428e      	cmp	r6, r1
 8001718:	d9f7      	bls.n	800170a <PCD_EP_OutXfrComplete_int+0x3a>
 800171a:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800171e:	d0f4      	beq.n	800170a <PCD_EP_OutXfrComplete_int+0x3a>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001720:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	e7f0      	b.n	800170a <PCD_EP_OutXfrComplete_int+0x3a>
        } else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001728:	f012 0f20 	tst.w	r2, #32
 800172c:	d002      	beq.n	8001734 <PCD_EP_OutXfrComplete_int+0x64>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800172e:	2220      	movs	r2, #32
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	e7ea      	b.n	800170a <PCD_EP_OutXfrComplete_int+0x3a>
        } else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U) {
 8001734:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8001738:	d1e7      	bne.n	800170a <PCD_EP_OutXfrComplete_int+0x3a>
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) && ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 800173a:	4925      	ldr	r1, [pc, #148]	@ (80017d0 <PCD_EP_OutXfrComplete_int+0x100>)
 800173c:	428e      	cmp	r6, r1
 800173e:	d906      	bls.n	800174e <PCD_EP_OutXfrComplete_int+0x7e>
 8001740:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001744:	d003      	beq.n	800174e <PCD_EP_OutXfrComplete_int+0x7e>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001746:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	e7dd      	b.n	800170a <PCD_EP_OutXfrComplete_int+0x3a>
                ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800174e:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001752:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001756:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001760:	1acb      	subs	r3, r1, r3
 8001762:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
                if (epnum == 0U) {
 8001766:	b97d      	cbnz	r5, 8001788 <PCD_EP_OutXfrComplete_int+0xb8>
                    if (ep->xfer_len == 0U) {
 8001768:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800176c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001770:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 8001774:	b16a      	cbz	r2, 8001792 <PCD_EP_OutXfrComplete_int+0xc2>
                        ep->xfer_buff += ep->xfer_count;
 8001776:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800177a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800177e:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 8001782:	4419      	add	r1, r3
 8001784:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
                HAL_PCD_DataOutStageCallback(hpcd, (uint8_t) epnum);
 8001788:	b2e9      	uxtb	r1, r5
 800178a:	4620      	mov	r0, r4
 800178c:	f003 fa7c 	bl	8004c88 <HAL_PCD_DataOutStageCallback>
 8001790:	e7bb      	b.n	800170a <PCD_EP_OutXfrComplete_int+0x3a>
                        (void) USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t*) hpcd->Setup);
 8001792:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001796:	2101      	movs	r1, #1
 8001798:	f001 fe5c 	bl	8003454 <USB_EP0_OutStart>
 800179c:	e7f4      	b.n	8001788 <PCD_EP_OutXfrComplete_int+0xb8>
            if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX) {
 800179e:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80017a2:	d003      	beq.n	80017ac <PCD_EP_OutXfrComplete_int+0xdc>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80017a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	e7ae      	b.n	800170a <PCD_EP_OutXfrComplete_int+0x3a>
                if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {
 80017ac:	f012 0f20 	tst.w	r2, #32
 80017b0:	d001      	beq.n	80017b6 <PCD_EP_OutXfrComplete_int+0xe6>
                    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017b2:	2220      	movs	r2, #32
 80017b4:	609a      	str	r2, [r3, #8]
                HAL_PCD_DataOutStageCallback(hpcd, (uint8_t) epnum);
 80017b6:	b2e9      	uxtb	r1, r5
 80017b8:	4620      	mov	r0, r4
 80017ba:	f003 fa65 	bl	8004c88 <HAL_PCD_DataOutStageCallback>
 80017be:	e7a4      	b.n	800170a <PCD_EP_OutXfrComplete_int+0x3a>
                (void) USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t*) hpcd->Setup);
 80017c0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80017c4:	2100      	movs	r1, #0
 80017c6:	f001 fe45 	bl	8003454 <USB_EP0_OutStart>
 80017ca:	e79a      	b.n	8001702 <PCD_EP_OutXfrComplete_int+0x32>
 80017cc:	4f54310a 	.word	0x4f54310a
 80017d0:	4f54300a 	.word	0x4f54300a

080017d4 <PCD_EP_OutSetupPacket_int>:
 * @brief  process EP OUT setup packet received interrupt.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum) {
 80017d4:	b538      	push	{r3, r4, r5, lr}
 80017d6:	4604      	mov	r4, r0
    const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017d8:	6803      	ldr	r3, [r0, #0]
    uint32_t USBx_BASE = (uint32_t) USBx;
    uint32_t gSNPSiD = *(__IO const uint32_t*) (&USBx->CID + 0x1U);
 80017da:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
    uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80017dc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80017e0:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

    if ((gSNPSiD > USB_OTG_CORE_ID_300A) && ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 80017e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001820 <PCD_EP_OutSetupPacket_int+0x4c>)
 80017e6:	4295      	cmp	r5, r2
 80017e8:	d907      	bls.n	80017fa <PCD_EP_OutSetupPacket_int+0x26>
 80017ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017ee:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 80017f2:	d002      	beq.n	80017fa <PCD_EP_OutSetupPacket_int+0x26>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80017f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017f8:	609a      	str	r2, [r3, #8]

    /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
    HAL_PCD_SetupStageCallback(hpcd);
 80017fa:	4620      	mov	r0, r4
 80017fc:	f003 fa3c 	bl	8004c78 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U)) {
 8001800:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001802:	429d      	cmp	r5, r3
 8001804:	d902      	bls.n	800180c <PCD_EP_OutSetupPacket_int+0x38>
 8001806:	79a3      	ldrb	r3, [r4, #6]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d001      	beq.n	8001810 <PCD_EP_OutSetupPacket_int+0x3c>
        (void) USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t*) hpcd->Setup);
    }

    return HAL_OK;
}
 800180c:	2000      	movs	r0, #0
 800180e:	bd38      	pop	{r3, r4, r5, pc}
        (void) USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t*) hpcd->Setup);
 8001810:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001814:	2101      	movs	r1, #1
 8001816:	6820      	ldr	r0, [r4, #0]
 8001818:	f001 fe1c 	bl	8003454 <USB_EP0_OutStart>
 800181c:	e7f6      	b.n	800180c <PCD_EP_OutSetupPacket_int+0x38>
 800181e:	bf00      	nop
 8001820:	4f54300a 	.word	0x4f54300a

08001824 <HAL_PCD_SetAddress>:
    __HAL_LOCK(hpcd);
 8001824:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8001828:	2b01      	cmp	r3, #1
 800182a:	d00c      	beq.n	8001846 <HAL_PCD_SetAddress+0x22>
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address) {
 800182c:	b510      	push	{r4, lr}
 800182e:	4604      	mov	r4, r0
    __HAL_LOCK(hpcd);
 8001830:	2301      	movs	r3, #1
 8001832:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    hpcd->USB_Address = address;
 8001836:	7441      	strb	r1, [r0, #17]
    (void) USB_SetDevAddress(hpcd->Instance, address);
 8001838:	6800      	ldr	r0, [r0, #0]
 800183a:	f001 fd6d 	bl	8003318 <USB_SetDevAddress>
    __HAL_UNLOCK(hpcd);
 800183e:	2000      	movs	r0, #0
 8001840:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001844:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hpcd);
 8001846:	2002      	movs	r0, #2
}
 8001848:	4770      	bx	lr

0800184a <HAL_PCD_EP_Open>:
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type) {
 800184a:	b538      	push	{r3, r4, r5, lr}
 800184c:	4605      	mov	r5, r0
 800184e:	468c      	mov	ip, r1
    if ((ep_addr & 0x80U) == 0x80U) {
 8001850:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001854:	d12b      	bne.n	80018ae <HAL_PCD_EP_Open+0x64>
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001856:	f001 0e0f 	and.w	lr, r1, #15
 800185a:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 800185e:	00a4      	lsls	r4, r4, #2
 8001860:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 8001864:	4404      	add	r4, r0
 8001866:	1d21      	adds	r1, r4, #4
        ep->is_in = 0U;
 8001868:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 800186c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001870:	2000      	movs	r0, #0
 8001872:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
    ep->num = ep_addr & EP_ADDR_MSK;
 8001876:	f00c 0c0f 	and.w	ip, ip, #15
 800187a:	f881 c000 	strb.w	ip, [r1]
    ep->maxpacket = (uint32_t) ep_mps & 0x7FFU;
 800187e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001882:	608a      	str	r2, [r1, #8]
    ep->type = ep_type;
 8001884:	710b      	strb	r3, [r1, #4]
    if (ep->is_in != 0U) {
 8001886:	784a      	ldrb	r2, [r1, #1]
 8001888:	b10a      	cbz	r2, 800188e <HAL_PCD_EP_Open+0x44>
        ep->tx_fifo_num = ep->num;
 800188a:	f8a1 c01a 	strh.w	ip, [r1, #26]
    if (ep_type == EP_TYPE_BULK) {
 800188e:	2b02      	cmp	r3, #2
 8001890:	d01c      	beq.n	80018cc <HAL_PCD_EP_Open+0x82>
    __HAL_LOCK(hpcd);
 8001892:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 8001896:	2b01      	cmp	r3, #1
 8001898:	d01b      	beq.n	80018d2 <HAL_PCD_EP_Open+0x88>
 800189a:	2301      	movs	r3, #1
 800189c:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
    (void) USB_ActivateEndpoint(hpcd->Instance, ep);
 80018a0:	6828      	ldr	r0, [r5, #0]
 80018a2:	f001 fad6 	bl	8002e52 <USB_ActivateEndpoint>
    __HAL_UNLOCK(hpcd);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 80018ac:	bd38      	pop	{r3, r4, r5, pc}
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ae:	f001 000f 	and.w	r0, r1, #15
 80018b2:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 80018b6:	0089      	lsls	r1, r1, #2
 80018b8:	3110      	adds	r1, #16
 80018ba:	4429      	add	r1, r5
 80018bc:	3104      	adds	r1, #4
        ep->is_in = 1U;
 80018be:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80018c2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80018c6:	2401      	movs	r4, #1
 80018c8:	7544      	strb	r4, [r0, #21]
 80018ca:	e7d4      	b.n	8001876 <HAL_PCD_EP_Open+0x2c>
        ep->data_pid_start = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	714b      	strb	r3, [r1, #5]
 80018d0:	e7df      	b.n	8001892 <HAL_PCD_EP_Open+0x48>
    __HAL_LOCK(hpcd);
 80018d2:	2002      	movs	r0, #2
 80018d4:	e7ea      	b.n	80018ac <HAL_PCD_EP_Open+0x62>

080018d6 <HAL_PCD_EP_Receive>:
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len) {
 80018d6:	b510      	push	{r4, lr}
 80018d8:	4614      	mov	r4, r2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018da:	f001 0c0f 	and.w	ip, r1, #15
 80018de:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80018e2:	0089      	lsls	r1, r1, #2
 80018e4:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80018e8:	4401      	add	r1, r0
 80018ea:	3104      	adds	r1, #4
    ep->xfer_buff = pBuf;
 80018ec:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80018f0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80018f4:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
    ep->xfer_len = len;
 80018f8:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
    ep->xfer_count = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
    ep->is_in = 0U;
 8001902:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
    ep->num = ep_addr & EP_ADDR_MSK;
 8001906:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
    if (hpcd->Init.dma_enable == 1U) {
 800190a:	7982      	ldrb	r2, [r0, #6]
 800190c:	2a01      	cmp	r2, #1
 800190e:	d004      	beq.n	800191a <HAL_PCD_EP_Receive+0x44>
    (void) USB_EPStartXfer(hpcd->Instance, ep, (uint8_t) hpcd->Init.dma_enable);
 8001910:	6800      	ldr	r0, [r0, #0]
 8001912:	f001 fb61 	bl	8002fd8 <USB_EPStartXfer>
}
 8001916:	2000      	movs	r0, #0
 8001918:	bd10      	pop	{r4, pc}
        ep->dma_addr = (uint32_t) pBuf;
 800191a:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 800191e:	e7f7      	b.n	8001910 <HAL_PCD_EP_Receive+0x3a>

08001920 <HAL_PCD_EP_Transmit>:
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len) {
 8001920:	b510      	push	{r4, lr}
 8001922:	4614      	mov	r4, r2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001924:	f001 0c0f 	and.w	ip, r1, #15
 8001928:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 800192c:	0089      	lsls	r1, r1, #2
 800192e:	3110      	adds	r1, #16
 8001930:	4401      	add	r1, r0
 8001932:	3104      	adds	r1, #4
    ep->xfer_buff = pBuf;
 8001934:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8001938:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800193c:	f8ce 2020 	str.w	r2, [lr, #32]
    ep->xfer_len = len;
 8001940:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
    ep->xfer_count = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
    ep->is_in = 1U;
 800194a:	2301      	movs	r3, #1
 800194c:	f88e 3015 	strb.w	r3, [lr, #21]
    ep->num = ep_addr & EP_ADDR_MSK;
 8001950:	f88e c014 	strb.w	ip, [lr, #20]
    if (hpcd->Init.dma_enable == 1U) {
 8001954:	7982      	ldrb	r2, [r0, #6]
 8001956:	429a      	cmp	r2, r3
 8001958:	d004      	beq.n	8001964 <HAL_PCD_EP_Transmit+0x44>
    (void) USB_EPStartXfer(hpcd->Instance, ep, (uint8_t) hpcd->Init.dma_enable);
 800195a:	6800      	ldr	r0, [r0, #0]
 800195c:	f001 fb3c 	bl	8002fd8 <USB_EPStartXfer>
}
 8001960:	2000      	movs	r0, #0
 8001962:	bd10      	pop	{r4, pc}
        ep->dma_addr = (uint32_t) pBuf;
 8001964:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 8001968:	e7f7      	b.n	800195a <HAL_PCD_EP_Transmit+0x3a>

0800196a <HAL_PCD_EP_SetStall>:
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr) {
 800196a:	b538      	push	{r3, r4, r5, lr}
    if (((uint32_t) ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints) {
 800196c:	f001 050f 	and.w	r5, r1, #15
 8001970:	7902      	ldrb	r2, [r0, #4]
 8001972:	42aa      	cmp	r2, r5
 8001974:	d338      	bcc.n	80019e8 <HAL_PCD_EP_SetStall+0x7e>
 8001976:	4604      	mov	r4, r0
 8001978:	460b      	mov	r3, r1
    if ((0x80U & ep_addr) == 0x80U) {
 800197a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800197e:	d11f      	bne.n	80019c0 <HAL_PCD_EP_SetStall+0x56>
        ep = &hpcd->OUT_ep[ep_addr];
 8001980:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001984:	0089      	lsls	r1, r1, #2
 8001986:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 800198a:	4401      	add	r1, r0
 800198c:	3104      	adds	r1, #4
        ep->is_in = 0U;
 800198e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001992:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
    ep->is_stall = 1U;
 800199c:	2301      	movs	r3, #1
 800199e:	708b      	strb	r3, [r1, #2]
    ep->num = ep_addr & EP_ADDR_MSK;
 80019a0:	700d      	strb	r5, [r1, #0]
    __HAL_LOCK(hpcd);
 80019a2:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d020      	beq.n	80019ec <HAL_PCD_EP_SetStall+0x82>
 80019aa:	2301      	movs	r3, #1
 80019ac:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
    (void) USB_EPSetStall(hpcd->Instance, ep);
 80019b0:	6820      	ldr	r0, [r4, #0]
 80019b2:	f001 fc56 	bl	8003262 <USB_EPSetStall>
    if ((ep_addr & EP_ADDR_MSK) == 0U) {
 80019b6:	b185      	cbz	r5, 80019da <HAL_PCD_EP_SetStall+0x70>
    __HAL_UNLOCK(hpcd);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80019be:	bd38      	pop	{r3, r4, r5, pc}
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c0:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 80019c4:	0089      	lsls	r1, r1, #2
 80019c6:	3110      	adds	r1, #16
 80019c8:	4401      	add	r1, r0
 80019ca:	3104      	adds	r1, #4
        ep->is_in = 1U;
 80019cc:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 80019d0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80019d4:	2201      	movs	r2, #1
 80019d6:	755a      	strb	r2, [r3, #21]
 80019d8:	e7e0      	b.n	800199c <HAL_PCD_EP_SetStall+0x32>
        (void) USB_EP0_OutStart(hpcd->Instance, (uint8_t) hpcd->Init.dma_enable, (uint8_t*) hpcd->Setup);
 80019da:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80019de:	79a1      	ldrb	r1, [r4, #6]
 80019e0:	6820      	ldr	r0, [r4, #0]
 80019e2:	f001 fd37 	bl	8003454 <USB_EP0_OutStart>
 80019e6:	e7e7      	b.n	80019b8 <HAL_PCD_EP_SetStall+0x4e>
        return HAL_ERROR;
 80019e8:	2001      	movs	r0, #1
 80019ea:	e7e8      	b.n	80019be <HAL_PCD_EP_SetStall+0x54>
    __HAL_LOCK(hpcd);
 80019ec:	2002      	movs	r0, #2
 80019ee:	e7e6      	b.n	80019be <HAL_PCD_EP_SetStall+0x54>

080019f0 <HAL_PCD_EP_ClrStall>:
    if (((uint32_t) ep_addr & 0x0FU) > hpcd->Init.dev_endpoints) {
 80019f0:	f001 030f 	and.w	r3, r1, #15
 80019f4:	7902      	ldrb	r2, [r0, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d330      	bcc.n	8001a5c <HAL_PCD_EP_ClrStall+0x6c>
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr) {
 80019fa:	b510      	push	{r4, lr}
 80019fc:	4604      	mov	r4, r0
    if ((0x80U & ep_addr) == 0x80U) {
 80019fe:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001a02:	d11e      	bne.n	8001a42 <HAL_PCD_EP_ClrStall+0x52>
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a04:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001a08:	0089      	lsls	r1, r1, #2
 8001a0a:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8001a0e:	4401      	add	r1, r0
 8001a10:	3104      	adds	r1, #4
        ep->is_in = 0U;
 8001a12:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001a16:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
    ep->is_stall = 0U;
 8001a20:	2200      	movs	r2, #0
 8001a22:	708a      	strb	r2, [r1, #2]
    ep->num = ep_addr & EP_ADDR_MSK;
 8001a24:	700b      	strb	r3, [r1, #0]
    __HAL_LOCK(hpcd);
 8001a26:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d018      	beq.n	8001a60 <HAL_PCD_EP_ClrStall+0x70>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
    (void) USB_EPClearStall(hpcd->Instance, ep);
 8001a34:	6820      	ldr	r0, [r4, #0]
 8001a36:	f001 fc41 	bl	80032bc <USB_EPClearStall>
    __HAL_UNLOCK(hpcd);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001a40:	bd10      	pop	{r4, pc}
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a42:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001a46:	0089      	lsls	r1, r1, #2
 8001a48:	3110      	adds	r1, #16
 8001a4a:	4401      	add	r1, r0
 8001a4c:	3104      	adds	r1, #4
        ep->is_in = 1U;
 8001a4e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001a52:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001a56:	2001      	movs	r0, #1
 8001a58:	7550      	strb	r0, [r2, #21]
 8001a5a:	e7e1      	b.n	8001a20 <HAL_PCD_EP_ClrStall+0x30>
        return HAL_ERROR;
 8001a5c:	2001      	movs	r0, #1
}
 8001a5e:	4770      	bx	lr
    __HAL_LOCK(hpcd);
 8001a60:	2002      	movs	r0, #2
 8001a62:	e7ed      	b.n	8001a40 <HAL_PCD_EP_ClrStall+0x50>

08001a64 <HAL_PCD_EP_Abort>:
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr) {
 8001a64:	b508      	push	{r3, lr}
    if ((0x80U & ep_addr) == 0x80U) {
 8001a66:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001a6a:	d10c      	bne.n	8001a86 <HAL_PCD_EP_Abort+0x22>
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a6c:	f001 010f 	and.w	r1, r1, #15
 8001a70:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001a74:	0089      	lsls	r1, r1, #2
 8001a76:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8001a7a:	4401      	add	r1, r0
 8001a7c:	3104      	adds	r1, #4
    ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001a7e:	6800      	ldr	r0, [r0, #0]
 8001a80:	f001 fa34 	bl	8002eec <USB_EPStopXfer>
}
 8001a84:	bd08      	pop	{r3, pc}
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a86:	f001 010f 	and.w	r1, r1, #15
 8001a8a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001a8e:	0089      	lsls	r1, r1, #2
 8001a90:	3110      	adds	r1, #16
 8001a92:	4401      	add	r1, r0
 8001a94:	3104      	adds	r1, #4
 8001a96:	e7f2      	b.n	8001a7e <HAL_PCD_EP_Abort+0x1a>

08001a98 <HAL_PCD_IRQHandler>:
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd) {
 8001a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	4604      	mov	r4, r0
    USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001aa0:	6805      	ldr	r5, [r0, #0]
    if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE) {
 8001aa2:	4628      	mov	r0, r5
 8001aa4:	f001 fc93 	bl	80033ce <USB_GetMode>
 8001aa8:	b110      	cbz	r0, 8001ab0 <HAL_PCD_IRQHandler+0x18>
}
 8001aaa:	b003      	add	sp, #12
 8001aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ab0:	4606      	mov	r6, r0
        if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) {
 8001ab2:	6820      	ldr	r0, [r4, #0]
 8001ab4:	f001 fc5c 	bl	8003370 <USB_ReadInterrupts>
 8001ab8:	2800      	cmp	r0, #0
 8001aba:	d0f6      	beq.n	8001aaa <HAL_PCD_IRQHandler+0x12>
        hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001abc:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8001ac6:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS)) {
 8001aca:	6820      	ldr	r0, [r4, #0]
 8001acc:	f001 fc50 	bl	8003370 <USB_ReadInterrupts>
 8001ad0:	f010 0f02 	tst.w	r0, #2
 8001ad4:	d004      	beq.n	8001ae0 <HAL_PCD_IRQHandler+0x48>
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ad6:	6822      	ldr	r2, [r4, #0]
 8001ad8:	6953      	ldr	r3, [r2, #20]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	6153      	str	r3, [r2, #20]
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL)) {
 8001ae0:	6820      	ldr	r0, [r4, #0]
 8001ae2:	f001 fc45 	bl	8003370 <USB_ReadInterrupts>
 8001ae6:	f010 0f10 	tst.w	r0, #16
 8001aea:	d015      	beq.n	8001b18 <HAL_PCD_IRQHandler+0x80>
            USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aec:	6822      	ldr	r2, [r4, #0]
 8001aee:	6993      	ldr	r3, [r2, #24]
 8001af0:	f023 0310 	bic.w	r3, r3, #16
 8001af4:	6193      	str	r3, [r2, #24]
            RegVal = USBx->GRXSTSP;
 8001af6:	f8d5 8020 	ldr.w	r8, [r5, #32]
            ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001afa:	f008 090f 	and.w	r9, r8, #15
            if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_DATA_UPDT) {
 8001afe:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 8001b02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001b06:	d04c      	beq.n	8001ba2 <HAL_PCD_IRQHandler+0x10a>
            } else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT) {
 8001b08:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001b0c:	d06f      	beq.n	8001bee <HAL_PCD_IRQHandler+0x156>
            USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b0e:	6822      	ldr	r2, [r4, #0]
 8001b10:	6993      	ldr	r3, [r2, #24]
 8001b12:	f043 0310 	orr.w	r3, r3, #16
 8001b16:	6193      	str	r3, [r2, #24]
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT)) {
 8001b18:	6820      	ldr	r0, [r4, #0]
 8001b1a:	f001 fc29 	bl	8003370 <USB_ReadInterrupts>
 8001b1e:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8001b22:	d176      	bne.n	8001c12 <HAL_PCD_IRQHandler+0x17a>
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT)) {
 8001b24:	6820      	ldr	r0, [r4, #0]
 8001b26:	f001 fc23 	bl	8003370 <USB_ReadInterrupts>
 8001b2a:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8001b2e:	f040 80e0 	bne.w	8001cf2 <HAL_PCD_IRQHandler+0x25a>
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT)) {
 8001b32:	6820      	ldr	r0, [r4, #0]
 8001b34:	f001 fc1c 	bl	8003370 <USB_ReadInterrupts>
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	f2c0 8161 	blt.w	8001e00 <HAL_PCD_IRQHandler+0x368>
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP)) {
 8001b3e:	6820      	ldr	r0, [r4, #0]
 8001b40:	f001 fc16 	bl	8003370 <USB_ReadInterrupts>
 8001b44:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8001b48:	d009      	beq.n	8001b5e <HAL_PCD_IRQHandler+0xc6>
            if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS) {
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f013 0f01 	tst.w	r3, #1
 8001b50:	f040 816e 	bne.w	8001e30 <HAL_PCD_IRQHandler+0x398>
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b54:	6822      	ldr	r2, [r4, #0]
 8001b56:	6953      	ldr	r3, [r2, #20]
 8001b58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b5c:	6153      	str	r3, [r2, #20]
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST)) {
 8001b5e:	6820      	ldr	r0, [r4, #0]
 8001b60:	f001 fc06 	bl	8003370 <USB_ReadInterrupts>
 8001b64:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8001b68:	f040 8166 	bne.w	8001e38 <HAL_PCD_IRQHandler+0x3a0>
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE)) {
 8001b6c:	6820      	ldr	r0, [r4, #0]
 8001b6e:	f001 fbff 	bl	8003370 <USB_ReadInterrupts>
 8001b72:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8001b76:	f040 81b3 	bne.w	8001ee0 <HAL_PCD_IRQHandler+0x448>
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF)) {
 8001b7a:	6820      	ldr	r0, [r4, #0]
 8001b7c:	f001 fbf8 	bl	8003370 <USB_ReadInterrupts>
 8001b80:	f010 0f08 	tst.w	r0, #8
 8001b84:	f040 81c4 	bne.w	8001f10 <HAL_PCD_IRQHandler+0x478>
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF)) {
 8001b88:	6820      	ldr	r0, [r4, #0]
 8001b8a:	f001 fbf1 	bl	8003370 <USB_ReadInterrupts>
 8001b8e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8001b92:	f000 81d7 	beq.w	8001f44 <HAL_PCD_IRQHandler+0x4ac>
            USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001b96:	69ab      	ldr	r3, [r5, #24]
 8001b98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b9c:	61ab      	str	r3, [r5, #24]
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8001b9e:	2601      	movs	r6, #1
 8001ba0:	e1c0      	b.n	8001f24 <HAL_PCD_IRQHandler+0x48c>
                if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U) {
 8001ba2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001ba6:	ea18 0f03 	tst.w	r8, r3
 8001baa:	d0b0      	beq.n	8001b0e <HAL_PCD_IRQHandler+0x76>
                    (void) USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t) ((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001bac:	ea4f 1a18 	mov.w	sl, r8, lsr #4
 8001bb0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 8001bba:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8001bbe:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8001bc2:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8001bc6:	4628      	mov	r0, r5
 8001bc8:	f001 fb28 	bl	800321c <USB_ReadPacket>
                    ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bcc:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 8001bd0:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8001bd4:	4453      	add	r3, sl
 8001bd6:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
                    ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bda:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 8001bde:	9a01      	ldr	r2, [sp, #4]
 8001be0:	444a      	add	r2, r9
 8001be2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001be6:	4453      	add	r3, sl
 8001be8:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8001bec:	e78f      	b.n	8001b0e <HAL_PCD_IRQHandler+0x76>
                (void) USB_ReadPacket(USBx, (uint8_t*) hpcd->Setup, 8U);
 8001bee:	2208      	movs	r2, #8
 8001bf0:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8001bf4:	4628      	mov	r0, r5
 8001bf6:	f001 fb11 	bl	800321c <USB_ReadPacket>
                ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bfa:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001bfe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c02:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8001c06:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8001c0a:	4442      	add	r2, r8
 8001c0c:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 8001c10:	e77d      	b.n	8001b0e <HAL_PCD_IRQHandler+0x76>
            ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c12:	6820      	ldr	r0, [r4, #0]
 8001c14:	f001 fbb0 	bl	8003378 <USB_ReadDevAllOutEpInterrupt>
 8001c18:	4680      	mov	r8, r0
            epnum = 0U;
 8001c1a:	46b1      	mov	r9, r6
            while (ep_intr != 0U) {
 8001c1c:	e035      	b.n	8001c8a <HAL_PCD_IRQHandler+0x1f2>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c1e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001c22:	2201      	movs	r2, #1
 8001c24:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
                        (void) PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c28:	4649      	mov	r1, r9
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f7ff fd50 	bl	80016d0 <PCD_EP_OutXfrComplete_int>
 8001c30:	e03c      	b.n	8001cac <HAL_PCD_IRQHandler+0x214>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c32:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001c36:	2208      	movs	r2, #8
 8001c38:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
                        (void) PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c3c:	4649      	mov	r1, r9
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f7ff fdc8 	bl	80017d4 <PCD_EP_OutSetupPacket_int>
 8001c44:	e035      	b.n	8001cb2 <HAL_PCD_IRQHandler+0x21a>
                        if (ep->is_iso_incomplete == 1U) {
 8001c46:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001c4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c4e:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d041      	beq.n	8001cda <HAL_PCD_IRQHandler+0x242>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001c56:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
                    if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {
 8001c60:	f01a 0f20 	tst.w	sl, #32
 8001c64:	d004      	beq.n	8001c70 <HAL_PCD_IRQHandler+0x1d8>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c66:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
                    if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK) {
 8001c70:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8001c74:	d005      	beq.n	8001c82 <HAL_PCD_IRQHandler+0x1ea>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c76:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001c7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c7e:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
                epnum++;
 8001c82:	f109 0901 	add.w	r9, r9, #1
                ep_intr >>= 1U;
 8001c86:	ea4f 0858 	mov.w	r8, r8, lsr #1
            while (ep_intr != 0U) {
 8001c8a:	f1b8 0f00 	cmp.w	r8, #0
 8001c8e:	f43f af49 	beq.w	8001b24 <HAL_PCD_IRQHandler+0x8c>
                if ((ep_intr & 0x1U) != 0U) {
 8001c92:	f018 0f01 	tst.w	r8, #1
 8001c96:	d0f4      	beq.n	8001c82 <HAL_PCD_IRQHandler+0x1ea>
                    epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t) epnum);
 8001c98:	fa5f fb89 	uxtb.w	fp, r9
 8001c9c:	4659      	mov	r1, fp
 8001c9e:	6820      	ldr	r0, [r4, #0]
 8001ca0:	f001 fb7a 	bl	8003398 <USB_ReadDevOutEPInterrupt>
 8001ca4:	4682      	mov	sl, r0
                    if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC) {
 8001ca6:	f010 0f01 	tst.w	r0, #1
 8001caa:	d1b8      	bne.n	8001c1e <HAL_PCD_IRQHandler+0x186>
                    if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) {
 8001cac:	f01a 0f08 	tst.w	sl, #8
 8001cb0:	d1bf      	bne.n	8001c32 <HAL_PCD_IRQHandler+0x19a>
                    if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS) {
 8001cb2:	f01a 0f10 	tst.w	sl, #16
 8001cb6:	d004      	beq.n	8001cc2 <HAL_PCD_IRQHandler+0x22a>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001cb8:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
                    if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD) {
 8001cc2:	f01a 0f02 	tst.w	sl, #2
 8001cc6:	d0cb      	beq.n	8001c60 <HAL_PCD_IRQHandler+0x1c8>
                        if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF) {
 8001cc8:	696b      	ldr	r3, [r5, #20]
 8001cca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001cce:	d0ba      	beq.n	8001c46 <HAL_PCD_IRQHandler+0x1ae>
                            USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	e7b5      	b.n	8001c46 <HAL_PCD_IRQHandler+0x1ae>
                            ep->is_iso_incomplete = 0U;
 8001cda:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001cde:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
                            HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t) epnum);
 8001ce8:	4659      	mov	r1, fp
 8001cea:	4620      	mov	r0, r4
 8001cec:	f003 f81a 	bl	8004d24 <HAL_PCD_ISOOUTIncompleteCallback>
 8001cf0:	e7b1      	b.n	8001c56 <HAL_PCD_IRQHandler+0x1be>
            ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001cf2:	6820      	ldr	r0, [r4, #0]
 8001cf4:	f001 fb48 	bl	8003388 <USB_ReadDevAllInEpInterrupt>
 8001cf8:	4680      	mov	r8, r0
            epnum = 0U;
 8001cfa:	46b1      	mov	r9, r6
            while (ep_intr != 0U) {
 8001cfc:	e025      	b.n	8001d4a <HAL_PCD_IRQHandler+0x2b2>
                        HAL_PCD_DataInStageCallback(hpcd, (uint8_t) epnum);
 8001cfe:	4659      	mov	r1, fp
 8001d00:	4620      	mov	r0, r4
 8001d02:	f002 ffcd 	bl	8004ca0 <HAL_PCD_DataInStageCallback>
                    if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC) {
 8001d06:	f01a 0f08 	tst.w	sl, #8
 8001d0a:	d004      	beq.n	8001d16 <HAL_PCD_IRQHandler+0x27e>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d0c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001d10:	2208      	movs	r2, #8
 8001d12:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
                    if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE) {
 8001d16:	f01a 0f10 	tst.w	sl, #16
 8001d1a:	d004      	beq.n	8001d26 <HAL_PCD_IRQHandler+0x28e>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d1c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001d20:	2210      	movs	r2, #16
 8001d22:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
                    if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE) {
 8001d26:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8001d2a:	d004      	beq.n	8001d36 <HAL_PCD_IRQHandler+0x29e>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d2c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001d30:	2240      	movs	r2, #64	@ 0x40
 8001d32:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
                    if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD) {
 8001d36:	f01a 0f02 	tst.w	sl, #2
 8001d3a:	d140      	bne.n	8001dbe <HAL_PCD_IRQHandler+0x326>
                    if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE) {
 8001d3c:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8001d40:	d159      	bne.n	8001df6 <HAL_PCD_IRQHandler+0x35e>
                epnum++;
 8001d42:	f109 0901 	add.w	r9, r9, #1
                ep_intr >>= 1U;
 8001d46:	ea4f 0858 	mov.w	r8, r8, lsr #1
            while (ep_intr != 0U) {
 8001d4a:	f1b8 0f00 	cmp.w	r8, #0
 8001d4e:	f43f aef0 	beq.w	8001b32 <HAL_PCD_IRQHandler+0x9a>
                if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d52:	f018 0f01 	tst.w	r8, #1
 8001d56:	d0f4      	beq.n	8001d42 <HAL_PCD_IRQHandler+0x2aa>
                    epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t) epnum);
 8001d58:	fa5f fb89 	uxtb.w	fp, r9
 8001d5c:	4659      	mov	r1, fp
 8001d5e:	6820      	ldr	r0, [r4, #0]
 8001d60:	f001 fb23 	bl	80033aa <USB_ReadDevInEPInterrupt>
 8001d64:	4682      	mov	sl, r0
                    if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC) {
 8001d66:	f010 0f01 	tst.w	r0, #1
 8001d6a:	d0cc      	beq.n	8001d06 <HAL_PCD_IRQHandler+0x26e>
                        fifoemptymsk = (uint32_t) (0x1UL << (epnum & EP_ADDR_MSK));
 8001d6c:	f009 020f 	and.w	r2, r9, #15
 8001d70:	2101      	movs	r1, #1
 8001d72:	fa01 f202 	lsl.w	r2, r1, r2
                        USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d78:	ea23 0302 	bic.w	r3, r3, r2
 8001d7c:	637b      	str	r3, [r7, #52]	@ 0x34
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d7e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001d82:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
                        if (hpcd->Init.dma_enable == 1U) {
 8001d86:	79a3      	ldrb	r3, [r4, #6]
 8001d88:	428b      	cmp	r3, r1
 8001d8a:	d1b8      	bne.n	8001cfe <HAL_PCD_IRQHandler+0x266>
                            hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d8c:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001d90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001d94:	6a1a      	ldr	r2, [r3, #32]
 8001d96:	69d9      	ldr	r1, [r3, #28]
 8001d98:	440a      	add	r2, r1
 8001d9a:	621a      	str	r2, [r3, #32]
                            if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U)) {
 8001d9c:	f1b9 0f00 	cmp.w	r9, #0
 8001da0:	d1ad      	bne.n	8001cfe <HAL_PCD_IRQHandler+0x266>
 8001da2:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001da6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1a6      	bne.n	8001cfe <HAL_PCD_IRQHandler+0x266>
                                (void) USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t*) hpcd->Setup);
 8001db0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001db4:	2101      	movs	r1, #1
 8001db6:	6820      	ldr	r0, [r4, #0]
 8001db8:	f001 fb4c 	bl	8003454 <USB_EP0_OutStart>
 8001dbc:	e79f      	b.n	8001cfe <HAL_PCD_IRQHandler+0x266>
                        (void) USB_FlushTxFifo(USBx, epnum);
 8001dbe:	4649      	mov	r1, r9
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	f000 ff1b 	bl	8002bfc <USB_FlushTxFifo>
                        if (ep->is_iso_incomplete == 1U) {
 8001dc6:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001dca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001dce:	7ddb      	ldrb	r3, [r3, #23]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d005      	beq.n	8001de0 <HAL_PCD_IRQHandler+0x348>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001dd4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8001dde:	e7ad      	b.n	8001d3c <HAL_PCD_IRQHandler+0x2a4>
                            ep->is_iso_incomplete = 0U;
 8001de0:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001de4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001de8:	2200      	movs	r2, #0
 8001dea:	75da      	strb	r2, [r3, #23]
                            HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t) epnum);
 8001dec:	4659      	mov	r1, fp
 8001dee:	4620      	mov	r0, r4
 8001df0:	f002 ff9e 	bl	8004d30 <HAL_PCD_ISOINIncompleteCallback>
 8001df4:	e7ee      	b.n	8001dd4 <HAL_PCD_IRQHandler+0x33c>
                        (void) PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001df6:	4649      	mov	r1, r9
 8001df8:	4620      	mov	r0, r4
 8001dfa:	f7ff fb37 	bl	800146c <PCD_WriteEmptyTxFifo>
 8001dfe:	e7a0      	b.n	8001d42 <HAL_PCD_IRQHandler+0x2aa>
            USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	607b      	str	r3, [r7, #4]
            if (hpcd->LPM_State == LPM_L1) {
 8001e08:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d008      	beq.n	8001e22 <HAL_PCD_IRQHandler+0x38a>
                HAL_PCD_ResumeCallback(hpcd);
 8001e10:	4620      	mov	r0, r4
 8001e12:	f002 ff81 	bl	8004d18 <HAL_PCD_ResumeCallback>
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e16:	6822      	ldr	r2, [r4, #0]
 8001e18:	6953      	ldr	r3, [r2, #20]
 8001e1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001e1e:	6153      	str	r3, [r2, #20]
 8001e20:	e68d      	b.n	8001b3e <HAL_PCD_IRQHandler+0xa6>
                hpcd->LPM_State = LPM_L0;
 8001e22:	2100      	movs	r1, #0
 8001e24:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
                HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e28:	4620      	mov	r0, r4
 8001e2a:	f000 f93e 	bl	80020aa <HAL_PCDEx_LPM_Callback>
 8001e2e:	e7f2      	b.n	8001e16 <HAL_PCD_IRQHandler+0x37e>
                HAL_PCD_SuspendCallback(hpcd);
 8001e30:	4620      	mov	r0, r4
 8001e32:	f002 ff59 	bl	8004ce8 <HAL_PCD_SuspendCallback>
 8001e36:	e68d      	b.n	8001b54 <HAL_PCD_IRQHandler+0xbc>
            USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	607b      	str	r3, [r7, #4]
            (void) USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e40:	2110      	movs	r1, #16
 8001e42:	6820      	ldr	r0, [r4, #0]
 8001e44:	f000 feda 	bl	8002bfc <USB_FlushTxFifo>
            for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8001e48:	e01a      	b.n	8001e80 <HAL_PCD_IRQHandler+0x3e8>
                USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e4a:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001e4e:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8001e52:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
                USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e56:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8001e5a:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001e5e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
                USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e62:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
                USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001e66:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8001e6a:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001e6e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
                USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001e72:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8001e76:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8001e7a:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
            for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8001e7e:	3601      	adds	r6, #1
 8001e80:	7923      	ldrb	r3, [r4, #4]
 8001e82:	42b3      	cmp	r3, r6
 8001e84:	d8e1      	bhi.n	8001e4a <HAL_PCD_IRQHandler+0x3b2>
            USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001e8c:	61fb      	str	r3, [r7, #28]
            if (hpcd->Init.use_dedicated_ep1 != 0U) {
 8001e8e:	7be3      	ldrb	r3, [r4, #15]
 8001e90:	b1db      	cbz	r3, 8001eca <HAL_PCD_IRQHandler+0x432>
                USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e96:	f043 030b 	orr.w	r3, r3, #11
 8001e9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ea0:	f043 030b 	orr.w	r3, r3, #11
 8001ea4:	647b      	str	r3, [r7, #68]	@ 0x44
            USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ea6:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 8001eaa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001eae:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
            (void) USB_EP0_OutStart(hpcd->Instance, (uint8_t) hpcd->Init.dma_enable, (uint8_t*) hpcd->Setup);
 8001eb2:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001eb6:	79a1      	ldrb	r1, [r4, #6]
 8001eb8:	6820      	ldr	r0, [r4, #0]
 8001eba:	f001 facb 	bl	8003454 <USB_EP0_OutStart>
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ebe:	6822      	ldr	r2, [r4, #0]
 8001ec0:	6953      	ldr	r3, [r2, #20]
 8001ec2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ec6:	6153      	str	r3, [r2, #20]
 8001ec8:	e650      	b.n	8001b6c <HAL_PCD_IRQHandler+0xd4>
                USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ed0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001ed4:	617b      	str	r3, [r7, #20]
                USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	f043 030b 	orr.w	r3, r3, #11
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	e7e2      	b.n	8001ea6 <HAL_PCD_IRQHandler+0x40e>
            (void) USB_ActivateSetup(hpcd->Instance);
 8001ee0:	6820      	ldr	r0, [r4, #0]
 8001ee2:	f001 faa9 	bl	8003438 <USB_ActivateSetup>
            hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ee6:	6820      	ldr	r0, [r4, #0]
 8001ee8:	f000 ffa2 	bl	8002e30 <USB_GetDevSpeed>
 8001eec:	71e0      	strb	r0, [r4, #7]
            (void) USB_SetTurnaroundTime(hpcd->Instance, HAL_RCC_GetHCLKFreq(), (uint8_t) hpcd->Init.speed);
 8001eee:	6826      	ldr	r6, [r4, #0]
 8001ef0:	f000 fbdc 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 8001ef4:	4601      	mov	r1, r0
 8001ef6:	79e2      	ldrb	r2, [r4, #7]
 8001ef8:	4630      	mov	r0, r6
 8001efa:	f000 fe01 	bl	8002b00 <USB_SetTurnaroundTime>
            HAL_PCD_ResetCallback(hpcd);
 8001efe:	4620      	mov	r0, r4
 8001f00:	f002 fedf 	bl	8004cc2 <HAL_PCD_ResetCallback>
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f04:	6822      	ldr	r2, [r4, #0]
 8001f06:	6953      	ldr	r3, [r2, #20]
 8001f08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f0c:	6153      	str	r3, [r2, #20]
 8001f0e:	e634      	b.n	8001b7a <HAL_PCD_IRQHandler+0xe2>
            HAL_PCD_SOFCallback(hpcd);
 8001f10:	4620      	mov	r0, r4
 8001f12:	f002 fed0 	bl	8004cb6 <HAL_PCD_SOFCallback>
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f16:	6822      	ldr	r2, [r4, #0]
 8001f18:	6953      	ldr	r3, [r2, #20]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	6153      	str	r3, [r2, #20]
 8001f20:	e632      	b.n	8001b88 <HAL_PCD_IRQHandler+0xf0>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8001f22:	3601      	adds	r6, #1
 8001f24:	7923      	ldrb	r3, [r4, #4]
 8001f26:	42b3      	cmp	r3, r6
 8001f28:	d90c      	bls.n	8001f44 <HAL_PCD_IRQHandler+0x4ac>
                if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U) {
 8001f2a:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001f2e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001f32:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d1f3      	bne.n	8001f22 <HAL_PCD_IRQHandler+0x48a>
                    (void) HAL_PCD_EP_Abort(hpcd, (uint8_t) epnum);
 8001f3a:	b2f1      	uxtb	r1, r6
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7ff fd91 	bl	8001a64 <HAL_PCD_EP_Abort>
 8001f42:	e7ee      	b.n	8001f22 <HAL_PCD_IRQHandler+0x48a>
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR)) {
 8001f44:	6820      	ldr	r0, [r4, #0]
 8001f46:	f001 fa13 	bl	8003370 <USB_ReadInterrupts>
 8001f4a:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8001f4e:	d125      	bne.n	8001f9c <HAL_PCD_IRQHandler+0x504>
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT)) {
 8001f50:	6820      	ldr	r0, [r4, #0]
 8001f52:	f001 fa0d 	bl	8003370 <USB_ReadInterrupts>
 8001f56:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8001f5a:	d058      	beq.n	800200e <HAL_PCD_IRQHandler+0x576>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e026      	b.n	8001fae <HAL_PCD_IRQHandler+0x516>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8001f60:	3601      	adds	r6, #1
 8001f62:	7923      	ldrb	r3, [r4, #4]
 8001f64:	42b3      	cmp	r3, r6
 8001f66:	d91b      	bls.n	8001fa0 <HAL_PCD_IRQHandler+0x508>
                RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f68:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001f6c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
                if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) && ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)) {
 8001f70:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001f74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001f78:	7e1b      	ldrb	r3, [r3, #24]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_PCD_IRQHandler+0x4c8>
 8001f7e:	2a00      	cmp	r2, #0
 8001f80:	daee      	bge.n	8001f60 <HAL_PCD_IRQHandler+0x4c8>
                    hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f82:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001f86:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	75da      	strb	r2, [r3, #23]
                    (void) HAL_PCD_EP_Abort(hpcd, (uint8_t) (epnum | 0x80U));
 8001f8e:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 8001f92:	b2c9      	uxtb	r1, r1
 8001f94:	4620      	mov	r0, r4
 8001f96:	f7ff fd65 	bl	8001a64 <HAL_PCD_EP_Abort>
 8001f9a:	e7e1      	b.n	8001f60 <HAL_PCD_IRQHandler+0x4c8>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8001f9c:	2601      	movs	r6, #1
 8001f9e:	e7e0      	b.n	8001f62 <HAL_PCD_IRQHandler+0x4ca>
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fa0:	6822      	ldr	r2, [r4, #0]
 8001fa2:	6953      	ldr	r3, [r2, #20]
 8001fa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fa8:	6153      	str	r3, [r2, #20]
 8001faa:	e7d1      	b.n	8001f50 <HAL_PCD_IRQHandler+0x4b8>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8001fac:	3301      	adds	r3, #1
 8001fae:	7922      	ldrb	r2, [r4, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d927      	bls.n	8002004 <HAL_PCD_IRQHandler+0x56c>
                RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001fb4:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8001fb8:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
                if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) && ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) && (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U))) {
 8001fbc:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001fc0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001fc4:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 8001fc8:	2a01      	cmp	r2, #1
 8001fca:	d1ef      	bne.n	8001fac <HAL_PCD_IRQHandler+0x514>
 8001fcc:	2900      	cmp	r1, #0
 8001fce:	daed      	bge.n	8001fac <HAL_PCD_IRQHandler+0x514>
 8001fd0:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 8001fd4:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8001fd8:	f012 0f01 	tst.w	r2, #1
 8001fdc:	d1e6      	bne.n	8001fac <HAL_PCD_IRQHandler+0x514>
                    hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001fde:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001fe2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
                    USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001fec:	69aa      	ldr	r2, [r5, #24]
 8001fee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ff2:	61aa      	str	r2, [r5, #24]
                    if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U) {
 8001ff4:	696a      	ldr	r2, [r5, #20]
 8001ff6:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001ffa:	d1d7      	bne.n	8001fac <HAL_PCD_IRQHandler+0x514>
                        USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002002:	607b      	str	r3, [r7, #4]
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002004:	6822      	ldr	r2, [r4, #0]
 8002006:	6953      	ldr	r3, [r2, #20]
 8002008:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800200c:	6153      	str	r3, [r2, #20]
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT)) {
 800200e:	6820      	ldr	r0, [r4, #0]
 8002010:	f001 f9ae 	bl	8003370 <USB_ReadInterrupts>
 8002014:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8002018:	d110      	bne.n	800203c <HAL_PCD_IRQHandler+0x5a4>
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT)) {
 800201a:	6820      	ldr	r0, [r4, #0]
 800201c:	f001 f9a8 	bl	8003370 <USB_ReadInterrupts>
 8002020:	f010 0f04 	tst.w	r0, #4
 8002024:	f43f ad41 	beq.w	8001aaa <HAL_PCD_IRQHandler+0x12>
            RegVal = hpcd->Instance->GOTGINT;
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	685d      	ldr	r5, [r3, #4]
            if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET) {
 800202c:	f015 0f04 	tst.w	r5, #4
 8002030:	d10d      	bne.n	800204e <HAL_PCD_IRQHandler+0x5b6>
            hpcd->Instance->GOTGINT |= RegVal;
 8002032:	6822      	ldr	r2, [r4, #0]
 8002034:	6853      	ldr	r3, [r2, #4]
 8002036:	432b      	orrs	r3, r5
 8002038:	6053      	str	r3, [r2, #4]
 800203a:	e536      	b.n	8001aaa <HAL_PCD_IRQHandler+0x12>
            HAL_PCD_ConnectCallback(hpcd);
 800203c:	4620      	mov	r0, r4
 800203e:	f002 fe7d 	bl	8004d3c <HAL_PCD_ConnectCallback>
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002042:	6822      	ldr	r2, [r4, #0]
 8002044:	6953      	ldr	r3, [r2, #20]
 8002046:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800204a:	6153      	str	r3, [r2, #20]
 800204c:	e7e5      	b.n	800201a <HAL_PCD_IRQHandler+0x582>
                HAL_PCD_DisconnectCallback(hpcd);
 800204e:	4620      	mov	r0, r4
 8002050:	f002 fe7a 	bl	8004d48 <HAL_PCD_DisconnectCallback>
 8002054:	e7ed      	b.n	8002032 <HAL_PCD_IRQHandler+0x59a>

08002056 <HAL_PCDEx_SetTxFiFo>:
 * @param  hpcd PCD handle
 * @param  fifo The number of Tx fifo
 * @param  size Fifo size
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size) {
 8002056:	b410      	push	{r4}
     --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
     of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

    Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002058:	6804      	ldr	r4, [r0, #0]
 800205a:	6a60      	ldr	r0, [r4, #36]	@ 0x24

    if (fifo == 0U) {
 800205c:	b931      	cbnz	r1, 800206c <HAL_PCDEx_SetTxFiFo+0x16>
        hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t) size << 16) | Tx_Offset;
 800205e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002062:	62a0      	str	r0, [r4, #40]	@ 0x28
        /* Multiply Tx_Size by 2 to get higher performance */
        hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t) size << 16) | Tx_Offset;
    }

    return HAL_OK;
}
 8002064:	2000      	movs	r0, #0
 8002066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	468c      	mov	ip, r1
        Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800206e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002070:	eb00 4013 	add.w	r0, r0, r3, lsr #16
        for (i = 0U; i < (fifo - 1U); i++) {
 8002074:	2300      	movs	r3, #0
 8002076:	e008      	b.n	800208a <HAL_PCDEx_SetTxFiFo+0x34>
            Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002078:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800207c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002080:	6849      	ldr	r1, [r1, #4]
 8002082:	eb00 4011 	add.w	r0, r0, r1, lsr #16
        for (i = 0U; i < (fifo - 1U); i++) {
 8002086:	3301      	adds	r3, #1
 8002088:	b2db      	uxtb	r3, r3
 800208a:	f10c 31ff 	add.w	r1, ip, #4294967295	@ 0xffffffff
 800208e:	428b      	cmp	r3, r1
 8002090:	d3f2      	bcc.n	8002078 <HAL_PCDEx_SetTxFiFo+0x22>
        hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t) size << 16) | Tx_Offset;
 8002092:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002096:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 800209a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800209e:	6060      	str	r0, [r4, #4]
 80020a0:	e7e0      	b.n	8002064 <HAL_PCDEx_SetTxFiFo+0xe>

080020a2 <HAL_PCDEx_SetRxFiFo>:
 * @param  hpcd PCD handle
 * @param  size Size of Rx fifo
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size) {
    hpcd->Instance->GRXFSIZ = size;
 80020a2:	6803      	ldr	r3, [r0, #0]
 80020a4:	6259      	str	r1, [r3, #36]	@ 0x24

    return HAL_OK;
}
 80020a6:	2000      	movs	r0, #0
 80020a8:	4770      	bx	lr

080020aa <HAL_PCDEx_LPM_Callback>:
    UNUSED(msg);

    /* NOTE : This function should not be modified, when the callback is needed,
     the HAL_PCDEx_LPM_Callback could be implemented in the user file
     */
}
 80020aa:	4770      	bx	lr

080020ac <HAL_RCC_OscConfig>:
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct) {
    uint32_t tickstart;
    uint32_t pll_config;
    /* Check Null pointer */
    if (RCC_OscInitStruct == NULL) {
 80020ac:	2800      	cmp	r0, #0
 80020ae:	f000 81e0 	beq.w	8002472 <HAL_RCC_OscConfig+0x3c6>
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct) {
 80020b2:	b570      	push	{r4, r5, r6, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	4604      	mov	r4, r0
    }

    /* Check the parameters */
    assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
    /*------------------------------- HSE Configuration ------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) {
 80020b8:	6803      	ldr	r3, [r0, #0]
 80020ba:	f013 0f01 	tst.w	r3, #1
 80020be:	d03b      	beq.n	8002138 <HAL_RCC_OscConfig+0x8c>
        /* Check the parameters */
        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 80020c0:	4b9f      	ldr	r3, [pc, #636]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d02c      	beq.n	8002126 <HAL_RCC_OscConfig+0x7a>
 80020cc:	4b9c      	ldr	r3, [pc, #624]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d021      	beq.n	800211c <HAL_RCC_OscConfig+0x70>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
                return HAL_ERROR;
            }
        } else {
            /* Set the new HSE configuration ---------------------------------------*/
            __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d8:	6863      	ldr	r3, [r4, #4]
 80020da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020de:	d04f      	beq.n	8002180 <HAL_RCC_OscConfig+0xd4>
 80020e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020e4:	d052      	beq.n	800218c <HAL_RCC_OscConfig+0xe0>
 80020e6:	4b96      	ldr	r3, [pc, #600]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020f6:	601a      	str	r2, [r3, #0]

            /* Check the HSE State */
            if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 80020f8:	6863      	ldr	r3, [r4, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d050      	beq.n	80021a0 <HAL_RCC_OscConfig+0xf4>
                /* Get Start Tick */
                tickstart = HAL_GetTick();
 80020fe:	f7fe fe43 	bl	8000d88 <HAL_GetTick>
 8002102:	4605      	mov	r5, r0

                /* Wait till HSE is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8002104:	4b8e      	ldr	r3, [pc, #568]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800210c:	d114      	bne.n	8002138 <HAL_RCC_OscConfig+0x8c>
                    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800210e:	f7fe fe3b 	bl	8000d88 <HAL_GetTick>
 8002112:	1b40      	subs	r0, r0, r5
 8002114:	2864      	cmp	r0, #100	@ 0x64
 8002116:	d9f5      	bls.n	8002104 <HAL_RCC_OscConfig+0x58>
                        return HAL_TIMEOUT;
 8002118:	2003      	movs	r0, #3
 800211a:	e1b1      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 800211c:	4b88      	ldr	r3, [pc, #544]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002124:	d0d8      	beq.n	80020d8 <HAL_RCC_OscConfig+0x2c>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8002126:	4b86      	ldr	r3, [pc, #536]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800212e:	d003      	beq.n	8002138 <HAL_RCC_OscConfig+0x8c>
 8002130:	6863      	ldr	r3, [r4, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 819f 	beq.w	8002476 <HAL_RCC_OscConfig+0x3ca>
                }
            }
        }
    }
    /*----------------------------- HSI Configuration --------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) {
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	f013 0f02 	tst.w	r3, #2
 800213e:	d054      	beq.n	80021ea <HAL_RCC_OscConfig+0x13e>
        /* Check the parameters */
        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 8002140:	4b7f      	ldr	r3, [pc, #508]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f013 0f0c 	tst.w	r3, #12
 8002148:	d03e      	beq.n	80021c8 <HAL_RCC_OscConfig+0x11c>
 800214a:	4b7d      	ldr	r3, [pc, #500]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b08      	cmp	r3, #8
 8002154:	d033      	beq.n	80021be <HAL_RCC_OscConfig+0x112>
                /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
            }
        } else {
            /* Check the HSI State */
            if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8002156:	68e3      	ldr	r3, [r4, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d068      	beq.n	800222e <HAL_RCC_OscConfig+0x182>
                /* Enable the Internal High Speed oscillator (HSI). */
                __HAL_RCC_HSI_ENABLE();
 800215c:	4b79      	ldr	r3, [pc, #484]	@ (8002344 <HAL_RCC_OscConfig+0x298>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]

                /* Get Start Tick*/
                tickstart = HAL_GetTick();
 8002162:	f7fe fe11 	bl	8000d88 <HAL_GetTick>
 8002166:	4605      	mov	r5, r0

                /* Wait till HSI is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8002168:	4b75      	ldr	r3, [pc, #468]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f013 0f02 	tst.w	r3, #2
 8002170:	d154      	bne.n	800221c <HAL_RCC_OscConfig+0x170>
                    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8002172:	f7fe fe09 	bl	8000d88 <HAL_GetTick>
 8002176:	1b40      	subs	r0, r0, r5
 8002178:	2802      	cmp	r0, #2
 800217a:	d9f5      	bls.n	8002168 <HAL_RCC_OscConfig+0xbc>
                        return HAL_TIMEOUT;
 800217c:	2003      	movs	r0, #3
 800217e:	e17f      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
            __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002180:	4a6f      	ldr	r2, [pc, #444]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 8002182:	6813      	ldr	r3, [r2, #0]
 8002184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e7b5      	b.n	80020f8 <HAL_RCC_OscConfig+0x4c>
 800218c:	4b6c      	ldr	r3, [pc, #432]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e7ab      	b.n	80020f8 <HAL_RCC_OscConfig+0x4c>
                tickstart = HAL_GetTick();
 80021a0:	f7fe fdf2 	bl	8000d88 <HAL_GetTick>
 80021a4:	4605      	mov	r5, r0
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 80021a6:	4b66      	ldr	r3, [pc, #408]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80021ae:	d0c3      	beq.n	8002138 <HAL_RCC_OscConfig+0x8c>
                    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 80021b0:	f7fe fdea 	bl	8000d88 <HAL_GetTick>
 80021b4:	1b40      	subs	r0, r0, r5
 80021b6:	2864      	cmp	r0, #100	@ 0x64
 80021b8:	d9f5      	bls.n	80021a6 <HAL_RCC_OscConfig+0xfa>
                        return HAL_TIMEOUT;
 80021ba:	2003      	movs	r0, #3
 80021bc:	e160      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 80021be:	4b60      	ldr	r3, [pc, #384]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80021c6:	d1c6      	bne.n	8002156 <HAL_RCC_OscConfig+0xaa>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 80021c8:	4b5d      	ldr	r3, [pc, #372]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f013 0f02 	tst.w	r3, #2
 80021d0:	d003      	beq.n	80021da <HAL_RCC_OscConfig+0x12e>
 80021d2:	68e3      	ldr	r3, [r4, #12]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	f040 8150 	bne.w	800247a <HAL_RCC_OscConfig+0x3ce>
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021da:	4a59      	ldr	r2, [pc, #356]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 80021dc:	6813      	ldr	r3, [r2, #0]
 80021de:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80021e2:	6921      	ldr	r1, [r4, #16]
 80021e4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021e8:	6013      	str	r3, [r2, #0]
                }
            }
        }
    }
    /*------------------------------ LSI Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) {
 80021ea:	6823      	ldr	r3, [r4, #0]
 80021ec:	f013 0f08 	tst.w	r3, #8
 80021f0:	d042      	beq.n	8002278 <HAL_RCC_OscConfig+0x1cc>
        /* Check the parameters */
        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

        /* Check the LSI State */
        if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 80021f2:	6963      	ldr	r3, [r4, #20]
 80021f4:	b36b      	cbz	r3, 8002252 <HAL_RCC_OscConfig+0x1a6>
            /* Enable the Internal Low Speed oscillator (LSI). */
            __HAL_RCC_LSI_ENABLE();
 80021f6:	4b53      	ldr	r3, [pc, #332]	@ (8002344 <HAL_RCC_OscConfig+0x298>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021fe:	f7fe fdc3 	bl	8000d88 <HAL_GetTick>
 8002202:	4605      	mov	r5, r0

            /* Wait till LSI is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8002204:	4b4e      	ldr	r3, [pc, #312]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 8002206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002208:	f013 0f02 	tst.w	r3, #2
 800220c:	d134      	bne.n	8002278 <HAL_RCC_OscConfig+0x1cc>
                if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800220e:	f7fe fdbb 	bl	8000d88 <HAL_GetTick>
 8002212:	1b40      	subs	r0, r0, r5
 8002214:	2802      	cmp	r0, #2
 8002216:	d9f5      	bls.n	8002204 <HAL_RCC_OscConfig+0x158>
                    return HAL_TIMEOUT;
 8002218:	2003      	movs	r0, #3
 800221a:	e131      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221c:	4a48      	ldr	r2, [pc, #288]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 800221e:	6813      	ldr	r3, [r2, #0]
 8002220:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002224:	6921      	ldr	r1, [r4, #16]
 8002226:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	e7dd      	b.n	80021ea <HAL_RCC_OscConfig+0x13e>
                __HAL_RCC_HSI_DISABLE();
 800222e:	4b45      	ldr	r3, [pc, #276]	@ (8002344 <HAL_RCC_OscConfig+0x298>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
                tickstart = HAL_GetTick();
 8002234:	f7fe fda8 	bl	8000d88 <HAL_GetTick>
 8002238:	4605      	mov	r5, r0
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800223a:	4b41      	ldr	r3, [pc, #260]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f013 0f02 	tst.w	r3, #2
 8002242:	d0d2      	beq.n	80021ea <HAL_RCC_OscConfig+0x13e>
                    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8002244:	f7fe fda0 	bl	8000d88 <HAL_GetTick>
 8002248:	1b40      	subs	r0, r0, r5
 800224a:	2802      	cmp	r0, #2
 800224c:	d9f5      	bls.n	800223a <HAL_RCC_OscConfig+0x18e>
                        return HAL_TIMEOUT;
 800224e:	2003      	movs	r0, #3
 8002250:	e116      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
                }
            }
        } else {
            /* Disable the Internal Low Speed oscillator (LSI). */
            __HAL_RCC_LSI_DISABLE();
 8002252:	4b3c      	ldr	r3, [pc, #240]	@ (8002344 <HAL_RCC_OscConfig+0x298>)
 8002254:	2200      	movs	r2, #0
 8002256:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

            /* Get Start Tick */
            tickstart = HAL_GetTick();
 800225a:	f7fe fd95 	bl	8000d88 <HAL_GetTick>
 800225e:	4605      	mov	r5, r0

            /* Wait till LSI is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8002260:	4b37      	ldr	r3, [pc, #220]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 8002262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002264:	f013 0f02 	tst.w	r3, #2
 8002268:	d006      	beq.n	8002278 <HAL_RCC_OscConfig+0x1cc>
                if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800226a:	f7fe fd8d 	bl	8000d88 <HAL_GetTick>
 800226e:	1b40      	subs	r0, r0, r5
 8002270:	2802      	cmp	r0, #2
 8002272:	d9f5      	bls.n	8002260 <HAL_RCC_OscConfig+0x1b4>
                    return HAL_TIMEOUT;
 8002274:	2003      	movs	r0, #3
 8002276:	e103      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
                }
            }
        }
    }
    /*------------------------------ LSE Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE) {
 8002278:	6823      	ldr	r3, [r4, #0]
 800227a:	f013 0f04 	tst.w	r3, #4
 800227e:	d077      	beq.n	8002370 <HAL_RCC_OscConfig+0x2c4>
        /* Check the parameters */
        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

        /* Update LSE configuration in Backup Domain control register    */
        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8002280:	4b2f      	ldr	r3, [pc, #188]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002284:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002288:	d133      	bne.n	80022f2 <HAL_RCC_OscConfig+0x246>
            __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	4b2c      	ldr	r3, [pc, #176]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 8002290:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002292:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002296:	641a      	str	r2, [r3, #64]	@ 0x40
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	9b01      	ldr	r3, [sp, #4]
            pwrclkchanged = SET;
 80022a2:	2501      	movs	r5, #1
        }

        if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 80022a4:	4b28      	ldr	r3, [pc, #160]	@ (8002348 <HAL_RCC_OscConfig+0x29c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80022ac:	d023      	beq.n	80022f6 <HAL_RCC_OscConfig+0x24a>
                }
            }
        }

        /* Set the new LSE configuration -----------------------------------------*/
        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ae:	68a3      	ldr	r3, [r4, #8]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d034      	beq.n	800231e <HAL_RCC_OscConfig+0x272>
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	d038      	beq.n	800232a <HAL_RCC_OscConfig+0x27e>
 80022b8:	4b21      	ldr	r3, [pc, #132]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 80022ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022bc:	f022 0201 	bic.w	r2, r2, #1
 80022c0:	671a      	str	r2, [r3, #112]	@ 0x70
 80022c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022c4:	f022 0204 	bic.w	r2, r2, #4
 80022c8:	671a      	str	r2, [r3, #112]	@ 0x70
        /* Check the LSE State */
        if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 80022ca:	68a3      	ldr	r3, [r4, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d03d      	beq.n	800234c <HAL_RCC_OscConfig+0x2a0>
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022d0:	f7fe fd5a 	bl	8000d88 <HAL_GetTick>
 80022d4:	4606      	mov	r6, r0

            /* Wait till LSE is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80022d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022da:	f013 0f02 	tst.w	r3, #2
 80022de:	d146      	bne.n	800236e <HAL_RCC_OscConfig+0x2c2>
                if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80022e0:	f7fe fd52 	bl	8000d88 <HAL_GetTick>
 80022e4:	1b80      	subs	r0, r0, r6
 80022e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80022ea:	4298      	cmp	r0, r3
 80022ec:	d9f3      	bls.n	80022d6 <HAL_RCC_OscConfig+0x22a>
                    return HAL_TIMEOUT;
 80022ee:	2003      	movs	r0, #3
 80022f0:	e0c6      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
        FlagStatus pwrclkchanged = RESET;
 80022f2:	2500      	movs	r5, #0
 80022f4:	e7d6      	b.n	80022a4 <HAL_RCC_OscConfig+0x1f8>
            SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f6:	4a14      	ldr	r2, [pc, #80]	@ (8002348 <HAL_RCC_OscConfig+0x29c>)
 80022f8:	6813      	ldr	r3, [r2, #0]
 80022fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022fe:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8002300:	f7fe fd42 	bl	8000d88 <HAL_GetTick>
 8002304:	4606      	mov	r6, r0
            while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002306:	4b10      	ldr	r3, [pc, #64]	@ (8002348 <HAL_RCC_OscConfig+0x29c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800230e:	d1ce      	bne.n	80022ae <HAL_RCC_OscConfig+0x202>
                if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8002310:	f7fe fd3a 	bl	8000d88 <HAL_GetTick>
 8002314:	1b80      	subs	r0, r0, r6
 8002316:	2802      	cmp	r0, #2
 8002318:	d9f5      	bls.n	8002306 <HAL_RCC_OscConfig+0x25a>
                    return HAL_TIMEOUT;
 800231a:	2003      	movs	r0, #3
 800231c:	e0b0      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231e:	4a08      	ldr	r2, [pc, #32]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 8002320:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6713      	str	r3, [r2, #112]	@ 0x70
 8002328:	e7cf      	b.n	80022ca <HAL_RCC_OscConfig+0x21e>
 800232a:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <HAL_RCC_OscConfig+0x294>)
 800232c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800232e:	f042 0204 	orr.w	r2, r2, #4
 8002332:	671a      	str	r2, [r3, #112]	@ 0x70
 8002334:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	671a      	str	r2, [r3, #112]	@ 0x70
 800233c:	e7c5      	b.n	80022ca <HAL_RCC_OscConfig+0x21e>
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	42470000 	.word	0x42470000
 8002348:	40007000 	.word	0x40007000
                }
            }
        } else {
            /* Get Start Tick */
            tickstart = HAL_GetTick();
 800234c:	f7fe fd1c 	bl	8000d88 <HAL_GetTick>
 8002350:	4606      	mov	r6, r0

            /* Wait till LSE is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8002352:	4b52      	ldr	r3, [pc, #328]	@ (800249c <HAL_RCC_OscConfig+0x3f0>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002356:	f013 0f02 	tst.w	r3, #2
 800235a:	d008      	beq.n	800236e <HAL_RCC_OscConfig+0x2c2>
                if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800235c:	f7fe fd14 	bl	8000d88 <HAL_GetTick>
 8002360:	1b80      	subs	r0, r0, r6
 8002362:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002366:	4298      	cmp	r0, r3
 8002368:	d9f3      	bls.n	8002352 <HAL_RCC_OscConfig+0x2a6>
                    return HAL_TIMEOUT;
 800236a:	2003      	movs	r0, #3
 800236c:	e088      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
                }
            }
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET) {
 800236e:	b9ed      	cbnz	r5, 80023ac <HAL_RCC_OscConfig+0x300>
        }
    }
    /*-------------------------------- PLL Configuration -----------------------*/
    /* Check the parameters */
    assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
    if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8002370:	69a3      	ldr	r3, [r4, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8083 	beq.w	800247e <HAL_RCC_OscConfig+0x3d2>
        /* Check if the PLL is used as system clock or not */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 8002378:	4a48      	ldr	r2, [pc, #288]	@ (800249c <HAL_RCC_OscConfig+0x3f0>)
 800237a:	6892      	ldr	r2, [r2, #8]
 800237c:	f002 020c 	and.w	r2, r2, #12
 8002380:	2a08      	cmp	r2, #8
 8002382:	d051      	beq.n	8002428 <HAL_RCC_OscConfig+0x37c>
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8002384:	2b02      	cmp	r3, #2
 8002386:	d017      	beq.n	80023b8 <HAL_RCC_OscConfig+0x30c>
                        return HAL_TIMEOUT;
                    }
                }
            } else {
                /* Disable the main PLL. */
                __HAL_RCC_PLL_DISABLE();
 8002388:	4b45      	ldr	r3, [pc, #276]	@ (80024a0 <HAL_RCC_OscConfig+0x3f4>)
 800238a:	2200      	movs	r2, #0
 800238c:	661a      	str	r2, [r3, #96]	@ 0x60

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 800238e:	f7fe fcfb 	bl	8000d88 <HAL_GetTick>
 8002392:	4604      	mov	r4, r0

                /* Wait till PLL is disabled */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002394:	4b41      	ldr	r3, [pc, #260]	@ (800249c <HAL_RCC_OscConfig+0x3f0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800239c:	d042      	beq.n	8002424 <HAL_RCC_OscConfig+0x378>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800239e:	f7fe fcf3 	bl	8000d88 <HAL_GetTick>
 80023a2:	1b00      	subs	r0, r0, r4
 80023a4:	2802      	cmp	r0, #2
 80023a6:	d9f5      	bls.n	8002394 <HAL_RCC_OscConfig+0x2e8>
                        return HAL_TIMEOUT;
 80023a8:	2003      	movs	r0, #3
 80023aa:	e069      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
            __HAL_RCC_PWR_CLK_DISABLE();
 80023ac:	4a3b      	ldr	r2, [pc, #236]	@ (800249c <HAL_RCC_OscConfig+0x3f0>)
 80023ae:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80023b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b6:	e7db      	b.n	8002370 <HAL_RCC_OscConfig+0x2c4>
                __HAL_RCC_PLL_DISABLE();
 80023b8:	4b39      	ldr	r3, [pc, #228]	@ (80024a0 <HAL_RCC_OscConfig+0x3f4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	661a      	str	r2, [r3, #96]	@ 0x60
                tickstart = HAL_GetTick();
 80023be:	f7fe fce3 	bl	8000d88 <HAL_GetTick>
 80023c2:	4605      	mov	r5, r0
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80023c4:	4b35      	ldr	r3, [pc, #212]	@ (800249c <HAL_RCC_OscConfig+0x3f0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80023cc:	d006      	beq.n	80023dc <HAL_RCC_OscConfig+0x330>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80023ce:	f7fe fcdb 	bl	8000d88 <HAL_GetTick>
 80023d2:	1b40      	subs	r0, r0, r5
 80023d4:	2802      	cmp	r0, #2
 80023d6:	d9f5      	bls.n	80023c4 <HAL_RCC_OscConfig+0x318>
                        return HAL_TIMEOUT;
 80023d8:	2003      	movs	r0, #3
 80023da:	e051      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
                WRITE_REG(RCC->PLLCFGR,
 80023dc:	69e3      	ldr	r3, [r4, #28]
 80023de:	6a22      	ldr	r2, [r4, #32]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80023e4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80023e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80023ea:	0852      	lsrs	r2, r2, #1
 80023ec:	3a01      	subs	r2, #1
 80023ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80023f2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80023f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80023f8:	4a28      	ldr	r2, [pc, #160]	@ (800249c <HAL_RCC_OscConfig+0x3f0>)
 80023fa:	6053      	str	r3, [r2, #4]
                __HAL_RCC_PLL_ENABLE();
 80023fc:	4b28      	ldr	r3, [pc, #160]	@ (80024a0 <HAL_RCC_OscConfig+0x3f4>)
 80023fe:	2201      	movs	r2, #1
 8002400:	661a      	str	r2, [r3, #96]	@ 0x60
                tickstart = HAL_GetTick();
 8002402:	f7fe fcc1 	bl	8000d88 <HAL_GetTick>
 8002406:	4604      	mov	r4, r0
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8002408:	4b24      	ldr	r3, [pc, #144]	@ (800249c <HAL_RCC_OscConfig+0x3f0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002410:	d106      	bne.n	8002420 <HAL_RCC_OscConfig+0x374>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002412:	f7fe fcb9 	bl	8000d88 <HAL_GetTick>
 8002416:	1b00      	subs	r0, r0, r4
 8002418:	2802      	cmp	r0, #2
 800241a:	d9f5      	bls.n	8002408 <HAL_RCC_OscConfig+0x35c>
                        return HAL_TIMEOUT;
 800241c:	2003      	movs	r0, #3
 800241e:	e02f      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
                    return HAL_ERROR;
                }
            }
        }
    }
    return HAL_OK;
 8002420:	2000      	movs	r0, #0
 8002422:	e02d      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
 8002424:	2000      	movs	r0, #0
 8002426:	e02b      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 8002428:	2b01      	cmp	r3, #1
 800242a:	d02b      	beq.n	8002484 <HAL_RCC_OscConfig+0x3d8>
                pll_config = RCC->PLLCFGR;
 800242c:	4b1b      	ldr	r3, [pc, #108]	@ (800249c <HAL_RCC_OscConfig+0x3f0>)
 800242e:	685b      	ldr	r3, [r3, #4]
                if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos)
 8002430:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002434:	69e2      	ldr	r2, [r4, #28]
 8002436:	4291      	cmp	r1, r2
 8002438:	d126      	bne.n	8002488 <HAL_RCC_OscConfig+0x3dc>
 800243a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800243e:	6a21      	ldr	r1, [r4, #32]
 8002440:	428a      	cmp	r2, r1
 8002442:	d123      	bne.n	800248c <HAL_RCC_OscConfig+0x3e0>
                        || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos)
 8002444:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002446:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800244a:	401a      	ands	r2, r3
 800244c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002450:	d11e      	bne.n	8002490 <HAL_RCC_OscConfig+0x3e4>
 8002452:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002456:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002458:	0852      	lsrs	r2, r2, #1
 800245a:	3a01      	subs	r2, #1
 800245c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002460:	d118      	bne.n	8002494 <HAL_RCC_OscConfig+0x3e8>
                        || (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002462:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002466:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002468:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800246c:	d114      	bne.n	8002498 <HAL_RCC_OscConfig+0x3ec>
    return HAL_OK;
 800246e:	2000      	movs	r0, #0
 8002470:	e006      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002472:	2001      	movs	r0, #1
}
 8002474:	4770      	bx	lr
                return HAL_ERROR;
 8002476:	2001      	movs	r0, #1
 8002478:	e002      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
                return HAL_ERROR;
 800247a:	2001      	movs	r0, #1
 800247c:	e000      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
    return HAL_OK;
 800247e:	2000      	movs	r0, #0
}
 8002480:	b002      	add	sp, #8
 8002482:	bd70      	pop	{r4, r5, r6, pc}
                return HAL_ERROR;
 8002484:	2001      	movs	r0, #1
 8002486:	e7fb      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
                    return HAL_ERROR;
 8002488:	2001      	movs	r0, #1
 800248a:	e7f9      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
 800248c:	2001      	movs	r0, #1
 800248e:	e7f7      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
 8002490:	2001      	movs	r0, #1
 8002492:	e7f5      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
 8002494:	2001      	movs	r0, #1
 8002496:	e7f3      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
 8002498:	2001      	movs	r0, #1
 800249a:	e7f1      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
 800249c:	40023800 	.word	0x40023800
 80024a0:	42470000 	.word	0x42470000

080024a4 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 80024a4:	b508      	push	{r3, lr}
    uint32_t pllvco = 0U;
    uint32_t pllp = 0U;
    uint32_t sysclockfreq = 0U;

    /* Get SYSCLK source -------------------------------------------------------*/
    switch (RCC->CFGR & RCC_CFGR_SWS) {
 80024a6:	4b26      	ldr	r3, [pc, #152]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d041      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x92>
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d141      	bne.n	800253a <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
    {
        /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP */
        pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024b6:	4b22      	ldr	r3, [pc, #136]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80024c4:	d012      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0x48>
            /* HSE used as PLL clock source */
            pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80024c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024c8:	6859      	ldr	r1, [r3, #4]
 80024ca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80024ce:	481d      	ldr	r0, [pc, #116]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024d0:	2300      	movs	r3, #0
 80024d2:	fba1 0100 	umull	r0, r1, r1, r0
 80024d6:	f7fd fed3 	bl	8000280 <__aeabi_uldivmod>
        } else {
            /* HSI used as PLL clock source */
            pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
        }
        pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024da:	4b19      	ldr	r3, [pc, #100]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80024e2:	3301      	adds	r3, #1
 80024e4:	005b      	lsls	r3, r3, #1

        sysclockfreq = pllvco / pllp;
 80024e6:	fbb0 f0f3 	udiv	r0, r0, r3
        sysclockfreq = HSI_VALUE;
        break;
    }
    }
    return sysclockfreq;
}
 80024ea:	bd08      	pop	{r3, pc}
            pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80024ec:	4b14      	ldr	r3, [pc, #80]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024ee:	6858      	ldr	r0, [r3, #4]
 80024f0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80024f4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80024f8:	ebbc 0c00 	subs.w	ip, ip, r0
 80024fc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002500:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002504:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002508:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800250c:	ebb1 010c 	subs.w	r1, r1, ip
 8002510:	eb63 030e 	sbc.w	r3, r3, lr
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800251a:	00c9      	lsls	r1, r1, #3
 800251c:	eb11 0c00 	adds.w	ip, r1, r0
 8002520:	f143 0300 	adc.w	r3, r3, #0
 8002524:	0299      	lsls	r1, r3, #10
 8002526:	2300      	movs	r3, #0
 8002528:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800252c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002530:	f7fd fea6 	bl	8000280 <__aeabi_uldivmod>
 8002534:	e7d1      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x36>
        sysclockfreq = HSE_VALUE;
 8002536:	4803      	ldr	r0, [pc, #12]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002538:	e7d7      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x46>
    switch (RCC->CFGR & RCC_CFGR_SWS) {
 800253a:	4803      	ldr	r0, [pc, #12]	@ (8002548 <HAL_RCC_GetSysClockFreq+0xa4>)
    return sysclockfreq;
 800253c:	e7d5      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x46>
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	017d7840 	.word	0x017d7840
 8002548:	00f42400 	.word	0x00f42400

0800254c <HAL_RCC_ClockConfig>:
    if (RCC_ClkInitStruct == NULL) {
 800254c:	2800      	cmp	r0, #0
 800254e:	f000 809b 	beq.w	8002688 <HAL_RCC_ClockConfig+0x13c>
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency) {
 8002552:	b570      	push	{r4, r5, r6, lr}
 8002554:	460d      	mov	r5, r1
 8002556:	4604      	mov	r4, r0
    if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8002558:	4b4f      	ldr	r3, [pc, #316]	@ (8002698 <HAL_RCC_ClockConfig+0x14c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	428b      	cmp	r3, r1
 8002562:	d208      	bcs.n	8002576 <HAL_RCC_ClockConfig+0x2a>
        __HAL_FLASH_SET_LATENCY(FLatency);
 8002564:	b2cb      	uxtb	r3, r1
 8002566:	4a4c      	ldr	r2, [pc, #304]	@ (8002698 <HAL_RCC_ClockConfig+0x14c>)
 8002568:	7013      	strb	r3, [r2, #0]
        if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800256a:	6813      	ldr	r3, [r2, #0]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	428b      	cmp	r3, r1
 8002572:	f040 808b 	bne.w	800268c <HAL_RCC_ClockConfig+0x140>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	f013 0f02 	tst.w	r3, #2
 800257c:	d017      	beq.n	80025ae <HAL_RCC_ClockConfig+0x62>
        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 800257e:	f013 0f04 	tst.w	r3, #4
 8002582:	d004      	beq.n	800258e <HAL_RCC_ClockConfig+0x42>
            MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002584:	4a45      	ldr	r2, [pc, #276]	@ (800269c <HAL_RCC_ClockConfig+0x150>)
 8002586:	6893      	ldr	r3, [r2, #8]
 8002588:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800258c:	6093      	str	r3, [r2, #8]
        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	f013 0f08 	tst.w	r3, #8
 8002594:	d004      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x54>
            MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002596:	4a41      	ldr	r2, [pc, #260]	@ (800269c <HAL_RCC_ClockConfig+0x150>)
 8002598:	6893      	ldr	r3, [r2, #8]
 800259a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800259e:	6093      	str	r3, [r2, #8]
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a0:	4a3e      	ldr	r2, [pc, #248]	@ (800269c <HAL_RCC_ClockConfig+0x150>)
 80025a2:	6893      	ldr	r3, [r2, #8]
 80025a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025a8:	68a1      	ldr	r1, [r4, #8]
 80025aa:	430b      	orrs	r3, r1
 80025ac:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	f013 0f01 	tst.w	r3, #1
 80025b4:	d032      	beq.n	800261c <HAL_RCC_ClockConfig+0xd0>
        if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 80025b6:	6863      	ldr	r3, [r4, #4]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d021      	beq.n	8002600 <HAL_RCC_ClockConfig+0xb4>
        else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 80025bc:	1e9a      	subs	r2, r3, #2
 80025be:	2a01      	cmp	r2, #1
 80025c0:	d925      	bls.n	800260e <HAL_RCC_ClockConfig+0xc2>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80025c2:	4a36      	ldr	r2, [pc, #216]	@ (800269c <HAL_RCC_ClockConfig+0x150>)
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	f012 0f02 	tst.w	r2, #2
 80025ca:	d061      	beq.n	8002690 <HAL_RCC_ClockConfig+0x144>
        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025cc:	4933      	ldr	r1, [pc, #204]	@ (800269c <HAL_RCC_ClockConfig+0x150>)
 80025ce:	688a      	ldr	r2, [r1, #8]
 80025d0:	f022 0203 	bic.w	r2, r2, #3
 80025d4:	4313      	orrs	r3, r2
 80025d6:	608b      	str	r3, [r1, #8]
        tickstart = HAL_GetTick();
 80025d8:	f7fe fbd6 	bl	8000d88 <HAL_GetTick>
 80025dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 80025de:	4b2f      	ldr	r3, [pc, #188]	@ (800269c <HAL_RCC_ClockConfig+0x150>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	6862      	ldr	r2, [r4, #4]
 80025e8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80025ec:	d016      	beq.n	800261c <HAL_RCC_ClockConfig+0xd0>
            if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 80025ee:	f7fe fbcb 	bl	8000d88 <HAL_GetTick>
 80025f2:	1b80      	subs	r0, r0, r6
 80025f4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80025f8:	4298      	cmp	r0, r3
 80025fa:	d9f0      	bls.n	80025de <HAL_RCC_ClockConfig+0x92>
                return HAL_TIMEOUT;
 80025fc:	2003      	movs	r0, #3
 80025fe:	e042      	b.n	8002686 <HAL_RCC_ClockConfig+0x13a>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8002600:	4a26      	ldr	r2, [pc, #152]	@ (800269c <HAL_RCC_ClockConfig+0x150>)
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002608:	d1e0      	bne.n	80025cc <HAL_RCC_ClockConfig+0x80>
                return HAL_ERROR;
 800260a:	2001      	movs	r0, #1
 800260c:	e03b      	b.n	8002686 <HAL_RCC_ClockConfig+0x13a>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800260e:	4a23      	ldr	r2, [pc, #140]	@ (800269c <HAL_RCC_ClockConfig+0x150>)
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002616:	d1d9      	bne.n	80025cc <HAL_RCC_ClockConfig+0x80>
                return HAL_ERROR;
 8002618:	2001      	movs	r0, #1
 800261a:	e034      	b.n	8002686 <HAL_RCC_ClockConfig+0x13a>
    if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 800261c:	4b1e      	ldr	r3, [pc, #120]	@ (8002698 <HAL_RCC_ClockConfig+0x14c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	42ab      	cmp	r3, r5
 8002626:	d907      	bls.n	8002638 <HAL_RCC_ClockConfig+0xec>
        __HAL_FLASH_SET_LATENCY(FLatency);
 8002628:	b2ea      	uxtb	r2, r5
 800262a:	4b1b      	ldr	r3, [pc, #108]	@ (8002698 <HAL_RCC_ClockConfig+0x14c>)
 800262c:	701a      	strb	r2, [r3, #0]
        if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	42ab      	cmp	r3, r5
 8002636:	d12d      	bne.n	8002694 <HAL_RCC_ClockConfig+0x148>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	f013 0f04 	tst.w	r3, #4
 800263e:	d006      	beq.n	800264e <HAL_RCC_ClockConfig+0x102>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002640:	4a16      	ldr	r2, [pc, #88]	@ (800269c <HAL_RCC_ClockConfig+0x150>)
 8002642:	6893      	ldr	r3, [r2, #8]
 8002644:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002648:	68e1      	ldr	r1, [r4, #12]
 800264a:	430b      	orrs	r3, r1
 800264c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	f013 0f08 	tst.w	r3, #8
 8002654:	d007      	beq.n	8002666 <HAL_RCC_ClockConfig+0x11a>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002656:	4a11      	ldr	r2, [pc, #68]	@ (800269c <HAL_RCC_ClockConfig+0x150>)
 8002658:	6893      	ldr	r3, [r2, #8]
 800265a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800265e:	6921      	ldr	r1, [r4, #16]
 8002660:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002664:	6093      	str	r3, [r2, #8]
    SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002666:	f7ff ff1d 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 800266a:	4b0c      	ldr	r3, [pc, #48]	@ (800269c <HAL_RCC_ClockConfig+0x150>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002672:	4a0b      	ldr	r2, [pc, #44]	@ (80026a0 <HAL_RCC_ClockConfig+0x154>)
 8002674:	5cd3      	ldrb	r3, [r2, r3]
 8002676:	40d8      	lsrs	r0, r3
 8002678:	4b0a      	ldr	r3, [pc, #40]	@ (80026a4 <HAL_RCC_ClockConfig+0x158>)
 800267a:	6018      	str	r0, [r3, #0]
    HAL_InitTick(uwTickPrio);
 800267c:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <HAL_RCC_ClockConfig+0x15c>)
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	f7fe fb36 	bl	8000cf0 <HAL_InitTick>
    return HAL_OK;
 8002684:	2000      	movs	r0, #0
}
 8002686:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002688:	2001      	movs	r0, #1
}
 800268a:	4770      	bx	lr
            return HAL_ERROR;
 800268c:	2001      	movs	r0, #1
 800268e:	e7fa      	b.n	8002686 <HAL_RCC_ClockConfig+0x13a>
                return HAL_ERROR;
 8002690:	2001      	movs	r0, #1
 8002692:	e7f8      	b.n	8002686 <HAL_RCC_ClockConfig+0x13a>
            return HAL_ERROR;
 8002694:	2001      	movs	r0, #1
 8002696:	e7f6      	b.n	8002686 <HAL_RCC_ClockConfig+0x13a>
 8002698:	40023c00 	.word	0x40023c00
 800269c:	40023800 	.word	0x40023800
 80026a0:	080061f4 	.word	0x080061f4
 80026a4:	20000008 	.word	0x20000008
 80026a8:	20000010 	.word	0x20000010

080026ac <HAL_RCC_GetHCLKFreq>:
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
    return SystemCoreClock;
}
 80026ac:	4b01      	ldr	r3, [pc, #4]	@ (80026b4 <HAL_RCC_GetHCLKFreq+0x8>)
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000008 	.word	0x20000008

080026b8 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 80026b8:	b508      	push	{r3, lr}
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026ba:	f7ff fff7 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026be:	4b04      	ldr	r3, [pc, #16]	@ (80026d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80026c6:	4a03      	ldr	r2, [pc, #12]	@ (80026d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026c8:	5cd3      	ldrb	r3, [r2, r3]
}
 80026ca:	40d8      	lsrs	r0, r3
 80026cc:	bd08      	pop	{r3, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	080061ec 	.word	0x080061ec

080026d8 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 80026d8:	b508      	push	{r3, lr}
    /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
    return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026da:	f7ff ffe7 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026de:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80026e6:	4a03      	ldr	r2, [pc, #12]	@ (80026f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
}
 80026ea:	40d8      	lsrs	r0, r3
 80026ec:	bd08      	pop	{r3, pc}
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	080061ec 	.word	0x080061ec

080026f8 <UART_EndRxTransfer>:
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026f8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fa:	f102 030c 	add.w	r3, r2, #12
 80026fe:	e853 3f00 	ldrex	r3, [r3]
 8002702:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002706:	320c      	adds	r2, #12
 8002708:	e842 3100 	strex	r1, r3, [r2]
 800270c:	2900      	cmp	r1, #0
 800270e:	d1f3      	bne.n	80026f8 <UART_EndRxTransfer>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002710:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002712:	f102 0314 	add.w	r3, r2, #20
 8002716:	e853 3f00 	ldrex	r3, [r3]
 800271a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	3214      	adds	r2, #20
 8002720:	e842 3100 	strex	r1, r3, [r2]
 8002724:	2900      	cmp	r1, #0
 8002726:	d1f3      	bne.n	8002710 <UART_EndRxTransfer+0x18>

    /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8002728:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800272a:	2b01      	cmp	r3, #1
 800272c:	d005      	beq.n	800273a <UART_EndRxTransfer+0x42>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800272e:	2320      	movs	r3, #32
 8002730:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002734:	2300      	movs	r3, #0
 8002736:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002738:	4770      	bx	lr
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800273a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273c:	f102 030c 	add.w	r3, r2, #12
 8002740:	e853 3f00 	ldrex	r3, [r3]
 8002744:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002748:	320c      	adds	r2, #12
 800274a:	e842 3100 	strex	r1, r3, [r2]
 800274e:	2900      	cmp	r1, #0
 8002750:	d1f3      	bne.n	800273a <UART_EndRxTransfer+0x42>
 8002752:	e7ec      	b.n	800272e <UART_EndRxTransfer+0x36>

08002754 <UART_SetConfig>:
 * @brief  Configures the UART peripheral.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef *huart) {
 8002754:	b510      	push	{r4, lr}
 8002756:	4604      	mov	r4, r0
    assert_param(IS_UART_MODE(huart->Init.Mode));

    /*-------------------------- USART CR2 Configuration -----------------------*/
    /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002758:	6802      	ldr	r2, [r0, #0]
 800275a:	6913      	ldr	r3, [r2, #16]
 800275c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002760:	68c1      	ldr	r1, [r0, #12]
 8002762:	430b      	orrs	r3, r1
 8002764:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

    tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002766:	6883      	ldr	r3, [r0, #8]
 8002768:	6902      	ldr	r2, [r0, #16]
 800276a:	431a      	orrs	r2, r3
 800276c:	6943      	ldr	r3, [r0, #20]
 800276e:	431a      	orrs	r2, r3
 8002770:	69c3      	ldr	r3, [r0, #28]
 8002772:	431a      	orrs	r2, r3
    MODIFY_REG(huart->Instance->CR1, (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), tmpreg);
 8002774:	6801      	ldr	r1, [r0, #0]
 8002776:	68cb      	ldr	r3, [r1, #12]
 8002778:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800277c:	f023 030c 	bic.w	r3, r3, #12
 8002780:	4313      	orrs	r3, r2
 8002782:	60cb      	str	r3, [r1, #12]

    /*-------------------------- USART CR3 Configuration -----------------------*/
    /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
    MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002784:	6802      	ldr	r2, [r0, #0]
 8002786:	6953      	ldr	r3, [r2, #20]
 8002788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800278c:	6981      	ldr	r1, [r0, #24]
 800278e:	430b      	orrs	r3, r1
 8002790:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 8002792:	6803      	ldr	r3, [r0, #0]
 8002794:	4a31      	ldr	r2, [pc, #196]	@ (800285c <UART_SetConfig+0x108>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d006      	beq.n	80027a8 <UART_SetConfig+0x54>
 800279a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800279e:	4293      	cmp	r3, r2
 80027a0:	d002      	beq.n	80027a8 <UART_SetConfig+0x54>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else {
        pclk = HAL_RCC_GetPCLK1Freq();
 80027a2:	f7ff ff89 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 80027a6:	e001      	b.n	80027ac <UART_SetConfig+0x58>
        pclk = HAL_RCC_GetPCLK2Freq();
 80027a8:	f7ff ff96 	bl	80026d8 <HAL_RCC_GetPCLK2Freq>
    }
    /*-------------------------- USART BRR Configuration ---------------------*/
    if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 80027ac:	69e3      	ldr	r3, [r4, #28]
 80027ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027b2:	d029      	beq.n	8002808 <UART_SetConfig+0xb4>
        huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    } else {
        huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027b4:	2100      	movs	r1, #0
 80027b6:	1803      	adds	r3, r0, r0
 80027b8:	4149      	adcs	r1, r1
 80027ba:	181b      	adds	r3, r3, r0
 80027bc:	f141 0100 	adc.w	r1, r1, #0
 80027c0:	00c9      	lsls	r1, r1, #3
 80027c2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	1818      	adds	r0, r3, r0
 80027ca:	6863      	ldr	r3, [r4, #4]
 80027cc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80027d0:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80027d4:	f141 0100 	adc.w	r1, r1, #0
 80027d8:	f7fd fd52 	bl	8000280 <__aeabi_uldivmod>
 80027dc:	4a20      	ldr	r2, [pc, #128]	@ (8002860 <UART_SetConfig+0x10c>)
 80027de:	fba2 3100 	umull	r3, r1, r2, r0
 80027e2:	0949      	lsrs	r1, r1, #5
 80027e4:	2364      	movs	r3, #100	@ 0x64
 80027e6:	fb03 0311 	mls	r3, r3, r1, r0
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	3332      	adds	r3, #50	@ 0x32
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027f8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	6821      	ldr	r1, [r4, #0]
 8002802:	4413      	add	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
    }
}
 8002806:	bd10      	pop	{r4, pc}
        huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002808:	2300      	movs	r3, #0
 800280a:	1802      	adds	r2, r0, r0
 800280c:	eb43 0103 	adc.w	r1, r3, r3
 8002810:	1812      	adds	r2, r2, r0
 8002812:	f141 0100 	adc.w	r1, r1, #0
 8002816:	00c9      	lsls	r1, r1, #3
 8002818:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800281c:	00d2      	lsls	r2, r2, #3
 800281e:	1810      	adds	r0, r2, r0
 8002820:	f141 0100 	adc.w	r1, r1, #0
 8002824:	6862      	ldr	r2, [r4, #4]
 8002826:	1892      	adds	r2, r2, r2
 8002828:	415b      	adcs	r3, r3
 800282a:	f7fd fd29 	bl	8000280 <__aeabi_uldivmod>
 800282e:	4a0c      	ldr	r2, [pc, #48]	@ (8002860 <UART_SetConfig+0x10c>)
 8002830:	fba2 3100 	umull	r3, r1, r2, r0
 8002834:	0949      	lsrs	r1, r1, #5
 8002836:	2364      	movs	r3, #100	@ 0x64
 8002838:	fb03 0311 	mls	r3, r3, r1, r0
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	3332      	adds	r3, #50	@ 0x32
 8002840:	fba2 2303 	umull	r2, r3, r2, r3
 8002844:	095b      	lsrs	r3, r3, #5
 8002846:	005a      	lsls	r2, r3, #1
 8002848:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 800284c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	6821      	ldr	r1, [r4, #0]
 8002856:	4413      	add	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
 800285a:	e7d4      	b.n	8002806 <UART_SetConfig+0xb2>
 800285c:	40011000 	.word	0x40011000
 8002860:	51eb851f 	.word	0x51eb851f

08002864 <UART_WaitOnFlagUntilTimeout>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 8002864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002868:	b083      	sub	sp, #12
 800286a:	4605      	mov	r5, r0
 800286c:	460e      	mov	r6, r1
 800286e:	4617      	mov	r7, r2
 8002870:	4699      	mov	r9, r3
 8002872:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
    while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8002876:	682b      	ldr	r3, [r5, #0]
 8002878:	681c      	ldr	r4, [r3, #0]
 800287a:	ea36 0404 	bics.w	r4, r6, r4
 800287e:	bf0c      	ite	eq
 8002880:	2401      	moveq	r4, #1
 8002882:	2400      	movne	r4, #0
 8002884:	42bc      	cmp	r4, r7
 8002886:	d128      	bne.n	80028da <UART_WaitOnFlagUntilTimeout+0x76>
        if (Timeout != HAL_MAX_DELAY) {
 8002888:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800288c:	d0f3      	beq.n	8002876 <UART_WaitOnFlagUntilTimeout+0x12>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 800288e:	f7fe fa7b 	bl	8000d88 <HAL_GetTick>
 8002892:	eba0 0009 	sub.w	r0, r0, r9
 8002896:	4540      	cmp	r0, r8
 8002898:	d823      	bhi.n	80028e2 <UART_WaitOnFlagUntilTimeout+0x7e>
 800289a:	f1b8 0f00 	cmp.w	r8, #0
 800289e:	d022      	beq.n	80028e6 <UART_WaitOnFlagUntilTimeout+0x82>
            if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC)) {
 80028a0:	682b      	ldr	r3, [r5, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	f012 0f04 	tst.w	r2, #4
 80028a8:	d0e5      	beq.n	8002876 <UART_WaitOnFlagUntilTimeout+0x12>
 80028aa:	2e80      	cmp	r6, #128	@ 0x80
 80028ac:	d0e3      	beq.n	8002876 <UART_WaitOnFlagUntilTimeout+0x12>
 80028ae:	2e40      	cmp	r6, #64	@ 0x40
 80028b0:	d0e1      	beq.n	8002876 <UART_WaitOnFlagUntilTimeout+0x12>
                if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET) {
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	f012 0f08 	tst.w	r2, #8
 80028b8:	d0dd      	beq.n	8002876 <UART_WaitOnFlagUntilTimeout+0x12>
                    __HAL_UART_CLEAR_OREFLAG(huart);
 80028ba:	2400      	movs	r4, #0
 80028bc:	9401      	str	r4, [sp, #4]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	9201      	str	r2, [sp, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	9b01      	ldr	r3, [sp, #4]
                    UART_EndRxTransfer(huart);
 80028c8:	4628      	mov	r0, r5
 80028ca:	f7ff ff15 	bl	80026f8 <UART_EndRxTransfer>
                    huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028ce:	2308      	movs	r3, #8
 80028d0:	646b      	str	r3, [r5, #68]	@ 0x44
                    __HAL_UNLOCK(huart);
 80028d2:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
                    return HAL_ERROR;
 80028d6:	2001      	movs	r0, #1
 80028d8:	e000      	b.n	80028dc <UART_WaitOnFlagUntilTimeout+0x78>
    return HAL_OK;
 80028da:	2000      	movs	r0, #0
}
 80028dc:	b003      	add	sp, #12
 80028de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return HAL_TIMEOUT;
 80028e2:	2003      	movs	r0, #3
 80028e4:	e7fa      	b.n	80028dc <UART_WaitOnFlagUntilTimeout+0x78>
 80028e6:	2003      	movs	r0, #3
 80028e8:	e7f8      	b.n	80028dc <UART_WaitOnFlagUntilTimeout+0x78>

080028ea <HAL_UART_Init>:
    if (huart == NULL) {
 80028ea:	b360      	cbz	r0, 8002946 <HAL_UART_Init+0x5c>
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 80028ec:	b510      	push	{r4, lr}
 80028ee:	4604      	mov	r4, r0
    if (huart->gState == HAL_UART_STATE_RESET) {
 80028f0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80028f4:	b313      	cbz	r3, 800293c <HAL_UART_Init+0x52>
    huart->gState = HAL_UART_STATE_BUSY;
 80028f6:	2324      	movs	r3, #36	@ 0x24
 80028f8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    __HAL_UART_DISABLE(huart);
 80028fc:	6822      	ldr	r2, [r4, #0]
 80028fe:	68d3      	ldr	r3, [r2, #12]
 8002900:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002904:	60d3      	str	r3, [r2, #12]
    UART_SetConfig(huart);
 8002906:	4620      	mov	r0, r4
 8002908:	f7ff ff24 	bl	8002754 <UART_SetConfig>
    CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290c:	6822      	ldr	r2, [r4, #0]
 800290e:	6913      	ldr	r3, [r2, #16]
 8002910:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002914:	6113      	str	r3, [r2, #16]
    CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002916:	6822      	ldr	r2, [r4, #0]
 8002918:	6953      	ldr	r3, [r2, #20]
 800291a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800291e:	6153      	str	r3, [r2, #20]
    __HAL_UART_ENABLE(huart);
 8002920:	6822      	ldr	r2, [r4, #0]
 8002922:	68d3      	ldr	r3, [r2, #12]
 8002924:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002928:	60d3      	str	r3, [r2, #12]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292a:	2000      	movs	r0, #0
 800292c:	6460      	str	r0, [r4, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_READY;
 800292e:	2320      	movs	r3, #32
 8002930:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 8002934:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002938:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800293a:	bd10      	pop	{r4, pc}
        huart->Lock = HAL_UNLOCKED;
 800293c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
        HAL_UART_MspInit(huart);
 8002940:	f7fe f972 	bl	8000c28 <HAL_UART_MspInit>
 8002944:	e7d7      	b.n	80028f6 <HAL_UART_Init+0xc>
        return HAL_ERROR;
 8002946:	2001      	movs	r0, #1
}
 8002948:	4770      	bx	lr

0800294a <HAL_UART_Transmit>:
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 800294a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	461e      	mov	r6, r3
    if (huart->gState == HAL_UART_STATE_READY) {
 8002952:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b20      	cmp	r3, #32
 800295a:	d156      	bne.n	8002a0a <HAL_UART_Transmit+0xc0>
 800295c:	4604      	mov	r4, r0
 800295e:	460d      	mov	r5, r1
 8002960:	4690      	mov	r8, r2
        if ((pData == NULL) || (Size == 0U)) {
 8002962:	2900      	cmp	r1, #0
 8002964:	d055      	beq.n	8002a12 <HAL_UART_Transmit+0xc8>
 8002966:	b90a      	cbnz	r2, 800296c <HAL_UART_Transmit+0x22>
            return HAL_ERROR;
 8002968:	2001      	movs	r0, #1
 800296a:	e04f      	b.n	8002a0c <HAL_UART_Transmit+0xc2>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296c:	2300      	movs	r3, #0
 800296e:	6443      	str	r3, [r0, #68]	@ 0x44
        huart->gState = HAL_UART_STATE_BUSY_TX;
 8002970:	2321      	movs	r3, #33	@ 0x21
 8002972:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
        tickstart = HAL_GetTick();
 8002976:	f7fe fa07 	bl	8000d88 <HAL_GetTick>
 800297a:	4607      	mov	r7, r0
        huart->TxXferSize = Size;
 800297c:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
        huart->TxXferCount = Size;
 8002980:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE)) {
 8002984:	68a3      	ldr	r3, [r4, #8]
 8002986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800298a:	d002      	beq.n	8002992 <HAL_UART_Transmit+0x48>
            pdata16bits = NULL;
 800298c:	f04f 0800 	mov.w	r8, #0
 8002990:	e014      	b.n	80029bc <HAL_UART_Transmit+0x72>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE)) {
 8002992:	6923      	ldr	r3, [r4, #16]
 8002994:	b32b      	cbz	r3, 80029e2 <HAL_UART_Transmit+0x98>
            pdata16bits = NULL;
 8002996:	f04f 0800 	mov.w	r8, #0
 800299a:	e00f      	b.n	80029bc <HAL_UART_Transmit+0x72>
                huart->gState = HAL_UART_STATE_READY;
 800299c:	2320      	movs	r3, #32
 800299e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
                return HAL_TIMEOUT;
 80029a2:	2003      	movs	r0, #3
 80029a4:	e032      	b.n	8002a0c <HAL_UART_Transmit+0xc2>
                huart->Instance->DR = (uint16_t) (*pdata16bits & 0x01FFU);
 80029a6:	f838 3b02 	ldrh.w	r3, [r8], #2
 80029aa:	6822      	ldr	r2, [r4, #0]
 80029ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b0:	6053      	str	r3, [r2, #4]
            huart->TxXferCount--;
 80029b2:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80029b4:	b292      	uxth	r2, r2
 80029b6:	3a01      	subs	r2, #1
 80029b8:	b292      	uxth	r2, r2
 80029ba:	84e2      	strh	r2, [r4, #38]	@ 0x26
        while (huart->TxXferCount > 0U) {
 80029bc:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80029be:	b29b      	uxth	r3, r3
 80029c0:	b193      	cbz	r3, 80029e8 <HAL_UART_Transmit+0x9e>
            if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK) {
 80029c2:	9600      	str	r6, [sp, #0]
 80029c4:	463b      	mov	r3, r7
 80029c6:	2200      	movs	r2, #0
 80029c8:	2180      	movs	r1, #128	@ 0x80
 80029ca:	4620      	mov	r0, r4
 80029cc:	f7ff ff4a 	bl	8002864 <UART_WaitOnFlagUntilTimeout>
 80029d0:	2800      	cmp	r0, #0
 80029d2:	d1e3      	bne.n	800299c <HAL_UART_Transmit+0x52>
            if (pdata8bits == NULL) {
 80029d4:	2d00      	cmp	r5, #0
 80029d6:	d0e6      	beq.n	80029a6 <HAL_UART_Transmit+0x5c>
                huart->Instance->DR = (uint8_t) (*pdata8bits & 0xFFU);
 80029d8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80029dc:	6823      	ldr	r3, [r4, #0]
 80029de:	605a      	str	r2, [r3, #4]
                pdata8bits++;
 80029e0:	e7e7      	b.n	80029b2 <HAL_UART_Transmit+0x68>
            pdata16bits = (const uint16_t*) pData;
 80029e2:	46a8      	mov	r8, r5
            pdata8bits = NULL;
 80029e4:	2500      	movs	r5, #0
 80029e6:	e7e9      	b.n	80029bc <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK) {
 80029e8:	9600      	str	r6, [sp, #0]
 80029ea:	463b      	mov	r3, r7
 80029ec:	2200      	movs	r2, #0
 80029ee:	2140      	movs	r1, #64	@ 0x40
 80029f0:	4620      	mov	r0, r4
 80029f2:	f7ff ff37 	bl	8002864 <UART_WaitOnFlagUntilTimeout>
 80029f6:	b918      	cbnz	r0, 8002a00 <HAL_UART_Transmit+0xb6>
        huart->gState = HAL_UART_STATE_READY;
 80029f8:	2320      	movs	r3, #32
 80029fa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_OK;
 80029fe:	e005      	b.n	8002a0c <HAL_UART_Transmit+0xc2>
            huart->gState = HAL_UART_STATE_READY;
 8002a00:	2320      	movs	r3, #32
 8002a02:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
            return HAL_TIMEOUT;
 8002a06:	2003      	movs	r0, #3
 8002a08:	e000      	b.n	8002a0c <HAL_UART_Transmit+0xc2>
        return HAL_BUSY;
 8002a0a:	2002      	movs	r0, #2
}
 8002a0c:	b002      	add	sp, #8
 8002a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return HAL_ERROR;
 8002a12:	2001      	movs	r0, #1
 8002a14:	e7fa      	b.n	8002a0c <HAL_UART_Transmit+0xc2>

08002a16 <USB_CoreReset>:
/**
 * @brief  Reset the USB Core (needed after USB clock settings change)
 * @param  USBx  Selected device
 * @retval HAL status
 */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx) {
 8002a16:	b082      	sub	sp, #8
    __IO uint32_t count = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9301      	str	r3, [sp, #4]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 8002a1c:	9b01      	ldr	r3, [sp, #4]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	9301      	str	r3, [sp, #4]

        if (count > HAL_USB_TIMEOUT) {
 8002a22:	9b01      	ldr	r3, [sp, #4]
 8002a24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002a28:	d81c      	bhi.n	8002a64 <USB_CoreReset+0x4e>
            return HAL_TIMEOUT;
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002a2a:	6903      	ldr	r3, [r0, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	daf5      	bge.n	8002a1c <USB_CoreReset+0x6>

    count = 10U;
 8002a30:	230a      	movs	r3, #10
 8002a32:	9301      	str	r3, [sp, #4]

    /* few cycles before setting core reset */
    while (count > 0U) {
 8002a34:	e002      	b.n	8002a3c <USB_CoreReset+0x26>
        count--;
 8002a36:	9b01      	ldr	r3, [sp, #4]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	9301      	str	r3, [sp, #4]
    while (count > 0U) {
 8002a3c:	9b01      	ldr	r3, [sp, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f9      	bne.n	8002a36 <USB_CoreReset+0x20>
    }

    /* Core Soft Reset */
    USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002a42:	6903      	ldr	r3, [r0, #16]
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6103      	str	r3, [r0, #16]

    do {
        count++;
 8002a4a:	9b01      	ldr	r3, [sp, #4]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	9301      	str	r3, [sp, #4]

        if (count > HAL_USB_TIMEOUT) {
 8002a50:	9b01      	ldr	r3, [sp, #4]
 8002a52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002a56:	d808      	bhi.n	8002a6a <USB_CoreReset+0x54>
            return HAL_TIMEOUT;
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002a58:	6903      	ldr	r3, [r0, #16]
 8002a5a:	f013 0f01 	tst.w	r3, #1
 8002a5e:	d1f4      	bne.n	8002a4a <USB_CoreReset+0x34>

    return HAL_OK;
 8002a60:	2000      	movs	r0, #0
 8002a62:	e000      	b.n	8002a66 <USB_CoreReset+0x50>
            return HAL_TIMEOUT;
 8002a64:	2003      	movs	r0, #3
}
 8002a66:	b002      	add	sp, #8
 8002a68:	4770      	bx	lr
            return HAL_TIMEOUT;
 8002a6a:	2003      	movs	r0, #3
 8002a6c:	e7fb      	b.n	8002a66 <USB_CoreReset+0x50>

08002a6e <USB_CoreInit>:
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg) {
 8002a6e:	b084      	sub	sp, #16
 8002a70:	b510      	push	{r4, lr}
 8002a72:	4604      	mov	r4, r0
 8002a74:	a803      	add	r0, sp, #12
 8002a76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 8002a7a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d121      	bne.n	8002ac6 <USB_CoreInit+0x58>
        USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a82:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a88:	63a3      	str	r3, [r4, #56]	@ 0x38
        USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002a8a:	68e3      	ldr	r3, [r4, #12]
 8002a8c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002a90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a94:	60e3      	str	r3, [r4, #12]
        USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002a96:	68e3      	ldr	r3, [r4, #12]
 8002a98:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002a9c:	60e3      	str	r3, [r4, #12]
        if (cfg.use_external_vbus == 1U) {
 8002a9e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d00a      	beq.n	8002abc <USB_CoreInit+0x4e>
        ret = USB_CoreReset(USBx);
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f7ff ffb5 	bl	8002a16 <USB_CoreReset>
    if (cfg.dma_enable == 1U) {
 8002aac:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d01c      	beq.n	8002aee <USB_CoreInit+0x80>
}
 8002ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ab8:	b004      	add	sp, #16
 8002aba:	4770      	bx	lr
            USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002abc:	68e3      	ldr	r3, [r4, #12]
 8002abe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ac2:	60e3      	str	r3, [r4, #12]
 8002ac4:	e7ef      	b.n	8002aa6 <USB_CoreInit+0x38>
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ac6:	68e3      	ldr	r3, [r4, #12]
 8002ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002acc:	60e3      	str	r3, [r4, #12]
        ret = USB_CoreReset(USBx);
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f7ff ffa1 	bl	8002a16 <USB_CoreReset>
        if (cfg.battery_charging_enable == 0U) {
 8002ad4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002ad8:	b923      	cbnz	r3, 8002ae4 <USB_CoreInit+0x76>
            USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ada:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002ae2:	e7e3      	b.n	8002aac <USB_CoreInit+0x3e>
            USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ae4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aea:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002aec:	e7de      	b.n	8002aac <USB_CoreInit+0x3e>
        USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002aee:	68a3      	ldr	r3, [r4, #8]
 8002af0:	f043 0306 	orr.w	r3, r3, #6
 8002af4:	60a3      	str	r3, [r4, #8]
        USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002af6:	68a3      	ldr	r3, [r4, #8]
 8002af8:	f043 0320 	orr.w	r3, r3, #32
 8002afc:	60a3      	str	r3, [r4, #8]
 8002afe:	e7d9      	b.n	8002ab4 <USB_CoreInit+0x46>

08002b00 <USB_SetTurnaroundTime>:
    if (speed == USBD_FS_SPEED) {
 8002b00:	2a02      	cmp	r2, #2
 8002b02:	d00a      	beq.n	8002b1a <USB_SetTurnaroundTime+0x1a>
        UsbTrd = USBD_HS_TRDT_VALUE;
 8002b04:	2209      	movs	r2, #9
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002b06:	68c3      	ldr	r3, [r0, #12]
 8002b08:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8002b0c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG |= (uint32_t) ((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002b0e:	68c3      	ldr	r3, [r0, #12]
 8002b10:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8002b14:	60c3      	str	r3, [r0, #12]
}
 8002b16:	2000      	movs	r0, #0
 8002b18:	4770      	bx	lr
        if ((hclk >= 14200000U) && (hclk < 15000000U)) {
 8002b1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ba8 <USB_SetTurnaroundTime+0xa8>)
 8002b1c:	440b      	add	r3, r1
 8002b1e:	4a23      	ldr	r2, [pc, #140]	@ (8002bac <USB_SetTurnaroundTime+0xac>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d92f      	bls.n	8002b84 <USB_SetTurnaroundTime+0x84>
        } else if ((hclk >= 15000000U) && (hclk < 16000000U)) {
 8002b24:	4b22      	ldr	r3, [pc, #136]	@ (8002bb0 <USB_SetTurnaroundTime+0xb0>)
 8002b26:	440b      	add	r3, r1
 8002b28:	4a22      	ldr	r2, [pc, #136]	@ (8002bb4 <USB_SetTurnaroundTime+0xb4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d92c      	bls.n	8002b88 <USB_SetTurnaroundTime+0x88>
        } else if ((hclk >= 16000000U) && (hclk < 17200000U)) {
 8002b2e:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 8002b32:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 8002b36:	4a20      	ldr	r2, [pc, #128]	@ (8002bb8 <USB_SetTurnaroundTime+0xb8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d927      	bls.n	8002b8c <USB_SetTurnaroundTime+0x8c>
        } else if ((hclk >= 17200000U) && (hclk < 18500000U)) {
 8002b3c:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 8002b40:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8002b44:	4a1d      	ldr	r2, [pc, #116]	@ (8002bbc <USB_SetTurnaroundTime+0xbc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d322      	bcc.n	8002b90 <USB_SetTurnaroundTime+0x90>
        } else if ((hclk >= 18500000U) && (hclk < 20000000U)) {
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc0 <USB_SetTurnaroundTime+0xc0>)
 8002b4c:	440b      	add	r3, r1
 8002b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc4 <USB_SetTurnaroundTime+0xc4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d91f      	bls.n	8002b94 <USB_SetTurnaroundTime+0x94>
        } else if ((hclk >= 20000000U) && (hclk < 21800000U)) {
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <USB_SetTurnaroundTime+0xc8>)
 8002b56:	440b      	add	r3, r1
 8002b58:	4a1c      	ldr	r2, [pc, #112]	@ (8002bcc <USB_SetTurnaroundTime+0xcc>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d31c      	bcc.n	8002b98 <USB_SetTurnaroundTime+0x98>
        } else if ((hclk >= 21800000U) && (hclk < 24000000U)) {
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd0 <USB_SetTurnaroundTime+0xd0>)
 8002b60:	440b      	add	r3, r1
 8002b62:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd4 <USB_SetTurnaroundTime+0xd4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d319      	bcc.n	8002b9c <USB_SetTurnaroundTime+0x9c>
        } else if ((hclk >= 24000000U) && (hclk < 27700000U)) {
 8002b68:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8002b6c:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 8002b70:	4a19      	ldr	r2, [pc, #100]	@ (8002bd8 <USB_SetTurnaroundTime+0xd8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d314      	bcc.n	8002ba0 <USB_SetTurnaroundTime+0xa0>
        } else if ((hclk >= 27700000U) && (hclk < 32000000U)) {
 8002b76:	4b19      	ldr	r3, [pc, #100]	@ (8002bdc <USB_SetTurnaroundTime+0xdc>)
 8002b78:	440b      	add	r3, r1
 8002b7a:	4a19      	ldr	r2, [pc, #100]	@ (8002be0 <USB_SetTurnaroundTime+0xe0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d211      	bcs.n	8002ba4 <USB_SetTurnaroundTime+0xa4>
            UsbTrd = 0x7U;
 8002b80:	2207      	movs	r2, #7
 8002b82:	e7c0      	b.n	8002b06 <USB_SetTurnaroundTime+0x6>
            UsbTrd = 0xFU;
 8002b84:	220f      	movs	r2, #15
 8002b86:	e7be      	b.n	8002b06 <USB_SetTurnaroundTime+0x6>
            UsbTrd = 0xEU;
 8002b88:	220e      	movs	r2, #14
 8002b8a:	e7bc      	b.n	8002b06 <USB_SetTurnaroundTime+0x6>
            UsbTrd = 0xDU;
 8002b8c:	220d      	movs	r2, #13
 8002b8e:	e7ba      	b.n	8002b06 <USB_SetTurnaroundTime+0x6>
            UsbTrd = 0xCU;
 8002b90:	220c      	movs	r2, #12
 8002b92:	e7b8      	b.n	8002b06 <USB_SetTurnaroundTime+0x6>
            UsbTrd = 0xBU;
 8002b94:	220b      	movs	r2, #11
 8002b96:	e7b6      	b.n	8002b06 <USB_SetTurnaroundTime+0x6>
            UsbTrd = 0xAU;
 8002b98:	220a      	movs	r2, #10
 8002b9a:	e7b4      	b.n	8002b06 <USB_SetTurnaroundTime+0x6>
            UsbTrd = 0x9U;
 8002b9c:	2209      	movs	r2, #9
 8002b9e:	e7b2      	b.n	8002b06 <USB_SetTurnaroundTime+0x6>
            UsbTrd = 0x8U;
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	e7b0      	b.n	8002b06 <USB_SetTurnaroundTime+0x6>
            UsbTrd = 0x6U;
 8002ba4:	2206      	movs	r2, #6
 8002ba6:	e7ae      	b.n	8002b06 <USB_SetTurnaroundTime+0x6>
 8002ba8:	ff275340 	.word	0xff275340
 8002bac:	000c34ff 	.word	0x000c34ff
 8002bb0:	ff1b1e40 	.word	0xff1b1e40
 8002bb4:	000f423f 	.word	0x000f423f
 8002bb8:	00124f7f 	.word	0x00124f7f
 8002bbc:	0013d620 	.word	0x0013d620
 8002bc0:	fee5b660 	.word	0xfee5b660
 8002bc4:	0016e35f 	.word	0x0016e35f
 8002bc8:	feced300 	.word	0xfeced300
 8002bcc:	001b7740 	.word	0x001b7740
 8002bd0:	feb35bc0 	.word	0xfeb35bc0
 8002bd4:	002191c0 	.word	0x002191c0
 8002bd8:	00387520 	.word	0x00387520
 8002bdc:	fe5954e0 	.word	0xfe5954e0
 8002be0:	00419ce0 	.word	0x00419ce0

08002be4 <USB_EnableGlobalInt>:
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002be4:	6883      	ldr	r3, [r0, #8]
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6083      	str	r3, [r0, #8]
}
 8002bec:	2000      	movs	r0, #0
 8002bee:	4770      	bx	lr

08002bf0 <USB_DisableGlobalInt>:
    USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002bf0:	6883      	ldr	r3, [r0, #8]
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6083      	str	r3, [r0, #8]
}
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	4770      	bx	lr

08002bfc <USB_FlushTxFifo>:
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num) {
 8002bfc:	b082      	sub	sp, #8
    __IO uint32_t count = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	9301      	str	r3, [sp, #4]
        count++;
 8002c02:	9b01      	ldr	r3, [sp, #4]
 8002c04:	3301      	adds	r3, #1
 8002c06:	9301      	str	r3, [sp, #4]
        if (count > HAL_USB_TIMEOUT) {
 8002c08:	9b01      	ldr	r3, [sp, #4]
 8002c0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002c0e:	d815      	bhi.n	8002c3c <USB_FlushTxFifo+0x40>
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002c10:	6903      	ldr	r3, [r0, #16]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	daf5      	bge.n	8002c02 <USB_FlushTxFifo+0x6>
    count = 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	9301      	str	r3, [sp, #4]
    USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002c1a:	0189      	lsls	r1, r1, #6
 8002c1c:	f041 0120 	orr.w	r1, r1, #32
 8002c20:	6101      	str	r1, [r0, #16]
        count++;
 8002c22:	9b01      	ldr	r3, [sp, #4]
 8002c24:	3301      	adds	r3, #1
 8002c26:	9301      	str	r3, [sp, #4]
        if (count > HAL_USB_TIMEOUT) {
 8002c28:	9b01      	ldr	r3, [sp, #4]
 8002c2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002c2e:	d808      	bhi.n	8002c42 <USB_FlushTxFifo+0x46>
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002c30:	6903      	ldr	r3, [r0, #16]
 8002c32:	f013 0f20 	tst.w	r3, #32
 8002c36:	d1f4      	bne.n	8002c22 <USB_FlushTxFifo+0x26>
    return HAL_OK;
 8002c38:	2000      	movs	r0, #0
 8002c3a:	e000      	b.n	8002c3e <USB_FlushTxFifo+0x42>
            return HAL_TIMEOUT;
 8002c3c:	2003      	movs	r0, #3
}
 8002c3e:	b002      	add	sp, #8
 8002c40:	4770      	bx	lr
            return HAL_TIMEOUT;
 8002c42:	2003      	movs	r0, #3
 8002c44:	e7fb      	b.n	8002c3e <USB_FlushTxFifo+0x42>

08002c46 <USB_FlushRxFifo>:
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx) {
 8002c46:	b082      	sub	sp, #8
    __IO uint32_t count = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	9301      	str	r3, [sp, #4]
        count++;
 8002c4c:	9b01      	ldr	r3, [sp, #4]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	9301      	str	r3, [sp, #4]
        if (count > HAL_USB_TIMEOUT) {
 8002c52:	9b01      	ldr	r3, [sp, #4]
 8002c54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002c58:	d813      	bhi.n	8002c82 <USB_FlushRxFifo+0x3c>
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002c5a:	6903      	ldr	r3, [r0, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	daf5      	bge.n	8002c4c <USB_FlushRxFifo+0x6>
    count = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	9301      	str	r3, [sp, #4]
    USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002c64:	2310      	movs	r3, #16
 8002c66:	6103      	str	r3, [r0, #16]
        count++;
 8002c68:	9b01      	ldr	r3, [sp, #4]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	9301      	str	r3, [sp, #4]
        if (count > HAL_USB_TIMEOUT) {
 8002c6e:	9b01      	ldr	r3, [sp, #4]
 8002c70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002c74:	d808      	bhi.n	8002c88 <USB_FlushRxFifo+0x42>
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002c76:	6903      	ldr	r3, [r0, #16]
 8002c78:	f013 0f10 	tst.w	r3, #16
 8002c7c:	d1f4      	bne.n	8002c68 <USB_FlushRxFifo+0x22>
    return HAL_OK;
 8002c7e:	2000      	movs	r0, #0
 8002c80:	e000      	b.n	8002c84 <USB_FlushRxFifo+0x3e>
            return HAL_TIMEOUT;
 8002c82:	2003      	movs	r0, #3
}
 8002c84:	b002      	add	sp, #8
 8002c86:	4770      	bx	lr
            return HAL_TIMEOUT;
 8002c88:	2003      	movs	r0, #3
 8002c8a:	e7fb      	b.n	8002c84 <USB_FlushRxFifo+0x3e>

08002c8c <USB_SetDevSpeed>:
    USBx_DEVICE->DCFG |= speed;
 8002c8c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8002c90:	4319      	orrs	r1, r3
 8002c92:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8002c96:	2000      	movs	r0, #0
 8002c98:	4770      	bx	lr
	...

08002c9c <USB_DevInit>:
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg) {
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca0:	4604      	mov	r4, r0
 8002ca2:	a807      	add	r0, sp, #28
 8002ca4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    for (i = 0U; i < 15U; i++) {
 8002ca8:	2300      	movs	r3, #0
 8002caa:	e006      	b.n	8002cba <USB_DevInit+0x1e>
        USBx->DIEPTXF[i] = 0U;
 8002cac:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002cb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	6051      	str	r1, [r2, #4]
    for (i = 0U; i < 15U; i++) {
 8002cb8:	3301      	adds	r3, #1
 8002cba:	2b0e      	cmp	r3, #14
 8002cbc:	d9f6      	bls.n	8002cac <USB_DevInit+0x10>
    if (cfg.vbus_sensing_enable == 0U) {
 8002cbe:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 8002cc2:	bb06      	cbnz	r6, 8002d06 <USB_DevInit+0x6a>
        USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002cc4:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
        USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002cd0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002cd2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cd6:	63a3      	str	r3, [r4, #56]	@ 0x38
        USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002cd8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002cda:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002cde:	63a3      	str	r3, [r4, #56]	@ 0x38
        USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002ce0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ce6:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx_PCGCCTL = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
    if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 8002cee:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d115      	bne.n	8002d22 <USB_DevInit+0x86>
        if (cfg.speed == USBD_HS_SPEED) {
 8002cf6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8002cfa:	b96b      	cbnz	r3, 8002d18 <USB_DevInit+0x7c>
            (void) USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4620      	mov	r0, r4
 8002d00:	f7ff ffc4 	bl	8002c8c <USB_SetDevSpeed>
 8002d04:	e011      	b.n	8002d2a <USB_DevInit+0x8e>
        USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002d06:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002d08:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d0c:	63a3      	str	r3, [r4, #56]	@ 0x38
        USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002d0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002d10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002d14:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002d16:	e7e7      	b.n	8002ce8 <USB_DevInit+0x4c>
            (void) USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f7ff ffb6 	bl	8002c8c <USB_SetDevSpeed>
 8002d20:	e003      	b.n	8002d2a <USB_DevInit+0x8e>
        (void) USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d22:	2103      	movs	r1, #3
 8002d24:	4620      	mov	r0, r4
 8002d26:	f7ff ffb1 	bl	8002c8c <USB_SetDevSpeed>
    if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d2a:	2110      	movs	r1, #16
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f7ff ff65 	bl	8002bfc <USB_FlushTxFifo>
 8002d32:	4605      	mov	r5, r0
 8002d34:	b100      	cbz	r0, 8002d38 <USB_DevInit+0x9c>
        ret = HAL_ERROR;
 8002d36:	2501      	movs	r5, #1
    if (USB_FlushRxFifo(USBx) != HAL_OK) {
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f7ff ff84 	bl	8002c46 <USB_FlushRxFifo>
 8002d3e:	b100      	cbz	r0, 8002d42 <USB_DevInit+0xa6>
        ret = HAL_ERROR;
 8002d40:	2501      	movs	r5, #1
    USBx_DEVICE->DIEPMSK = 0U;
 8002d42:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8002d46:	2300      	movs	r3, #0
 8002d48:	f8cc 3010 	str.w	r3, [ip, #16]
    USBx_DEVICE->DOEPMSK = 0U;
 8002d4c:	f8cc 3014 	str.w	r3, [ip, #20]
    USBx_DEVICE->DAINTMSK = 0U;
 8002d50:	f8cc 301c 	str.w	r3, [ip, #28]
    for (i = 0U; i < cfg.dev_endpoints; i++) {
 8002d54:	e00a      	b.n	8002d6c <USB_DevInit+0xd0>
            if (i == 0U) {
 8002d56:	b9cb      	cbnz	r3, 8002d8c <USB_DevInit+0xf0>
                USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002d58:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002d5c:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
        USBx_INEP(i)->DIEPTSIZ = 0U;
 8002d60:	2200      	movs	r2, #0
 8002d62:	610a      	str	r2, [r1, #16]
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d64:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8002d68:	608a      	str	r2, [r1, #8]
    for (i = 0U; i < cfg.dev_endpoints; i++) {
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8002d70:	4299      	cmp	r1, r3
 8002d72:	d910      	bls.n	8002d96 <USB_DevInit+0xfa>
        if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 8002d74:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8002d78:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 8002d7c:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 8002d80:	2800      	cmp	r0, #0
 8002d82:	dbe8      	blt.n	8002d56 <USB_DevInit+0xba>
            USBx_INEP(i)->DIEPCTL = 0U;
 8002d84:	2000      	movs	r0, #0
 8002d86:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8002d8a:	e7e9      	b.n	8002d60 <USB_DevInit+0xc4>
                USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002d8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d90:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8002d94:	e7e4      	b.n	8002d60 <USB_DevInit+0xc4>
    for (i = 0U; i < cfg.dev_endpoints; i++) {
 8002d96:	2300      	movs	r3, #0
 8002d98:	e00a      	b.n	8002db0 <USB_DevInit+0x114>
            if (i == 0U) {
 8002d9a:	b1bb      	cbz	r3, 8002dcc <USB_DevInit+0x130>
                USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002d9c:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 8002da0:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002da4:	2200      	movs	r2, #0
 8002da6:	6102      	str	r2, [r0, #16]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002da8:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8002dac:	6082      	str	r2, [r0, #8]
    for (i = 0U; i < cfg.dev_endpoints; i++) {
 8002dae:	3301      	adds	r3, #1
 8002db0:	4299      	cmp	r1, r3
 8002db2:	d910      	bls.n	8002dd6 <USB_DevInit+0x13a>
        if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 8002db4:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8002db8:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 8002dbc:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 8002dc0:	2f00      	cmp	r7, #0
 8002dc2:	dbea      	blt.n	8002d9a <USB_DevInit+0xfe>
            USBx_OUTEP(i)->DOEPCTL = 0U;
 8002dc4:	2700      	movs	r7, #0
 8002dc6:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8002dca:	e7eb      	b.n	8002da4 <USB_DevInit+0x108>
                USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002dcc:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 8002dd0:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8002dd4:	e7e6      	b.n	8002da4 <USB_DevInit+0x108>
    USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002dd6:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8002dda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dde:	f8cc 3010 	str.w	r3, [ip, #16]
    USBx->GINTMSK = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61a3      	str	r3, [r4, #24]
    USBx->GINTSTS = 0xBFFFFFFFU;
 8002de6:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8002dea:	6163      	str	r3, [r4, #20]
    if (cfg.dma_enable == 0U) {
 8002dec:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8002df0:	b91b      	cbnz	r3, 8002dfa <USB_DevInit+0x15e>
        USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002df2:	69a3      	ldr	r3, [r4, #24]
 8002df4:	f043 0310 	orr.w	r3, r3, #16
 8002df8:	61a3      	str	r3, [r4, #24]
    USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002dfa:	69a2      	ldr	r2, [r4, #24]
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e2c <USB_DevInit+0x190>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61a3      	str	r3, [r4, #24]
    if (cfg.Sof_enable != 0U) {
 8002e02:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8002e06:	b11b      	cbz	r3, 8002e10 <USB_DevInit+0x174>
        USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002e08:	69a3      	ldr	r3, [r4, #24]
 8002e0a:	f043 0308 	orr.w	r3, r3, #8
 8002e0e:	61a3      	str	r3, [r4, #24]
    if (cfg.vbus_sensing_enable == 1U) {
 8002e10:	2e01      	cmp	r6, #1
 8002e12:	d004      	beq.n	8002e1e <USB_DevInit+0x182>
}
 8002e14:	4628      	mov	r0, r5
 8002e16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e1a:	b004      	add	sp, #16
 8002e1c:	4770      	bx	lr
        USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002e1e:	69a3      	ldr	r3, [r4, #24]
 8002e20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e24:	f043 0304 	orr.w	r3, r3, #4
 8002e28:	61a3      	str	r3, [r4, #24]
 8002e2a:	e7f3      	b.n	8002e14 <USB_DevInit+0x178>
 8002e2c:	803c3800 	.word	0x803c3800

08002e30 <USB_GetDevSpeed>:
    uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002e30:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8002e34:	f003 0306 	and.w	r3, r3, #6
    if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ) {
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d004      	beq.n	8002e46 <USB_GetDevSpeed+0x16>
 8002e3c:	2b06      	cmp	r3, #6
 8002e3e:	d004      	beq.n	8002e4a <USB_GetDevSpeed+0x1a>
 8002e40:	b92b      	cbnz	r3, 8002e4e <USB_GetDevSpeed+0x1e>
    uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002e42:	2000      	movs	r0, #0
 8002e44:	4770      	bx	lr
 8002e46:	2002      	movs	r0, #2
 8002e48:	4770      	bx	lr
 8002e4a:	2002      	movs	r0, #2
 8002e4c:	4770      	bx	lr
 8002e4e:	200f      	movs	r0, #15
}
 8002e50:	4770      	bx	lr

08002e52 <USB_ActivateEndpoint>:
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep) {
 8002e52:	b510      	push	{r4, lr}
    uint32_t epnum = (uint32_t) ep->num;
 8002e54:	f891 c000 	ldrb.w	ip, [r1]
    if (ep->is_in == 1U) {
 8002e58:	784b      	ldrb	r3, [r1, #1]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d023      	beq.n	8002ea6 <USB_ActivateEndpoint+0x54>
        USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t) (1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002e5e:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 8002e62:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 8002e66:	f00c 040f 	and.w	r4, ip, #15
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	40a2      	lsls	r2, r4
 8002e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e72:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
        if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U) {
 8002e76:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8002e7a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002e7e:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002e82:	d10e      	bne.n	8002ea2 <USB_ActivateEndpoint+0x50>
            USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) | ((uint32_t) ep->type << 18) |
 8002e84:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8002e88:	688a      	ldr	r2, [r1, #8]
 8002e8a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002e8e:	7909      	ldrb	r1, [r1, #4]
 8002e90:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e9e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	bd10      	pop	{r4, pc}
        USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t) (1UL << (ep->num & EP_ADDR_MSK));
 8002ea6:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8002eaa:	f00c 0e0f 	and.w	lr, ip, #15
 8002eae:	fa03 f30e 	lsl.w	r3, r3, lr
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
        if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U) {
 8002eba:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8002ebe:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002ec2:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002ec6:	d1ec      	bne.n	8002ea2 <USB_ActivateEndpoint+0x50>
            USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) | ((uint32_t) ep->type << 18) | (epnum << 22) |
 8002ec8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8002ecc:	688a      	ldr	r2, [r1, #8]
 8002ece:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002ed2:	7909      	ldrb	r1, [r1, #4]
 8002ed4:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8002ed8:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ee6:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8002eea:	e7da      	b.n	8002ea2 <USB_ActivateEndpoint+0x50>

08002eec <USB_EPStopXfer>:
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep) {
 8002eec:	b410      	push	{r4}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	4602      	mov	r2, r0
    __IO uint32_t count = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	9301      	str	r3, [sp, #4]
    if (ep->is_in == 1U) {
 8002ef6:	7848      	ldrb	r0, [r1, #1]
 8002ef8:	2801      	cmp	r0, #1
 8002efa:	d00b      	beq.n	8002f14 <USB_EPStopXfer+0x28>
        if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 8002efc:	780b      	ldrb	r3, [r1, #0]
 8002efe:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002f02:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8002f06:	2800      	cmp	r0, #0
 8002f08:	db2d      	blt.n	8002f66 <USB_EPStopXfer+0x7a>
    HAL_StatusTypeDef ret = HAL_OK;
 8002f0a:	2000      	movs	r0, #0
}
 8002f0c:	b003      	add	sp, #12
 8002f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f12:	4770      	bx	lr
        if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 8002f14:	780b      	ldrb	r3, [r1, #0]
 8002f16:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002f1a:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8002f1e:	2c00      	cmp	r4, #0
 8002f20:	db01      	blt.n	8002f26 <USB_EPStopXfer+0x3a>
    HAL_StatusTypeDef ret = HAL_OK;
 8002f22:	2000      	movs	r0, #0
 8002f24:	e7f2      	b.n	8002f0c <USB_EPStopXfer+0x20>
            USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8002f26:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8002f2a:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8002f2e:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
            USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8002f32:	780b      	ldrb	r3, [r1, #0]
 8002f34:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002f38:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8002f3c:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8002f40:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
                count++;
 8002f44:	9b01      	ldr	r3, [sp, #4]
 8002f46:	3301      	adds	r3, #1
 8002f48:	9301      	str	r3, [sp, #4]
                if (count > 10000U) {
 8002f4a:	9c01      	ldr	r4, [sp, #4]
 8002f4c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002f50:	429c      	cmp	r4, r3
 8002f52:	d8db      	bhi.n	8002f0c <USB_EPStopXfer+0x20>
            } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA);
 8002f54:	780b      	ldrb	r3, [r1, #0]
 8002f56:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002f5a:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	dbf0      	blt.n	8002f44 <USB_EPStopXfer+0x58>
    HAL_StatusTypeDef ret = HAL_OK;
 8002f62:	2000      	movs	r0, #0
 8002f64:	e7d2      	b.n	8002f0c <USB_EPStopXfer+0x20>
            USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8002f66:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8002f6a:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 8002f6e:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
            USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8002f72:	780b      	ldrb	r3, [r1, #0]
 8002f74:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002f78:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8002f7c:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8002f80:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
                count++;
 8002f84:	9b01      	ldr	r3, [sp, #4]
 8002f86:	3301      	adds	r3, #1
 8002f88:	9301      	str	r3, [sp, #4]
                if (count > 10000U) {
 8002f8a:	9801      	ldr	r0, [sp, #4]
 8002f8c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002f90:	4298      	cmp	r0, r3
 8002f92:	d808      	bhi.n	8002fa6 <USB_EPStopXfer+0xba>
            } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA);
 8002f94:	780b      	ldrb	r3, [r1, #0]
 8002f96:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002f9a:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	dbf0      	blt.n	8002f84 <USB_EPStopXfer+0x98>
    HAL_StatusTypeDef ret = HAL_OK;
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	e7b2      	b.n	8002f0c <USB_EPStopXfer+0x20>
                    ret = HAL_ERROR;
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	e7b0      	b.n	8002f0c <USB_EPStopXfer+0x20>

08002faa <USB_WritePacket>:
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma) {
 8002faa:	b510      	push	{r4, lr}
 8002fac:	f89d 4008 	ldrb.w	r4, [sp, #8]
    if (dma == 0U) {
 8002fb0:	b984      	cbnz	r4, 8002fd4 <USB_WritePacket+0x2a>
        count32b = ((uint32_t) len + 3U) / 4U;
 8002fb2:	3303      	adds	r3, #3
 8002fb4:	ea4f 0e93 	mov.w	lr, r3, lsr #2
        for (i = 0U; i < count32b; i++) {
 8002fb8:	f04f 0c00 	mov.w	ip, #0
 8002fbc:	e008      	b.n	8002fd0 <USB_WritePacket+0x26>
            USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002fbe:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8002fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fc6:	f851 4b04 	ldr.w	r4, [r1], #4
 8002fca:	601c      	str	r4, [r3, #0]
        for (i = 0U; i < count32b; i++) {
 8002fcc:	f10c 0c01 	add.w	ip, ip, #1
 8002fd0:	45f4      	cmp	ip, lr
 8002fd2:	d3f4      	bcc.n	8002fbe <USB_WritePacket+0x14>
}
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	bd10      	pop	{r4, pc}

08002fd8 <USB_EPStartXfer>:
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma) {
 8002fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fda:	b083      	sub	sp, #12
    uint32_t epnum = (uint32_t) ep->num;
 8002fdc:	780c      	ldrb	r4, [r1, #0]
    if (ep->is_in == 1U) {
 8002fde:	784b      	ldrb	r3, [r1, #1]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d02d      	beq.n	8003040 <USB_EPStartXfer+0x68>
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002fe4:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8002fe8:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8002fec:	691d      	ldr	r5, [r3, #16]
 8002fee:	f36f 0512 	bfc	r5, #0, #19
 8002ff2:	611d      	str	r5, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002ff4:	691d      	ldr	r5, [r3, #16]
 8002ff6:	f36f 45dc 	bfc	r5, #19, #10
 8002ffa:	611d      	str	r5, [r3, #16]
        if (epnum == 0U) {
 8002ffc:	2c00      	cmp	r4, #0
 8002ffe:	f040 80ce 	bne.w	800319e <USB_EPStartXfer+0x1c6>
            if (ep->xfer_len > 0U) {
 8003002:	690c      	ldr	r4, [r1, #16]
 8003004:	b10c      	cbz	r4, 800300a <USB_EPStartXfer+0x32>
                ep->xfer_len = ep->maxpacket;
 8003006:	688c      	ldr	r4, [r1, #8]
 8003008:	610c      	str	r4, [r1, #16]
            ep->xfer_size = ep->maxpacket;
 800300a:	688c      	ldr	r4, [r1, #8]
 800300c:	620c      	str	r4, [r1, #32]
            USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800300e:	691d      	ldr	r5, [r3, #16]
 8003010:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003014:	432c      	orrs	r4, r5
 8003016:	611c      	str	r4, [r3, #16]
            USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003018:	691c      	ldr	r4, [r3, #16]
 800301a:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800301e:	611c      	str	r4, [r3, #16]
        if (dma == 1U) {
 8003020:	2a01      	cmp	r2, #1
 8003022:	f000 80df 	beq.w	80031e4 <USB_EPStartXfer+0x20c>
        if (ep->type == EP_TYPE_ISOC) {
 8003026:	790b      	ldrb	r3, [r1, #4]
 8003028:	2b01      	cmp	r3, #1
 800302a:	f000 80e1 	beq.w	80031f0 <USB_EPStartXfer+0x218>
        USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800302e:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8003032:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003036:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 800303a:	2000      	movs	r0, #0
 800303c:	b003      	add	sp, #12
 800303e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ep->xfer_len == 0U) {
 8003040:	690b      	ldr	r3, [r1, #16]
 8003042:	bb73      	cbnz	r3, 80030a2 <USB_EPStartXfer+0xca>
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003044:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8003048:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 800304c:	f36f 45dc 	bfc	r5, #19, #10
 8003050:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003054:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8003058:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 800305c:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003060:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8003064:	f36f 0512 	bfc	r5, #0, #19
 8003068:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
        if (dma == 1U) {
 800306c:	2a01      	cmp	r2, #1
 800306e:	d054      	beq.n	800311a <USB_EPStartXfer+0x142>
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003070:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8003074:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8003078:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800307c:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
            if (ep->type != EP_TYPE_ISOC) {
 8003080:	790b      	ldrb	r3, [r1, #4]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d072      	beq.n	800316c <USB_EPStartXfer+0x194>
                if (ep->xfer_len > 0U) {
 8003086:	690b      	ldr	r3, [r1, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0d6      	beq.n	800303a <USB_EPStartXfer+0x62>
                    USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800308c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 8003090:	7809      	ldrb	r1, [r1, #0]
 8003092:	f001 010f 	and.w	r1, r1, #15
 8003096:	2201      	movs	r2, #1
 8003098:	408a      	lsls	r2, r1
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 80030a0:	e7cb      	b.n	800303a <USB_EPStartXfer+0x62>
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80030a2:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80030a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030aa:	691d      	ldr	r5, [r3, #16]
 80030ac:	f36f 0512 	bfc	r5, #0, #19
 80030b0:	611d      	str	r5, [r3, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80030b2:	691d      	ldr	r5, [r3, #16]
 80030b4:	f36f 45dc 	bfc	r5, #19, #10
 80030b8:	611d      	str	r5, [r3, #16]
            if (epnum == 0U) {
 80030ba:	b984      	cbnz	r4, 80030de <USB_EPStartXfer+0x106>
                if (ep->xfer_len > ep->maxpacket) {
 80030bc:	690e      	ldr	r6, [r1, #16]
 80030be:	688d      	ldr	r5, [r1, #8]
 80030c0:	42ae      	cmp	r6, r5
 80030c2:	d900      	bls.n	80030c6 <USB_EPStartXfer+0xee>
                    ep->xfer_len = ep->maxpacket;
 80030c4:	610d      	str	r5, [r1, #16]
                USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80030c6:	691d      	ldr	r5, [r3, #16]
 80030c8:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 80030cc:	611d      	str	r5, [r3, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80030ce:	691d      	ldr	r5, [r3, #16]
 80030d0:	690e      	ldr	r6, [r1, #16]
 80030d2:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 80030d6:	ea45 050c 	orr.w	r5, r5, ip
 80030da:	611d      	str	r5, [r3, #16]
 80030dc:	e7c6      	b.n	800306c <USB_EPStartXfer+0x94>
                pktcnt = (uint16_t) ((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80030de:	690d      	ldr	r5, [r1, #16]
 80030e0:	688e      	ldr	r6, [r1, #8]
 80030e2:	4435      	add	r5, r6
 80030e4:	3d01      	subs	r5, #1
 80030e6:	fbb5 f5f6 	udiv	r5, r5, r6
                USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t) pktcnt << 19));
 80030ea:	691e      	ldr	r6, [r3, #16]
 80030ec:	fa1f fc85 	uxth.w	ip, r5
 80030f0:	4f49      	ldr	r7, [pc, #292]	@ (8003218 <USB_EPStartXfer+0x240>)
 80030f2:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 80030f6:	4335      	orrs	r5, r6
 80030f8:	611d      	str	r5, [r3, #16]
                if (ep->type == EP_TYPE_ISOC) {
 80030fa:	790d      	ldrb	r5, [r1, #4]
 80030fc:	2d01      	cmp	r5, #1
 80030fe:	d1e6      	bne.n	80030ce <USB_EPStartXfer+0xf6>
                    USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003100:	691d      	ldr	r5, [r3, #16]
 8003102:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8003106:	611d      	str	r5, [r3, #16]
                    USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t) pktcnt << 29));
 8003108:	691d      	ldr	r5, [r3, #16]
 800310a:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 800310e:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 8003112:	ea45 050c 	orr.w	r5, r5, ip
 8003116:	611d      	str	r5, [r3, #16]
 8003118:	e7d9      	b.n	80030ce <USB_EPStartXfer+0xf6>
            if ((uint32_t) ep->dma_addr != 0U) {
 800311a:	69cb      	ldr	r3, [r1, #28]
 800311c:	b11b      	cbz	r3, 8003126 <USB_EPStartXfer+0x14e>
                USBx_INEP(epnum)->DIEPDMA = (uint32_t) (ep->dma_addr);
 800311e:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8003122:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
            if (ep->type == EP_TYPE_ISOC) {
 8003126:	790b      	ldrb	r3, [r1, #4]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d008      	beq.n	800313e <USB_EPStartXfer+0x166>
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800312c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8003130:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8003134:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003138:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 800313c:	e77d      	b.n	800303a <USB_EPStartXfer+0x62>
                if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 800313e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8003142:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003146:	d108      	bne.n	800315a <USB_EPStartXfer+0x182>
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003148:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800314c:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8003150:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003154:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8003158:	e7e8      	b.n	800312c <USB_EPStartXfer+0x154>
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800315a:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800315e:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8003162:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003166:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 800316a:	e7df      	b.n	800312c <USB_EPStartXfer+0x154>
                if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 800316c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8003170:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003174:	d10c      	bne.n	8003190 <USB_EPStartXfer+0x1b8>
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003176:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 800317a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800317e:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
                (void) USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t) ep->xfer_len, dma);
 8003182:	9200      	str	r2, [sp, #0]
 8003184:	8a0b      	ldrh	r3, [r1, #16]
 8003186:	780a      	ldrb	r2, [r1, #0]
 8003188:	68c9      	ldr	r1, [r1, #12]
 800318a:	f7ff ff0e 	bl	8002faa <USB_WritePacket>
 800318e:	e754      	b.n	800303a <USB_EPStartXfer+0x62>
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003190:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003198:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 800319c:	e7f1      	b.n	8003182 <USB_EPStartXfer+0x1aa>
            if (ep->xfer_len == 0U) {
 800319e:	690c      	ldr	r4, [r1, #16]
 80031a0:	b954      	cbnz	r4, 80031b8 <USB_EPStartXfer+0x1e0>
                USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80031a2:	691c      	ldr	r4, [r3, #16]
 80031a4:	688d      	ldr	r5, [r1, #8]
 80031a6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80031aa:	432c      	orrs	r4, r5
 80031ac:	611c      	str	r4, [r3, #16]
                USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80031ae:	691c      	ldr	r4, [r3, #16]
 80031b0:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 80031b4:	611c      	str	r4, [r3, #16]
 80031b6:	e733      	b.n	8003020 <USB_EPStartXfer+0x48>
                pktcnt = (uint16_t) ((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80031b8:	688d      	ldr	r5, [r1, #8]
 80031ba:	442c      	add	r4, r5
 80031bc:	3c01      	subs	r4, #1
 80031be:	fbb4 f4f5 	udiv	r4, r4, r5
                ep->xfer_size = ep->maxpacket * pktcnt;
 80031c2:	b2a4      	uxth	r4, r4
 80031c4:	fb04 f505 	mul.w	r5, r4, r5
 80031c8:	620d      	str	r5, [r1, #32]
                USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t) pktcnt << 19);
 80031ca:	691d      	ldr	r5, [r3, #16]
 80031cc:	4e12      	ldr	r6, [pc, #72]	@ (8003218 <USB_EPStartXfer+0x240>)
 80031ce:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 80031d2:	432c      	orrs	r4, r5
 80031d4:	611c      	str	r4, [r3, #16]
                USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80031d6:	691c      	ldr	r4, [r3, #16]
 80031d8:	6a0d      	ldr	r5, [r1, #32]
 80031da:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80031de:	432c      	orrs	r4, r5
 80031e0:	611c      	str	r4, [r3, #16]
 80031e2:	e71d      	b.n	8003020 <USB_EPStartXfer+0x48>
            if ((uint32_t) ep->xfer_buff != 0U) {
 80031e4:	68ca      	ldr	r2, [r1, #12]
 80031e6:	2a00      	cmp	r2, #0
 80031e8:	f43f af1d 	beq.w	8003026 <USB_EPStartXfer+0x4e>
                USBx_OUTEP(epnum)->DOEPDMA = (uint32_t) (ep->xfer_buff);
 80031ec:	615a      	str	r2, [r3, #20]
 80031ee:	e71a      	b.n	8003026 <USB_EPStartXfer+0x4e>
            if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 80031f0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80031f4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80031f8:	d106      	bne.n	8003208 <USB_EPStartXfer+0x230>
                USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80031fa:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 80031fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003202:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8003206:	e712      	b.n	800302e <USB_EPStartXfer+0x56>
                USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003208:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003210:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8003214:	e70b      	b.n	800302e <USB_EPStartXfer+0x56>
 8003216:	bf00      	nop
 8003218:	1ff80000 	.word	0x1ff80000

0800321c <USB_ReadPacket>:
void* USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len) {
 800321c:	b510      	push	{r4, lr}
 800321e:	4684      	mov	ip, r0
 8003220:	4608      	mov	r0, r1
    uint32_t count32b = (uint32_t) len >> 2U;
 8003222:	ea4f 0e92 	mov.w	lr, r2, lsr #2
    uint16_t remaining_bytes = len % 4U;
 8003226:	f002 0203 	and.w	r2, r2, #3
    for (i = 0U; i < count32b; i++) {
 800322a:	2300      	movs	r3, #0
 800322c:	e005      	b.n	800323a <USB_ReadPacket+0x1e>
        __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800322e:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 8003232:	6809      	ldr	r1, [r1, #0]
 8003234:	f840 1b04 	str.w	r1, [r0], #4
    for (i = 0U; i < count32b; i++) {
 8003238:	3301      	adds	r3, #1
 800323a:	4573      	cmp	r3, lr
 800323c:	d3f7      	bcc.n	800322e <USB_ReadPacket+0x12>
    if (remaining_bytes != 0U) {
 800323e:	b17a      	cbz	r2, 8003260 <USB_ReadPacket+0x44>
        __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003240:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8003244:	f8dc 4000 	ldr.w	r4, [ip]
        i = 0U;
 8003248:	2100      	movs	r1, #0
            *(uint8_t*) pDest = (uint8_t) (pData >> (8U * (uint8_t) (i)));
 800324a:	b2cb      	uxtb	r3, r1
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	fa24 f303 	lsr.w	r3, r4, r3
 8003252:	f800 3b01 	strb.w	r3, [r0], #1
            i++;
 8003256:	3101      	adds	r1, #1
            remaining_bytes--;
 8003258:	3a01      	subs	r2, #1
 800325a:	b292      	uxth	r2, r2
        } while (remaining_bytes != 0U);
 800325c:	2a00      	cmp	r2, #0
 800325e:	d1f4      	bne.n	800324a <USB_ReadPacket+0x2e>
}
 8003260:	bd10      	pop	{r4, pc}

08003262 <USB_EPSetStall>:
    uint32_t epnum = (uint32_t) ep->num;
 8003262:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in == 1U) {
 8003264:	784a      	ldrb	r2, [r1, #1]
 8003266:	2a01      	cmp	r2, #1
 8003268:	d014      	beq.n	8003294 <USB_EPSetStall+0x32>
        if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U)) {
 800326a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800326e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8003272:	2a00      	cmp	r2, #0
 8003274:	db06      	blt.n	8003284 <USB_EPSetStall+0x22>
 8003276:	b12b      	cbz	r3, 8003284 <USB_EPSetStall+0x22>
            USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003278:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800327c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003280:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003284:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003288:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800328c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8003290:	2000      	movs	r0, #0
 8003292:	4770      	bx	lr
        if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U)) {
 8003294:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003298:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 800329c:	2a00      	cmp	r2, #0
 800329e:	db06      	blt.n	80032ae <USB_EPSetStall+0x4c>
 80032a0:	b12b      	cbz	r3, 80032ae <USB_EPSetStall+0x4c>
            USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80032a2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80032a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032aa:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80032ae:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80032b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80032b6:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80032ba:	e7e9      	b.n	8003290 <USB_EPSetStall+0x2e>

080032bc <USB_EPClearStall>:
    uint32_t epnum = (uint32_t) ep->num;
 80032bc:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in == 1U) {
 80032be:	784a      	ldrb	r2, [r1, #1]
 80032c0:	2a01      	cmp	r2, #1
 80032c2:	d00e      	beq.n	80032e2 <USB_EPClearStall+0x26>
        USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80032c4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80032c8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80032cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80032d0:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 80032d4:	790b      	ldrb	r3, [r1, #4]
 80032d6:	3b02      	subs	r3, #2
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d915      	bls.n	800330a <USB_EPClearStall+0x4e>
}
 80032de:	2000      	movs	r0, #0
 80032e0:	4770      	bx	lr
        USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032e2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80032e6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80032ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80032ee:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 80032f2:	790b      	ldrb	r3, [r1, #4]
 80032f4:	3b02      	subs	r3, #2
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d8f0      	bhi.n	80032de <USB_EPClearStall+0x22>
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80032fc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003304:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8003308:	e7e9      	b.n	80032de <USB_EPClearStall+0x22>
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800330a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800330e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003312:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8003316:	e7e2      	b.n	80032de <USB_EPClearStall+0x22>

08003318 <USB_SetDevAddress>:
    USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003318:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800331c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003320:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
    USBx_DEVICE->DCFG |= ((uint32_t) address << 4) & USB_OTG_DCFG_DAD;
 8003324:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8003328:	0109      	lsls	r1, r1, #4
 800332a:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 800332e:	430b      	orrs	r3, r1
 8003330:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 8003334:	2000      	movs	r0, #0
 8003336:	4770      	bx	lr

08003338 <USB_DevConnect>:
    USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003338:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 800333c:	f023 0303 	bic.w	r3, r3, #3
 8003340:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
    USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003344:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003348:	f023 0302 	bic.w	r3, r3, #2
 800334c:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003350:	2000      	movs	r0, #0
 8003352:	4770      	bx	lr

08003354 <USB_DevDisconnect>:
    USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003354:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003358:	f023 0303 	bic.w	r3, r3, #3
 800335c:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003360:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003364:	f043 0302 	orr.w	r3, r3, #2
 8003368:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 800336c:	2000      	movs	r0, #0
 800336e:	4770      	bx	lr

08003370 <USB_ReadInterrupts>:
    tmpreg = USBx->GINTSTS;
 8003370:	6942      	ldr	r2, [r0, #20]
    tmpreg &= USBx->GINTMSK;
 8003372:	6980      	ldr	r0, [r0, #24]
}
 8003374:	4010      	ands	r0, r2
 8003376:	4770      	bx	lr

08003378 <USB_ReadDevAllOutEpInterrupt>:
    tmpreg = USBx_DEVICE->DAINT;
 8003378:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800337c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
    tmpreg &= USBx_DEVICE->DAINTMSK;
 8003380:	69c0      	ldr	r0, [r0, #28]
 8003382:	4018      	ands	r0, r3
}
 8003384:	0c00      	lsrs	r0, r0, #16
 8003386:	4770      	bx	lr

08003388 <USB_ReadDevAllInEpInterrupt>:
    tmpreg = USBx_DEVICE->DAINT;
 8003388:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800338c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
    tmpreg &= USBx_DEVICE->DAINTMSK;
 8003390:	69c0      	ldr	r0, [r0, #28]
 8003392:	4018      	ands	r0, r3
}
 8003394:	b280      	uxth	r0, r0
 8003396:	4770      	bx	lr

08003398 <USB_ReadDevOutEPInterrupt>:
    tmpreg = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003398:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800339c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
    tmpreg &= USBx_DEVICE->DOEPMSK;
 80033a0:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 80033a4:	6940      	ldr	r0, [r0, #20]
}
 80033a6:	4010      	ands	r0, r2
 80033a8:	4770      	bx	lr

080033aa <USB_ReadDevInEPInterrupt>:
    msk = USBx_DEVICE->DIEPMSK;
 80033aa:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
    emp = USBx_DEVICE->DIEPEMPMSK;
 80033ae:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
    msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80033b2:	f001 0c0f 	and.w	ip, r1, #15
 80033b6:	fa23 f30c 	lsr.w	r3, r3, ip
 80033ba:	01db      	lsls	r3, r3, #7
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	4313      	orrs	r3, r2
    tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80033c0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80033c4:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 80033c8:	6880      	ldr	r0, [r0, #8]
}
 80033ca:	4018      	ands	r0, r3
 80033cc:	4770      	bx	lr

080033ce <USB_GetMode>:
    return ((USBx->GINTSTS) & 0x1U);
 80033ce:	6940      	ldr	r0, [r0, #20]
}
 80033d0:	f000 0001 	and.w	r0, r0, #1
 80033d4:	4770      	bx	lr

080033d6 <USB_SetCurrentMode>:
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode) {
 80033d6:	b538      	push	{r3, r4, r5, lr}
 80033d8:	4605      	mov	r5, r0
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80033da:	68c3      	ldr	r3, [r0, #12]
 80033dc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80033e0:	60c3      	str	r3, [r0, #12]
    if (mode == USB_HOST_MODE) {
 80033e2:	2901      	cmp	r1, #1
 80033e4:	d013      	beq.n	800340e <USB_SetCurrentMode+0x38>
    } else if (mode == USB_DEVICE_MODE) {
 80033e6:	bb19      	cbnz	r1, 8003430 <USB_SetCurrentMode+0x5a>
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80033e8:	68c3      	ldr	r3, [r0, #12]
 80033ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033ee:	60c3      	str	r3, [r0, #12]
    uint32_t ms = 0U;
 80033f0:	2400      	movs	r4, #0
            HAL_Delay(10U);
 80033f2:	200a      	movs	r0, #10
 80033f4:	f7fd fcce 	bl	8000d94 <HAL_Delay>
            ms += 10U;
 80033f8:	340a      	adds	r4, #10
        } while ((USB_GetMode(USBx) != (uint32_t) USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80033fa:	4628      	mov	r0, r5
 80033fc:	f7ff ffe7 	bl	80033ce <USB_GetMode>
 8003400:	b108      	cbz	r0, 8003406 <USB_SetCurrentMode+0x30>
 8003402:	2cc7      	cmp	r4, #199	@ 0xc7
 8003404:	d9f5      	bls.n	80033f2 <USB_SetCurrentMode+0x1c>
    if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS) {
 8003406:	2cc8      	cmp	r4, #200	@ 0xc8
 8003408:	d014      	beq.n	8003434 <USB_SetCurrentMode+0x5e>
    return HAL_OK;
 800340a:	2000      	movs	r0, #0
}
 800340c:	bd38      	pop	{r3, r4, r5, pc}
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800340e:	68c3      	ldr	r3, [r0, #12]
 8003410:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003414:	60c3      	str	r3, [r0, #12]
    uint32_t ms = 0U;
 8003416:	2400      	movs	r4, #0
            HAL_Delay(10U);
 8003418:	200a      	movs	r0, #10
 800341a:	f7fd fcbb 	bl	8000d94 <HAL_Delay>
            ms += 10U;
 800341e:	340a      	adds	r4, #10
        } while ((USB_GetMode(USBx) != (uint32_t) USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003420:	4628      	mov	r0, r5
 8003422:	f7ff ffd4 	bl	80033ce <USB_GetMode>
 8003426:	2801      	cmp	r0, #1
 8003428:	d0ed      	beq.n	8003406 <USB_SetCurrentMode+0x30>
 800342a:	2cc7      	cmp	r4, #199	@ 0xc7
 800342c:	d9f4      	bls.n	8003418 <USB_SetCurrentMode+0x42>
 800342e:	e7ea      	b.n	8003406 <USB_SetCurrentMode+0x30>
        return HAL_ERROR;
 8003430:	2001      	movs	r0, #1
 8003432:	e7eb      	b.n	800340c <USB_SetCurrentMode+0x36>
        return HAL_ERROR;
 8003434:	2001      	movs	r0, #1
 8003436:	e7e9      	b.n	800340c <USB_SetCurrentMode+0x36>

08003438 <USB_ActivateSetup>:
    USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003438:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800343c:	f36f 030a 	bfc	r3, #0, #11
 8003440:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003444:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800344c:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8003450:	2000      	movs	r0, #0
 8003452:	4770      	bx	lr

08003454 <USB_EP0_OutStart>:
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup) {
 8003454:	b410      	push	{r4}
    uint32_t gSNPSiD = *(__IO const uint32_t*) (&USBx->CID + 0x1U);
 8003456:	6c04      	ldr	r4, [r0, #64]	@ 0x40
    if (gSNPSiD > USB_OTG_CORE_ID_300A) {
 8003458:	4b15      	ldr	r3, [pc, #84]	@ (80034b0 <USB_EP0_OutStart+0x5c>)
 800345a:	429c      	cmp	r4, r3
 800345c:	d903      	bls.n	8003466 <USB_EP0_OutStart+0x12>
        if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 800345e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003462:	2b00      	cmp	r3, #0
 8003464:	db16      	blt.n	8003494 <USB_EP0_OutStart+0x40>
    USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003466:	2400      	movs	r4, #0
 8003468:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
    USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800346c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003470:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8003474:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
    USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003478:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 800347c:	f044 0418 	orr.w	r4, r4, #24
 8003480:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
    USBx_OUTEP(0U)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_STUPCNT;
 8003484:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8003488:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 800348c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
    if (dma == 1U) {
 8003490:	2901      	cmp	r1, #1
 8003492:	d003      	beq.n	800349c <USB_EP0_OutStart+0x48>
}
 8003494:	2000      	movs	r0, #0
 8003496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800349a:	4770      	bx	lr
        USBx_OUTEP(0U)->DOEPDMA = (uint32_t) psetup;
 800349c:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
        USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80034a0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80034a4:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80034a8:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 80034ac:	e7f2      	b.n	8003494 <USB_EP0_OutStart+0x40>
 80034ae:	bf00      	nop
 80034b0:	4f54300a 	.word	0x4f54300a

080034b4 <USBD_Init>:
 */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id) {
    USBD_StatusTypeDef ret;

    /* Check whether the USB Host handle is valid */
    if (pdev == NULL) {
 80034b4:	b198      	cbz	r0, 80034de <USBD_Init+0x2a>
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id) {
 80034b6:	b508      	push	{r3, lr}
 80034b8:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
    /* Unlink previous class*/
    pdev->pClass[0] = NULL;
 80034ba:	2000      	movs	r0, #0
 80034bc:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
    pdev->pUserData[0] = NULL;
 80034c0:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

    pdev->pConfDesc = NULL;
 80034c4:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

    /* Assign USBD Descriptors */
    if (pdesc != NULL) {
 80034c8:	b109      	cbz	r1, 80034ce <USBD_Init+0x1a>
        pdev->pDesc = pdesc;
 80034ca:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
    }

    /* Set Device initial State */
    pdev->dev_state = USBD_STATE_DEFAULT;
 80034ce:	2101      	movs	r1, #1
 80034d0:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
    pdev->id = id;
 80034d4:	701a      	strb	r2, [r3, #0]

    /* Initialize low level driver */
    ret = USBD_LL_Init(pdev);
 80034d6:	4618      	mov	r0, r3
 80034d8:	f001 fc3c 	bl	8004d54 <USBD_LL_Init>

    return ret;
}
 80034dc:	bd08      	pop	{r3, pc}
        return USBD_FAIL;
 80034de:	2003      	movs	r0, #3
}
 80034e0:	4770      	bx	lr

080034e2 <USBD_RegisterClass>:
 *         Link class driver to Device Core.
 * @param  pdev: Device Handle
 * @param  pclass: Class handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass) {
 80034e2:	b510      	push	{r4, lr}
 80034e4:	b082      	sub	sp, #8
    uint16_t len = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f8ad 3006 	strh.w	r3, [sp, #6]

    if (pclass == NULL) {
 80034ec:	b1b9      	cbz	r1, 800351e <USBD_RegisterClass+0x3c>
 80034ee:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
        return USBD_FAIL;
    }

    /* link the class to the USB Device handle */
    pdev->pClass[0] = pclass;
 80034f0:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
    if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL) {
 80034f4:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 80034f8:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80034fa:	b143      	cbz	r3, 800350e <USBD_RegisterClass+0x2c>
        pdev->pConfDesc = (void*) pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80034fc:	32ae      	adds	r2, #174	@ 0xae
 80034fe:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8003502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003504:	f10d 0006 	add.w	r0, sp, #6
 8003508:	4798      	blx	r3
 800350a:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
    }
#endif /* USE_USB_FS */

    /* Increment the NumClasses */
    pdev->NumClasses++;
 800350e:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8003512:	3301      	adds	r3, #1
 8003514:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

    return USBD_OK;
 8003518:	2000      	movs	r0, #0
}
 800351a:	b002      	add	sp, #8
 800351c:	bd10      	pop	{r4, pc}
        return USBD_FAIL;
 800351e:	2003      	movs	r0, #3
 8003520:	e7fb      	b.n	800351a <USBD_RegisterClass+0x38>

08003522 <USBD_Start>:
 * @brief  USBD_Start
 *         Start the USB Device Core.
 * @param  pdev: Device Handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev) {
 8003522:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

    /* Start the low level driver  */
    return USBD_LL_Start(pdev);
 8003524:	f001 fc6f 	bl	8004e06 <USBD_LL_Start>
}
 8003528:	bd08      	pop	{r3, pc}

0800352a <USBD_Stop>:
 * @brief  USBD_Stop
 *         Stop the USB Device Core.
 * @param  pdev: Device Handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev) {
 800352a:	b510      	push	{r4, lr}
 800352c:	4604      	mov	r4, r0
    /* Disconnect USB Device */
    (void) USBD_LL_Stop(pdev);
 800352e:	f001 fc72 	bl	8004e16 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
    if (pdev->pClass[0] != NULL) {
 8003532:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8003536:	b11b      	cbz	r3, 8003540 <USBD_Stop+0x16>
        (void) pdev->pClass[0]->DeInit(pdev, (uint8_t) pdev->dev_config);
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	7921      	ldrb	r1, [r4, #4]
 800353c:	4620      	mov	r0, r4
 800353e:	4798      	blx	r3
    }
#endif /* USE_USBD_COMPOSITE */

    return USBD_OK;
}
 8003540:	2000      	movs	r0, #0
 8003542:	bd10      	pop	{r4, pc}

08003544 <USBD_SetClassConfig>:
 * @param  pdev: device instance
 * @param  cfgidx: configuration index
 * @retval status
 */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 8003544:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
    if (pdev->pClass[0] != NULL) {
 8003546:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800354a:	b113      	cbz	r3, 8003552 <USBD_SetClassConfig+0xe>
        /* Set configuration and Start the Class */
        ret = (USBD_StatusTypeDef) pdev->pClass[0]->Init(pdev, cfgidx);
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4798      	blx	r3
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
}
 8003550:	bd08      	pop	{r3, pc}
    USBD_StatusTypeDef ret = USBD_OK;
 8003552:	2000      	movs	r0, #0
 8003554:	e7fc      	b.n	8003550 <USBD_SetClassConfig+0xc>

08003556 <USBD_ClrClassConfig>:
 *         Clear current configuration
 * @param  pdev: device instance
 * @param  cfgidx: configuration index
 * @retval status
 */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 8003556:	b508      	push	{r3, lr}
      }
    }
  }
#else
    /* Clear configuration  and De-initialize the Class process */
    if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U) {
 8003558:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4798      	blx	r3
 8003560:	b900      	cbnz	r0, 8003564 <USBD_ClrClassConfig+0xe>
        ret = USBD_FAIL;
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
}
 8003562:	bd08      	pop	{r3, pc}
        ret = USBD_FAIL;
 8003564:	2003      	movs	r0, #3
 8003566:	e7fc      	b.n	8003562 <USBD_ClrClassConfig+0xc>

08003568 <USBD_LL_SetupStage>:
 *         Handle the setup stage
 * @param  pdev: device instance
 * @param  psetup: setup packet buffer pointer
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup) {
 8003568:	b538      	push	{r3, r4, r5, lr}
 800356a:	4604      	mov	r4, r0
    USBD_StatusTypeDef ret;

    USBD_ParseSetupRequest(&pdev->request, psetup);
 800356c:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8003570:	4628      	mov	r0, r5
 8003572:	f000 f9ae 	bl	80038d2 <USBD_ParseSetupRequest>

    pdev->ep0_state = USBD_EP0_SETUP;
 8003576:	2301      	movs	r3, #1
 8003578:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

    pdev->ep0_data_len = pdev->request.wLength;
 800357c:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8003580:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

    switch (pdev->request.bmRequest & 0x1FU) {
 8003584:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8003588:	f001 031f 	and.w	r3, r1, #31
 800358c:	2b01      	cmp	r3, #1
 800358e:	d007      	beq.n	80035a0 <USBD_LL_SetupStage+0x38>
 8003590:	2b02      	cmp	r3, #2
 8003592:	d00a      	beq.n	80035aa <USBD_LL_SetupStage+0x42>
 8003594:	b973      	cbnz	r3, 80035b4 <USBD_LL_SetupStage+0x4c>
    case USB_REQ_RECIPIENT_DEVICE:
        ret = USBD_StdDevReq(pdev, &pdev->request);
 8003596:	4629      	mov	r1, r5
 8003598:	4620      	mov	r0, r4
 800359a:	f000 fb85 	bl	8003ca8 <USBD_StdDevReq>
        ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
        break;
    }

    return ret;
}
 800359e:	bd38      	pop	{r3, r4, r5, pc}
        ret = USBD_StdItfReq(pdev, &pdev->request);
 80035a0:	4629      	mov	r1, r5
 80035a2:	4620      	mov	r0, r4
 80035a4:	f000 fbbb 	bl	8003d1e <USBD_StdItfReq>
        break;
 80035a8:	e7f9      	b.n	800359e <USBD_LL_SetupStage+0x36>
        ret = USBD_StdEPReq(pdev, &pdev->request);
 80035aa:	4629      	mov	r1, r5
 80035ac:	4620      	mov	r0, r4
 80035ae:	f000 fbf8 	bl	8003da2 <USBD_StdEPReq>
        break;
 80035b2:	e7f4      	b.n	800359e <USBD_LL_SetupStage+0x36>
        ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80035b4:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80035b8:	4620      	mov	r0, r4
 80035ba:	f001 fc3f 	bl	8004e3c <USBD_LL_StallEP>
        break;
 80035be:	e7ee      	b.n	800359e <USBD_LL_SetupStage+0x36>

080035c0 <USBD_LL_Reset>:
 * @brief  USBD_LL_Reset
 *         Handle Reset event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev) {
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	4604      	mov	r4, r0
    USBD_StatusTypeDef ret = USBD_OK;

    /* Upon Reset call user call back */
    pdev->dev_state = USBD_STATE_DEFAULT;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
    pdev->ep0_state = USBD_EP0_IDLE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
    pdev->dev_config = 0U;
 80035d0:	6043      	str	r3, [r0, #4]
    pdev->dev_remote_wakeup = 0U;
 80035d2:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    pdev->dev_test_mode = 0U;
 80035d6:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

    if (pdev->pClass[0] != NULL) {
 80035da:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80035de:	b1e3      	cbz	r3, 800361a <USBD_LL_Reset+0x5a>
        if (pdev->pClass[0]->DeInit != NULL) {
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	b1e3      	cbz	r3, 800361e <USBD_LL_Reset+0x5e>
            if (pdev->pClass[0]->DeInit(pdev, (uint8_t) pdev->dev_config) != USBD_OK) {
 80035e4:	2100      	movs	r1, #0
 80035e6:	4798      	blx	r3
 80035e8:	4607      	mov	r7, r0
 80035ea:	b9d0      	cbnz	r0, 8003622 <USBD_LL_Reset+0x62>
        }
    }
#endif /* USE_USBD_COMPOSITE */

    /* Open EP0 OUT */
    (void) USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80035ec:	2340      	movs	r3, #64	@ 0x40
 80035ee:	2200      	movs	r2, #0
 80035f0:	4611      	mov	r1, r2
 80035f2:	4620      	mov	r0, r4
 80035f4:	f001 fc17 	bl	8004e26 <USBD_LL_OpenEP>
    pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80035f8:	2601      	movs	r6, #1
 80035fa:	f884 6163 	strb.w	r6, [r4, #355]	@ 0x163

    pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80035fe:	2540      	movs	r5, #64	@ 0x40
 8003600:	f8a4 5160 	strh.w	r5, [r4, #352]	@ 0x160

    /* Open EP0 IN */
    (void) USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003604:	462b      	mov	r3, r5
 8003606:	2200      	movs	r2, #0
 8003608:	2180      	movs	r1, #128	@ 0x80
 800360a:	4620      	mov	r0, r4
 800360c:	f001 fc0b 	bl	8004e26 <USBD_LL_OpenEP>
    pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003610:	f884 6023 	strb.w	r6, [r4, #35]	@ 0x23

    pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003614:	8425      	strh	r5, [r4, #32]

    return ret;
}
 8003616:	4638      	mov	r0, r7
 8003618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_StatusTypeDef ret = USBD_OK;
 800361a:	2700      	movs	r7, #0
 800361c:	e7e6      	b.n	80035ec <USBD_LL_Reset+0x2c>
 800361e:	2700      	movs	r7, #0
 8003620:	e7e4      	b.n	80035ec <USBD_LL_Reset+0x2c>
                ret = USBD_FAIL;
 8003622:	2703      	movs	r7, #3
 8003624:	e7e2      	b.n	80035ec <USBD_LL_Reset+0x2c>

08003626 <USBD_LL_SetSpeed>:
 *         Handle Reset event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev, USBD_SpeedTypeDef speed) {
    pdev->dev_speed = speed;
 8003626:	7401      	strb	r1, [r0, #16]

    return USBD_OK;
}
 8003628:	2000      	movs	r0, #0
 800362a:	4770      	bx	lr

0800362c <USBD_LL_Suspend>:
 *         Handle Suspend event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev) {
    if (pdev->dev_state != USBD_STATE_SUSPENDED) {
 800362c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b04      	cmp	r3, #4
 8003634:	d004      	beq.n	8003640 <USBD_LL_Suspend+0x14>
        pdev->dev_old_state = pdev->dev_state;
 8003636:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
    }

    pdev->dev_state = USBD_STATE_SUSPENDED;
 8003640:	2304      	movs	r3, #4
 8003642:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

    return USBD_OK;
}
 8003646:	2000      	movs	r0, #0
 8003648:	4770      	bx	lr

0800364a <USBD_LL_Resume>:
 *         Handle Resume event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev) {
    if (pdev->dev_state == USBD_STATE_SUSPENDED) {
 800364a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b04      	cmp	r3, #4
 8003652:	d001      	beq.n	8003658 <USBD_LL_Resume+0xe>
        pdev->dev_state = pdev->dev_old_state;
    }

    return USBD_OK;
}
 8003654:	2000      	movs	r0, #0
 8003656:	4770      	bx	lr
        pdev->dev_state = pdev->dev_old_state;
 8003658:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8003662:	e7f7      	b.n	8003654 <USBD_LL_Resume+0xa>

08003664 <USBD_LL_SOF>:
 * @brief  USBD_LL_SOF
 *         Handle SOF event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev) {
 8003664:	b508      	push	{r3, lr}
    /* The SOF event can be distributed for all classes that support it */
    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8003666:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b03      	cmp	r3, #3
 800366e:	d001      	beq.n	8003674 <USBD_LL_SOF+0x10>
        }
#endif /* USE_USBD_COMPOSITE */
    }

    return USBD_OK;
}
 8003670:	2000      	movs	r0, #0
 8003672:	bd08      	pop	{r3, pc}
        if (pdev->pClass[0] != NULL) {
 8003674:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f9      	beq.n	8003670 <USBD_LL_SOF+0xc>
            if (pdev->pClass[0]->SOF != NULL) {
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f6      	beq.n	8003670 <USBD_LL_SOF+0xc>
                (void) pdev->pClass[0]->SOF(pdev);
 8003682:	4798      	blx	r3
 8003684:	e7f4      	b.n	8003670 <USBD_LL_SOF+0xc>

08003686 <USBD_LL_IsoINIncomplete>:
 *         Handle iso in incomplete event
 * @param  pdev: device instance
 * @param  epnum: Endpoint number
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8003686:	b508      	push	{r3, lr}
    if (pdev->pClass[pdev->classId] == NULL) {
 8003688:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800368c:	33ae      	adds	r3, #174	@ 0xae
 800368e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8003692:	b15a      	cbz	r2, 80036ac <USBD_LL_IsoINIncomplete+0x26>
        return USBD_FAIL;
    }

    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8003694:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b03      	cmp	r3, #3
 800369c:	d001      	beq.n	80036a2 <USBD_LL_IsoINIncomplete+0x1c>
        if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL) {
            (void) pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
        }
    }

    return USBD_OK;
 800369e:	2000      	movs	r0, #0
}
 80036a0:	bd08      	pop	{r3, pc}
        if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL) {
 80036a2:	6a13      	ldr	r3, [r2, #32]
 80036a4:	b123      	cbz	r3, 80036b0 <USBD_LL_IsoINIncomplete+0x2a>
            (void) pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80036a6:	4798      	blx	r3
    return USBD_OK;
 80036a8:	2000      	movs	r0, #0
 80036aa:	e7f9      	b.n	80036a0 <USBD_LL_IsoINIncomplete+0x1a>
        return USBD_FAIL;
 80036ac:	2003      	movs	r0, #3
 80036ae:	e7f7      	b.n	80036a0 <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_OK;
 80036b0:	2000      	movs	r0, #0
 80036b2:	e7f5      	b.n	80036a0 <USBD_LL_IsoINIncomplete+0x1a>

080036b4 <USBD_LL_IsoOUTIncomplete>:
 *         Handle iso out incomplete event
 * @param  pdev: device instance
 * @param  epnum: Endpoint number
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 80036b4:	b508      	push	{r3, lr}
    if (pdev->pClass[pdev->classId] == NULL) {
 80036b6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80036ba:	33ae      	adds	r3, #174	@ 0xae
 80036bc:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80036c0:	b15a      	cbz	r2, 80036da <USBD_LL_IsoOUTIncomplete+0x26>
        return USBD_FAIL;
    }

    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80036c2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d001      	beq.n	80036d0 <USBD_LL_IsoOUTIncomplete+0x1c>
        if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL) {
            (void) pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
        }
    }

    return USBD_OK;
 80036cc:	2000      	movs	r0, #0
}
 80036ce:	bd08      	pop	{r3, pc}
        if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL) {
 80036d0:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80036d2:	b123      	cbz	r3, 80036de <USBD_LL_IsoOUTIncomplete+0x2a>
            (void) pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80036d4:	4798      	blx	r3
    return USBD_OK;
 80036d6:	2000      	movs	r0, #0
 80036d8:	e7f9      	b.n	80036ce <USBD_LL_IsoOUTIncomplete+0x1a>
        return USBD_FAIL;
 80036da:	2003      	movs	r0, #3
 80036dc:	e7f7      	b.n	80036ce <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_OK;
 80036de:	2000      	movs	r0, #0
 80036e0:	e7f5      	b.n	80036ce <USBD_LL_IsoOUTIncomplete+0x1a>

080036e2 <USBD_LL_DevConnected>:
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev) {
    /* Prevent unused argument compilation warning */
    UNUSED(pdev);

    return USBD_OK;
}
 80036e2:	2000      	movs	r0, #0
 80036e4:	4770      	bx	lr

080036e6 <USBD_LL_DevDisconnected>:
 * @brief  USBD_LL_DevDisconnected
 *         Handle device disconnection event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev) {
 80036e6:	b508      	push	{r3, lr}
    USBD_StatusTypeDef ret = USBD_OK;

    /* Free Class Resources */
    pdev->dev_state = USBD_STATE_DEFAULT;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
    if (pdev->pClass[0] != NULL) {
 80036ee:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80036f2:	b123      	cbz	r3, 80036fe <USBD_LL_DevDisconnected+0x18>
        if (pdev->pClass[0]->DeInit(pdev, (uint8_t) pdev->dev_config) != 0U) {
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	7901      	ldrb	r1, [r0, #4]
 80036f8:	4798      	blx	r3
 80036fa:	b910      	cbnz	r0, 8003702 <USBD_LL_DevDisconnected+0x1c>
        }
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
}
 80036fc:	bd08      	pop	{r3, pc}
    USBD_StatusTypeDef ret = USBD_OK;
 80036fe:	2000      	movs	r0, #0
 8003700:	e7fc      	b.n	80036fc <USBD_LL_DevDisconnected+0x16>
            ret = USBD_FAIL;
 8003702:	2003      	movs	r0, #3
 8003704:	e7fa      	b.n	80036fc <USBD_LL_DevDisconnected+0x16>

08003706 <USBD_CoreFindIF>:
    UNUSED(pdev);
    UNUSED(index);

    return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8003706:	2000      	movs	r0, #0
 8003708:	4770      	bx	lr

0800370a <USBD_CoreFindEP>:
    UNUSED(pdev);
    UNUSED(index);

    return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800370a:	2000      	movs	r0, #0
 800370c:	4770      	bx	lr

0800370e <USBD_LL_DataOutStage>:
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev, uint8_t epnum, uint8_t *pdata) {
 800370e:	b538      	push	{r3, r4, r5, lr}
 8003710:	4604      	mov	r4, r0
    if (epnum == 0U) {
 8003712:	460d      	mov	r5, r1
 8003714:	2900      	cmp	r1, #0
 8003716:	d145      	bne.n	80037a4 <USBD_LL_DataOutStage+0x96>
        if (pdev->ep0_state == USBD_EP0_DATA_OUT) {
 8003718:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 800371c:	2b03      	cmp	r3, #3
 800371e:	d001      	beq.n	8003724 <USBD_LL_DataOutStage+0x16>
    return USBD_OK;
 8003720:	4608      	mov	r0, r1
}
 8003722:	bd38      	pop	{r3, r4, r5, pc}
            if (pep->rem_length > pep->maxpacket) {
 8003724:	f8d0 3158 	ldr.w	r3, [r0, #344]	@ 0x158
 8003728:	f8b0 2160 	ldrh.w	r2, [r0, #352]	@ 0x160
 800372c:	4293      	cmp	r3, r2
 800372e:	d809      	bhi.n	8003744 <USBD_LL_DataOutStage+0x36>
                switch (pdev->request.bmRequest & 0x1FU) {
 8003730:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	2b01      	cmp	r3, #1
 800373a:	d012      	beq.n	8003762 <USBD_LL_DataOutStage+0x54>
 800373c:	2b02      	cmp	r3, #2
 800373e:	d01f      	beq.n	8003780 <USBD_LL_DataOutStage+0x72>
 8003740:	4608      	mov	r0, r1
 8003742:	e013      	b.n	800376c <USBD_LL_DataOutStage+0x5e>
                pep->rem_length -= pep->maxpacket;
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158
                pep->pbuffer += pep->maxpacket;
 800374a:	f8d0 1164 	ldr.w	r1, [r0, #356]	@ 0x164
 800374e:	4411      	add	r1, r2
 8003750:	f8c0 1164 	str.w	r1, [r0, #356]	@ 0x164
                (void) USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8003754:	429a      	cmp	r2, r3
 8003756:	bf38      	it	cc
 8003758:	461a      	movcc	r2, r3
 800375a:	f001 f8b1 	bl	80048c0 <USBD_CtlContinueRx>
    return USBD_OK;
 800375e:	4628      	mov	r0, r5
 8003760:	e7df      	b.n	8003722 <USBD_LL_DataOutStage+0x14>
                    idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8003762:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8003766:	f7ff ffce 	bl	8003706 <USBD_CoreFindIF>
                if (idx < USBD_MAX_SUPPORTED_CLASS) {
 800376a:	b920      	cbnz	r0, 8003776 <USBD_LL_DataOutStage+0x68>
                    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800376c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b03      	cmp	r3, #3
 8003774:	d009      	beq.n	800378a <USBD_LL_DataOutStage+0x7c>
                (void) USBD_CtlSendStatus(pdev);
 8003776:	4620      	mov	r0, r4
 8003778:	f001 f8aa 	bl	80048d0 <USBD_CtlSendStatus>
    return USBD_OK;
 800377c:	4628      	mov	r0, r5
 800377e:	e7d0      	b.n	8003722 <USBD_LL_DataOutStage+0x14>
                    idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8003780:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8003784:	f7ff ffc1 	bl	800370a <USBD_CoreFindEP>
                    break;
 8003788:	e7ef      	b.n	800376a <USBD_LL_DataOutStage+0x5c>
                        if (pdev->pClass[idx]->EP0_RxReady != NULL) {
 800378a:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800378e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	2a00      	cmp	r2, #0
 8003796:	d0ee      	beq.n	8003776 <USBD_LL_DataOutStage+0x68>
                            pdev->classId = idx;
 8003798:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                            pdev->pClass[idx]->EP0_RxReady(pdev);
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	4620      	mov	r0, r4
 80037a0:	4798      	blx	r3
 80037a2:	e7e8      	b.n	8003776 <USBD_LL_DataOutStage+0x68>
        idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80037a4:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80037a8:	f7ff ffaf 	bl	800370a <USBD_CoreFindEP>
        if (((uint16_t) idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 80037ac:	b990      	cbnz	r0, 80037d4 <USBD_LL_DataOutStage+0xc6>
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80037ae:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d1b4      	bne.n	8003722 <USBD_LL_DataOutStage+0x14>
                if (pdev->pClass[idx]->DataOut != NULL) {
 80037b8:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 80037bc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	2a00      	cmp	r2, #0
 80037c4:	d0ad      	beq.n	8003722 <USBD_LL_DataOutStage+0x14>
                    pdev->classId = idx;
 80037c6:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                    ret = (USBD_StatusTypeDef) pdev->pClass[idx]->DataOut(pdev, epnum);
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	4629      	mov	r1, r5
 80037ce:	4620      	mov	r0, r4
 80037d0:	4798      	blx	r3
            if (ret != USBD_OK) {
 80037d2:	e7a6      	b.n	8003722 <USBD_LL_DataOutStage+0x14>
    return USBD_OK;
 80037d4:	2000      	movs	r0, #0
 80037d6:	e7a4      	b.n	8003722 <USBD_LL_DataOutStage+0x14>

080037d8 <USBD_LL_DataInStage>:
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum, uint8_t *pdata) {
 80037d8:	b538      	push	{r3, r4, r5, lr}
 80037da:	4604      	mov	r4, r0
    if (epnum == 0U) {
 80037dc:	460d      	mov	r5, r1
 80037de:	2900      	cmp	r1, #0
 80037e0:	d14c      	bne.n	800387c <USBD_LL_DataInStage+0xa4>
        if (pdev->ep0_state == USBD_EP0_DATA_IN) {
 80037e2:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d007      	beq.n	80037fa <USBD_LL_DataInStage+0x22>
        if (pdev->dev_test_mode != 0U) {
 80037ea:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 80037ee:	b118      	cbz	r0, 80037f8 <USBD_LL_DataInStage+0x20>
            pdev->dev_test_mode = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
    return USBD_OK;
 80037f6:	4628      	mov	r0, r5
}
 80037f8:	bd38      	pop	{r3, r4, r5, pc}
            if (pep->rem_length > pep->maxpacket) {
 80037fa:	6982      	ldr	r2, [r0, #24]
 80037fc:	8c03      	ldrh	r3, [r0, #32]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d80e      	bhi.n	8003820 <USBD_LL_DataInStage+0x48>
                if ((pep->maxpacket == pep->rem_length) && (pep->total_length >= pep->maxpacket) && (pep->total_length < pdev->ep0_data_len)) {
 8003802:	429a      	cmp	r2, r3
 8003804:	d01a      	beq.n	800383c <USBD_LL_DataInStage+0x64>
                    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8003806:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b03      	cmp	r3, #3
 800380e:	d029      	beq.n	8003864 <USBD_LL_DataInStage+0x8c>
                    (void) USBD_LL_StallEP(pdev, 0x80U);
 8003810:	2180      	movs	r1, #128	@ 0x80
 8003812:	4620      	mov	r0, r4
 8003814:	f001 fb12 	bl	8004e3c <USBD_LL_StallEP>
                    (void) USBD_CtlReceiveStatus(pdev);
 8003818:	4620      	mov	r0, r4
 800381a:	f001 f864 	bl	80048e6 <USBD_CtlReceiveStatus>
 800381e:	e7e4      	b.n	80037ea <USBD_LL_DataInStage+0x12>
                pep->rem_length -= pep->maxpacket;
 8003820:	1ad2      	subs	r2, r2, r3
 8003822:	6182      	str	r2, [r0, #24]
                pep->pbuffer += pep->maxpacket;
 8003824:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8003826:	4419      	add	r1, r3
 8003828:	6241      	str	r1, [r0, #36]	@ 0x24
                (void) USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800382a:	f001 f830 	bl	800488e <USBD_CtlContinueSendData>
                (void) USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800382e:	2300      	movs	r3, #0
 8003830:	461a      	mov	r2, r3
 8003832:	4619      	mov	r1, r3
 8003834:	4620      	mov	r0, r4
 8003836:	f001 fb21 	bl	8004e7c <USBD_LL_PrepareReceive>
 800383a:	e7d6      	b.n	80037ea <USBD_LL_DataInStage+0x12>
                if ((pep->maxpacket == pep->rem_length) && (pep->total_length >= pep->maxpacket) && (pep->total_length < pdev->ep0_data_len)) {
 800383c:	6942      	ldr	r2, [r0, #20]
 800383e:	4293      	cmp	r3, r2
 8003840:	d8e1      	bhi.n	8003806 <USBD_LL_DataInStage+0x2e>
 8003842:	f8d0 3298 	ldr.w	r3, [r0, #664]	@ 0x298
 8003846:	429a      	cmp	r2, r3
 8003848:	d2dd      	bcs.n	8003806 <USBD_LL_DataInStage+0x2e>
                    (void) USBD_CtlContinueSendData(pdev, NULL, 0U);
 800384a:	2200      	movs	r2, #0
 800384c:	4611      	mov	r1, r2
 800384e:	f001 f81e 	bl	800488e <USBD_CtlContinueSendData>
                    pdev->ep0_data_len = 0U;
 8003852:	2100      	movs	r1, #0
 8003854:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
                    (void) USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003858:	460b      	mov	r3, r1
 800385a:	460a      	mov	r2, r1
 800385c:	4620      	mov	r0, r4
 800385e:	f001 fb0d 	bl	8004e7c <USBD_LL_PrepareReceive>
 8003862:	e7c2      	b.n	80037ea <USBD_LL_DataInStage+0x12>
                        if (pdev->pClass[0]->EP0_TxSent != NULL) {
 8003864:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	2a00      	cmp	r2, #0
 800386c:	d0d0      	beq.n	8003810 <USBD_LL_DataInStage+0x38>
                            pdev->classId = 0U;
 800386e:	2200      	movs	r2, #0
 8003870:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
                            pdev->pClass[0]->EP0_TxSent(pdev);
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	4620      	mov	r0, r4
 8003878:	4798      	blx	r3
 800387a:	e7c9      	b.n	8003810 <USBD_LL_DataInStage+0x38>
        idx = USBD_CoreFindEP(pdev, ((uint8_t) epnum | 0x80U));
 800387c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8003880:	f7ff ff43 	bl	800370a <USBD_CoreFindEP>
        if (((uint16_t) idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 8003884:	b990      	cbnz	r0, 80038ac <USBD_LL_DataInStage+0xd4>
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8003886:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b03      	cmp	r3, #3
 800388e:	d1b3      	bne.n	80037f8 <USBD_LL_DataInStage+0x20>
                if (pdev->pClass[idx]->DataIn != NULL) {
 8003890:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8003894:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	2a00      	cmp	r2, #0
 800389c:	d0ac      	beq.n	80037f8 <USBD_LL_DataInStage+0x20>
                    pdev->classId = idx;
 800389e:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                    ret = (USBD_StatusTypeDef) pdev->pClass[idx]->DataIn(pdev, epnum);
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	4629      	mov	r1, r5
 80038a6:	4620      	mov	r0, r4
 80038a8:	4798      	blx	r3
                    if (ret != USBD_OK) {
 80038aa:	e7a5      	b.n	80037f8 <USBD_LL_DataInStage+0x20>
    return USBD_OK;
 80038ac:	2000      	movs	r0, #0
 80038ae:	e7a3      	b.n	80037f8 <USBD_LL_DataInStage+0x20>

080038b0 <USBD_GetNextDesc>:
 * @retval next header
 */
USBD_DescHeaderTypeDef* USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr) {
    USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef*) (void*) pbuf;

    *ptr += pnext->bLength;
 80038b0:	880b      	ldrh	r3, [r1, #0]
 80038b2:	7802      	ldrb	r2, [r0, #0]
 80038b4:	4413      	add	r3, r2
 80038b6:	800b      	strh	r3, [r1, #0]
    pnext = (USBD_DescHeaderTypeDef*) (void*) (pbuf + pnext->bLength);
 80038b8:	7803      	ldrb	r3, [r0, #0]

    return (pnext);
}
 80038ba:	4418      	add	r0, r3
 80038bc:	4770      	bx	lr

080038be <USBD_GetLen>:
 * @brief  USBD_GetLen
 *         return the string length
 * @param  buf : pointer to the ascii string buffer
 * @retval string length
 */
static uint8_t USBD_GetLen(uint8_t *buf) {
 80038be:	4603      	mov	r3, r0
    uint8_t len = 0U;
 80038c0:	2000      	movs	r0, #0
    uint8_t *pbuff = buf;

    while (*pbuff != (uint8_t) '\0') {
 80038c2:	e002      	b.n	80038ca <USBD_GetLen+0xc>
        len++;
 80038c4:	3001      	adds	r0, #1
 80038c6:	b2c0      	uxtb	r0, r0
        pbuff++;
 80038c8:	3301      	adds	r3, #1
    while (*pbuff != (uint8_t) '\0') {
 80038ca:	781a      	ldrb	r2, [r3, #0]
 80038cc:	2a00      	cmp	r2, #0
 80038ce:	d1f9      	bne.n	80038c4 <USBD_GetLen+0x6>
    }

    return len;
}
 80038d0:	4770      	bx	lr

080038d2 <USBD_ParseSetupRequest>:
    req->bmRequest = *(uint8_t*) (pbuff);
 80038d2:	780b      	ldrb	r3, [r1, #0]
 80038d4:	7003      	strb	r3, [r0, #0]
    req->bRequest = *(uint8_t*) (pbuff);
 80038d6:	784b      	ldrb	r3, [r1, #1]
 80038d8:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 80038da:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80038dc:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80038de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    req->wValue = SWAPBYTE(pbuff);
 80038e2:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 80038e4:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 80038e6:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80038e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    req->wIndex = SWAPBYTE(pbuff);
 80038ec:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 80038ee:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 80038f0:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80038f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    req->wLength = SWAPBYTE(pbuff);
 80038f6:	80c3      	strh	r3, [r0, #6]
}
 80038f8:	4770      	bx	lr

080038fa <USBD_CtlError>:
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 80038fa:	b510      	push	{r4, lr}
 80038fc:	4604      	mov	r4, r0
    (void) USBD_LL_StallEP(pdev, 0x80U);
 80038fe:	2180      	movs	r1, #128	@ 0x80
 8003900:	f001 fa9c 	bl	8004e3c <USBD_LL_StallEP>
    (void) USBD_LL_StallEP(pdev, 0U);
 8003904:	2100      	movs	r1, #0
 8003906:	4620      	mov	r0, r4
 8003908:	f001 fa98 	bl	8004e3c <USBD_LL_StallEP>
}
 800390c:	bd10      	pop	{r4, pc}

0800390e <USBD_GetDescriptor>:
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800390e:	b570      	push	{r4, r5, r6, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	4604      	mov	r4, r0
 8003914:	460d      	mov	r5, r1
    uint16_t len = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	f8ad 3006 	strh.w	r3, [sp, #6]
    switch (req->wValue >> 8) {
 800391c:	884a      	ldrh	r2, [r1, #2]
 800391e:	0a13      	lsrs	r3, r2, #8
 8003920:	3b01      	subs	r3, #1
 8003922:	2b06      	cmp	r3, #6
 8003924:	f200 80c1 	bhi.w	8003aaa <USBD_GetDescriptor+0x19c>
 8003928:	e8df f003 	tbb	[pc, r3]
 800392c:	bf331f04 	.word	0xbf331f04
 8003930:	a3bf      	.short	0xa3bf
 8003932:	b0          	.byte	0xb0
 8003933:	00          	.byte	0x00
        pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003934:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f10d 0106 	add.w	r1, sp, #6
 800393e:	7c00      	ldrb	r0, [r0, #16]
 8003940:	4798      	blx	r3
    if (req->wLength != 0U) {
 8003942:	88ea      	ldrh	r2, [r5, #6]
 8003944:	2a00      	cmp	r2, #0
 8003946:	f000 80b9 	beq.w	8003abc <USBD_GetDescriptor+0x1ae>
        if (len != 0U) {
 800394a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 80af 	beq.w	8003ab2 <USBD_GetDescriptor+0x1a4>
            len = MIN(len, req->wLength);
 8003954:	429a      	cmp	r2, r3
 8003956:	bf28      	it	cs
 8003958:	461a      	movcs	r2, r3
 800395a:	f8ad 2006 	strh.w	r2, [sp, #6]
            (void) USBD_CtlSendData(pdev, pbuf, len);
 800395e:	4601      	mov	r1, r0
 8003960:	4620      	mov	r0, r4
 8003962:	f000 ff86 	bl	8004872 <USBD_CtlSendData>
}
 8003966:	b002      	add	sp, #8
 8003968:	bd70      	pop	{r4, r5, r6, pc}
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800396a:	7c03      	ldrb	r3, [r0, #16]
 800396c:	b943      	cbnz	r3, 8003980 <USBD_GetDescriptor+0x72>
                pbuf = (uint8_t*) pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800396e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003974:	f10d 0006 	add.w	r0, sp, #6
 8003978:	4798      	blx	r3
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800397a:	2302      	movs	r3, #2
 800397c:	7043      	strb	r3, [r0, #1]
    if (err != 0U) {
 800397e:	e7e0      	b.n	8003942 <USBD_GetDescriptor+0x34>
                pbuf = (uint8_t*) pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8003980:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003986:	f10d 0006 	add.w	r0, sp, #6
 800398a:	4798      	blx	r3
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800398c:	2302      	movs	r3, #2
 800398e:	7043      	strb	r3, [r0, #1]
    if (err != 0U) {
 8003990:	e7d7      	b.n	8003942 <USBD_GetDescriptor+0x34>
        switch ((uint8_t) (req->wValue)) {
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	2a05      	cmp	r2, #5
 8003996:	d869      	bhi.n	8003a6c <USBD_GetDescriptor+0x15e>
 8003998:	e8df f002 	tbb	[pc, r2]
 800399c:	2a1d1003 	.word	0x2a1d1003
 80039a0:	4437      	.short	0x4437
            if (pdev->pDesc->GetLangIDStrDescriptor != NULL) {
 80039a2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	b123      	cbz	r3, 80039b4 <USBD_GetDescriptor+0xa6>
                pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80039aa:	f10d 0106 	add.w	r1, sp, #6
 80039ae:	7c00      	ldrb	r0, [r0, #16]
 80039b0:	4798      	blx	r3
    if (err != 0U) {
 80039b2:	e7c6      	b.n	8003942 <USBD_GetDescriptor+0x34>
                USBD_CtlError(pdev, req);
 80039b4:	4629      	mov	r1, r5
 80039b6:	f7ff ffa0 	bl	80038fa <USBD_CtlError>
    if (err != 0U) {
 80039ba:	e7d4      	b.n	8003966 <USBD_GetDescriptor+0x58>
            if (pdev->pDesc->GetManufacturerStrDescriptor != NULL) {
 80039bc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	b123      	cbz	r3, 80039ce <USBD_GetDescriptor+0xc0>
                pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80039c4:	f10d 0106 	add.w	r1, sp, #6
 80039c8:	7c00      	ldrb	r0, [r0, #16]
 80039ca:	4798      	blx	r3
    if (err != 0U) {
 80039cc:	e7b9      	b.n	8003942 <USBD_GetDescriptor+0x34>
                USBD_CtlError(pdev, req);
 80039ce:	4629      	mov	r1, r5
 80039d0:	f7ff ff93 	bl	80038fa <USBD_CtlError>
    if (err != 0U) {
 80039d4:	e7c7      	b.n	8003966 <USBD_GetDescriptor+0x58>
            if (pdev->pDesc->GetProductStrDescriptor != NULL) {
 80039d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	b123      	cbz	r3, 80039e8 <USBD_GetDescriptor+0xda>
                pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80039de:	f10d 0106 	add.w	r1, sp, #6
 80039e2:	7c00      	ldrb	r0, [r0, #16]
 80039e4:	4798      	blx	r3
    if (err != 0U) {
 80039e6:	e7ac      	b.n	8003942 <USBD_GetDescriptor+0x34>
                USBD_CtlError(pdev, req);
 80039e8:	4629      	mov	r1, r5
 80039ea:	f7ff ff86 	bl	80038fa <USBD_CtlError>
    if (err != 0U) {
 80039ee:	e7ba      	b.n	8003966 <USBD_GetDescriptor+0x58>
            if (pdev->pDesc->GetSerialStrDescriptor != NULL) {
 80039f0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	b123      	cbz	r3, 8003a02 <USBD_GetDescriptor+0xf4>
                pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80039f8:	f10d 0106 	add.w	r1, sp, #6
 80039fc:	7c00      	ldrb	r0, [r0, #16]
 80039fe:	4798      	blx	r3
    if (err != 0U) {
 8003a00:	e79f      	b.n	8003942 <USBD_GetDescriptor+0x34>
                USBD_CtlError(pdev, req);
 8003a02:	4629      	mov	r1, r5
 8003a04:	f7ff ff79 	bl	80038fa <USBD_CtlError>
    if (err != 0U) {
 8003a08:	e7ad      	b.n	8003966 <USBD_GetDescriptor+0x58>
            if (pdev->pDesc->GetConfigurationStrDescriptor != NULL) {
 8003a0a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	b123      	cbz	r3, 8003a1c <USBD_GetDescriptor+0x10e>
                pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003a12:	f10d 0106 	add.w	r1, sp, #6
 8003a16:	7c00      	ldrb	r0, [r0, #16]
 8003a18:	4798      	blx	r3
    if (err != 0U) {
 8003a1a:	e792      	b.n	8003942 <USBD_GetDescriptor+0x34>
                USBD_CtlError(pdev, req);
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	f7ff ff6c 	bl	80038fa <USBD_CtlError>
    if (err != 0U) {
 8003a22:	e7a0      	b.n	8003966 <USBD_GetDescriptor+0x58>
            if (pdev->pDesc->GetInterfaceStrDescriptor != NULL) {
 8003a24:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	b123      	cbz	r3, 8003a36 <USBD_GetDescriptor+0x128>
                pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003a2c:	f10d 0106 	add.w	r1, sp, #6
 8003a30:	7c00      	ldrb	r0, [r0, #16]
 8003a32:	4798      	blx	r3
    if (err != 0U) {
 8003a34:	e785      	b.n	8003942 <USBD_GetDescriptor+0x34>
                USBD_CtlError(pdev, req);
 8003a36:	4629      	mov	r1, r5
 8003a38:	f7ff ff5f 	bl	80038fa <USBD_CtlError>
    if (err != 0U) {
 8003a3c:	e793      	b.n	8003966 <USBD_GetDescriptor+0x58>
                if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL) {
 8003a3e:	f106 03ae 	add.w	r3, r6, #174	@ 0xae
 8003a42:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003a46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a48:	b152      	cbz	r2, 8003a60 <USBD_GetDescriptor+0x152>
                    pdev->classId = idx;
 8003a4a:	f8c4 62d4 	str.w	r6, [r4, #724]	@ 0x2d4
                    pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a50:	f10d 0206 	add.w	r2, sp, #6
 8003a54:	78a9      	ldrb	r1, [r5, #2]
 8003a56:	4620      	mov	r0, r4
 8003a58:	4798      	blx	r3
                    if (pbuf == NULL) /* This means that no class recognized the string index */
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	f47f af71 	bne.w	8003942 <USBD_GetDescriptor+0x34>
            for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++) {
 8003a60:	3601      	adds	r6, #1
 8003a62:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8003a66:	42b3      	cmp	r3, r6
 8003a68:	d8e9      	bhi.n	8003a3e <USBD_GetDescriptor+0x130>
 8003a6a:	e76a      	b.n	8003942 <USBD_GetDescriptor+0x34>
        switch ((uint8_t) (req->wValue)) {
 8003a6c:	2600      	movs	r6, #0
 8003a6e:	4630      	mov	r0, r6
 8003a70:	e7f7      	b.n	8003a62 <USBD_GetDescriptor+0x154>
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 8003a72:	7c03      	ldrb	r3, [r0, #16]
 8003a74:	b933      	cbnz	r3, 8003a84 <USBD_GetDescriptor+0x176>
                pbuf = (uint8_t*) pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8003a76:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7c:	f10d 0006 	add.w	r0, sp, #6
 8003a80:	4798      	blx	r3
    if (err != 0U) {
 8003a82:	e75e      	b.n	8003942 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003a84:	4629      	mov	r1, r5
 8003a86:	f7ff ff38 	bl	80038fa <USBD_CtlError>
    if (err != 0U) {
 8003a8a:	e76c      	b.n	8003966 <USBD_GetDescriptor+0x58>
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 8003a8c:	7c03      	ldrb	r3, [r0, #16]
 8003a8e:	b943      	cbnz	r3, 8003aa2 <USBD_GetDescriptor+0x194>
                pbuf = (uint8_t*) pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8003a90:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	f10d 0006 	add.w	r0, sp, #6
 8003a9a:	4798      	blx	r3
            pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003a9c:	2307      	movs	r3, #7
 8003a9e:	7043      	strb	r3, [r0, #1]
    if (err != 0U) {
 8003aa0:	e74f      	b.n	8003942 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	f7ff ff29 	bl	80038fa <USBD_CtlError>
    if (err != 0U) {
 8003aa8:	e75d      	b.n	8003966 <USBD_GetDescriptor+0x58>
        USBD_CtlError(pdev, req);
 8003aaa:	4629      	mov	r1, r5
 8003aac:	f7ff ff25 	bl	80038fa <USBD_CtlError>
        return;
 8003ab0:	e759      	b.n	8003966 <USBD_GetDescriptor+0x58>
            USBD_CtlError(pdev, req);
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f7ff ff20 	bl	80038fa <USBD_CtlError>
 8003aba:	e754      	b.n	8003966 <USBD_GetDescriptor+0x58>
        (void) USBD_CtlSendStatus(pdev);
 8003abc:	4620      	mov	r0, r4
 8003abe:	f000 ff07 	bl	80048d0 <USBD_CtlSendStatus>
 8003ac2:	e750      	b.n	8003966 <USBD_GetDescriptor+0x58>

08003ac4 <USBD_SetAddress>:
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 8003ac4:	b538      	push	{r3, r4, r5, lr}
 8003ac6:	4604      	mov	r4, r0
    if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U)) {
 8003ac8:	888b      	ldrh	r3, [r1, #4]
 8003aca:	b9fb      	cbnz	r3, 8003b0c <USBD_SetAddress+0x48>
 8003acc:	88cb      	ldrh	r3, [r1, #6]
 8003ace:	b9eb      	cbnz	r3, 8003b0c <USBD_SetAddress+0x48>
 8003ad0:	884b      	ldrh	r3, [r1, #2]
 8003ad2:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ad4:	d81a      	bhi.n	8003b0c <USBD_SetAddress+0x48>
        dev_addr = (uint8_t) (req->wValue) & 0x7FU;
 8003ad6:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8003ada:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d00c      	beq.n	8003afe <USBD_SetAddress+0x3a>
            pdev->dev_address = dev_addr;
 8003ae4:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
            (void) USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003ae8:	4629      	mov	r1, r5
 8003aea:	f001 f9b7 	bl	8004e5c <USBD_LL_SetUSBAddress>
            (void) USBD_CtlSendStatus(pdev);
 8003aee:	4620      	mov	r0, r4
 8003af0:	f000 feee 	bl	80048d0 <USBD_CtlSendStatus>
            if (dev_addr != 0U) {
 8003af4:	b135      	cbz	r5, 8003b04 <USBD_SetAddress+0x40>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 8003af6:	2302      	movs	r3, #2
 8003af8:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8003afc:	e009      	b.n	8003b12 <USBD_SetAddress+0x4e>
            USBD_CtlError(pdev, req);
 8003afe:	f7ff fefc 	bl	80038fa <USBD_CtlError>
 8003b02:	e006      	b.n	8003b12 <USBD_SetAddress+0x4e>
                pdev->dev_state = USBD_STATE_DEFAULT;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8003b0a:	e002      	b.n	8003b12 <USBD_SetAddress+0x4e>
        USBD_CtlError(pdev, req);
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	f7ff fef4 	bl	80038fa <USBD_CtlError>
}
 8003b12:	bd38      	pop	{r3, r4, r5, pc}

08003b14 <USBD_SetConfig>:
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 8003b14:	b570      	push	{r4, r5, r6, lr}
 8003b16:	4604      	mov	r4, r0
 8003b18:	460e      	mov	r6, r1
    cfgidx = (uint8_t) (req->wValue);
 8003b1a:	788d      	ldrb	r5, [r1, #2]
 8003b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8003bdc <USBD_SetConfig+0xc8>)
 8003b1e:	701d      	strb	r5, [r3, #0]
    if (cfgidx > USBD_MAX_NUM_CONFIGURATION) {
 8003b20:	2d01      	cmp	r5, #1
 8003b22:	d810      	bhi.n	8003b46 <USBD_SetConfig+0x32>
    switch (pdev->dev_state) {
 8003b24:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d00f      	beq.n	8003b4e <USBD_SetConfig+0x3a>
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d026      	beq.n	8003b80 <USBD_SetConfig+0x6c>
        USBD_CtlError(pdev, req);
 8003b32:	f7ff fee2 	bl	80038fa <USBD_CtlError>
        (void) USBD_ClrClassConfig(pdev, cfgidx);
 8003b36:	4b29      	ldr	r3, [pc, #164]	@ (8003bdc <USBD_SetConfig+0xc8>)
 8003b38:	7819      	ldrb	r1, [r3, #0]
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f7ff fd0b 	bl	8003556 <USBD_ClrClassConfig>
        ret = USBD_FAIL;
 8003b40:	2503      	movs	r5, #3
}
 8003b42:	4628      	mov	r0, r5
 8003b44:	bd70      	pop	{r4, r5, r6, pc}
        USBD_CtlError(pdev, req);
 8003b46:	f7ff fed8 	bl	80038fa <USBD_CtlError>
        return USBD_FAIL;
 8003b4a:	2503      	movs	r5, #3
 8003b4c:	e7f9      	b.n	8003b42 <USBD_SetConfig+0x2e>
        if (cfgidx != 0U) {
 8003b4e:	b1a5      	cbz	r5, 8003b7a <USBD_SetConfig+0x66>
            pdev->dev_config = cfgidx;
 8003b50:	6045      	str	r5, [r0, #4]
            ret = USBD_SetClassConfig(pdev, cfgidx);
 8003b52:	4629      	mov	r1, r5
 8003b54:	f7ff fcf6 	bl	8003544 <USBD_SetClassConfig>
            if (ret != USBD_OK) {
 8003b58:	4605      	mov	r5, r0
 8003b5a:	b138      	cbz	r0, 8003b6c <USBD_SetConfig+0x58>
                USBD_CtlError(pdev, req);
 8003b5c:	4631      	mov	r1, r6
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f7ff fecb 	bl	80038fa <USBD_CtlError>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 8003b64:	2302      	movs	r3, #2
 8003b66:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8003b6a:	e7ea      	b.n	8003b42 <USBD_SetConfig+0x2e>
                (void) USBD_CtlSendStatus(pdev);
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	f000 feaf 	bl	80048d0 <USBD_CtlSendStatus>
                pdev->dev_state = USBD_STATE_CONFIGURED;
 8003b72:	2303      	movs	r3, #3
 8003b74:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8003b78:	e7e3      	b.n	8003b42 <USBD_SetConfig+0x2e>
            (void) USBD_CtlSendStatus(pdev);
 8003b7a:	f000 fea9 	bl	80048d0 <USBD_CtlSendStatus>
 8003b7e:	e7e0      	b.n	8003b42 <USBD_SetConfig+0x2e>
        if (cfgidx == 0U) {
 8003b80:	b1cd      	cbz	r5, 8003bb6 <USBD_SetConfig+0xa2>
        } else if (cfgidx != pdev->dev_config) {
 8003b82:	6841      	ldr	r1, [r0, #4]
 8003b84:	428d      	cmp	r5, r1
 8003b86:	d025      	beq.n	8003bd4 <USBD_SetConfig+0xc0>
            (void) USBD_ClrClassConfig(pdev, (uint8_t) pdev->dev_config);
 8003b88:	b2c9      	uxtb	r1, r1
 8003b8a:	f7ff fce4 	bl	8003556 <USBD_ClrClassConfig>
            pdev->dev_config = cfgidx;
 8003b8e:	4b13      	ldr	r3, [pc, #76]	@ (8003bdc <USBD_SetConfig+0xc8>)
 8003b90:	7819      	ldrb	r1, [r3, #0]
 8003b92:	6061      	str	r1, [r4, #4]
            ret = USBD_SetClassConfig(pdev, cfgidx);
 8003b94:	4620      	mov	r0, r4
 8003b96:	f7ff fcd5 	bl	8003544 <USBD_SetClassConfig>
            if (ret != USBD_OK) {
 8003b9a:	4605      	mov	r5, r0
 8003b9c:	b1b0      	cbz	r0, 8003bcc <USBD_SetConfig+0xb8>
                USBD_CtlError(pdev, req);
 8003b9e:	4631      	mov	r1, r6
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f7ff feaa 	bl	80038fa <USBD_CtlError>
                (void) USBD_ClrClassConfig(pdev, (uint8_t) pdev->dev_config);
 8003ba6:	7921      	ldrb	r1, [r4, #4]
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f7ff fcd4 	bl	8003556 <USBD_ClrClassConfig>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8003bb4:	e7c5      	b.n	8003b42 <USBD_SetConfig+0x2e>
            pdev->dev_state = USBD_STATE_ADDRESSED;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
            pdev->dev_config = cfgidx;
 8003bbc:	6045      	str	r5, [r0, #4]
            (void) USBD_ClrClassConfig(pdev, cfgidx);
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	f7ff fcc9 	bl	8003556 <USBD_ClrClassConfig>
            (void) USBD_CtlSendStatus(pdev);
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	f000 fe83 	bl	80048d0 <USBD_CtlSendStatus>
 8003bca:	e7ba      	b.n	8003b42 <USBD_SetConfig+0x2e>
                (void) USBD_CtlSendStatus(pdev);
 8003bcc:	4620      	mov	r0, r4
 8003bce:	f000 fe7f 	bl	80048d0 <USBD_CtlSendStatus>
 8003bd2:	e7b6      	b.n	8003b42 <USBD_SetConfig+0x2e>
            (void) USBD_CtlSendStatus(pdev);
 8003bd4:	f000 fe7c 	bl	80048d0 <USBD_CtlSendStatus>
    USBD_StatusTypeDef ret = USBD_OK;
 8003bd8:	2500      	movs	r5, #0
 8003bda:	e7b2      	b.n	8003b42 <USBD_SetConfig+0x2e>
 8003bdc:	200001d0 	.word	0x200001d0

08003be0 <USBD_GetConfig>:
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 8003be0:	b508      	push	{r3, lr}
    if (req->wLength != 1U) {
 8003be2:	88cb      	ldrh	r3, [r1, #6]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d10b      	bne.n	8003c00 <USBD_GetConfig+0x20>
        switch (pdev->dev_state) {
 8003be8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d909      	bls.n	8003c06 <USBD_GetConfig+0x26>
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d111      	bne.n	8003c1a <USBD_GetConfig+0x3a>
            (void) USBD_CtlSendData(pdev, (uint8_t*) &pdev->dev_config, 1U);
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	1d01      	adds	r1, r0, #4
 8003bfa:	f000 fe3a 	bl	8004872 <USBD_CtlSendData>
            break;
 8003bfe:	e001      	b.n	8003c04 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 8003c00:	f7ff fe7b 	bl	80038fa <USBD_CtlError>
}
 8003c04:	bd08      	pop	{r3, pc}
        switch (pdev->dev_state) {
 8003c06:	b25b      	sxtb	r3, r3
 8003c08:	b13b      	cbz	r3, 8003c1a <USBD_GetConfig+0x3a>
            pdev->dev_default_config = 0U;
 8003c0a:	4601      	mov	r1, r0
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f841 3f08 	str.w	r3, [r1, #8]!
            (void) USBD_CtlSendData(pdev, (uint8_t*) &pdev->dev_default_config, 1U);
 8003c12:	2201      	movs	r2, #1
 8003c14:	f000 fe2d 	bl	8004872 <USBD_CtlSendData>
            break;
 8003c18:	e7f4      	b.n	8003c04 <USBD_GetConfig+0x24>
            USBD_CtlError(pdev, req);
 8003c1a:	f7ff fe6e 	bl	80038fa <USBD_CtlError>
}
 8003c1e:	e7f1      	b.n	8003c04 <USBD_GetConfig+0x24>

08003c20 <USBD_GetStatus>:
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 8003c20:	b508      	push	{r3, lr}
    switch (pdev->dev_state) {
 8003c22:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003c26:	3b01      	subs	r3, #1
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d812      	bhi.n	8003c52 <USBD_GetStatus+0x32>
        if (req->wLength != 0x2U) {
 8003c2c:	88cb      	ldrh	r3, [r1, #6]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d10c      	bne.n	8003c4c <USBD_GetStatus+0x2c>
        pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003c32:	2301      	movs	r3, #1
 8003c34:	60c3      	str	r3, [r0, #12]
        if (pdev->dev_remote_wakeup != 0U) {
 8003c36:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8003c3a:	b10b      	cbz	r3, 8003c40 <USBD_GetStatus+0x20>
            pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	60c3      	str	r3, [r0, #12]
        (void) USBD_CtlSendData(pdev, (uint8_t*) &pdev->dev_config_status, 2U);
 8003c40:	2202      	movs	r2, #2
 8003c42:	f100 010c 	add.w	r1, r0, #12
 8003c46:	f000 fe14 	bl	8004872 <USBD_CtlSendData>
}
 8003c4a:	bd08      	pop	{r3, pc}
            USBD_CtlError(pdev, req);
 8003c4c:	f7ff fe55 	bl	80038fa <USBD_CtlError>
            break;
 8003c50:	e7fb      	b.n	8003c4a <USBD_GetStatus+0x2a>
        USBD_CtlError(pdev, req);
 8003c52:	f7ff fe52 	bl	80038fa <USBD_CtlError>
}
 8003c56:	e7f8      	b.n	8003c4a <USBD_GetStatus+0x2a>

08003c58 <USBD_SetFeature>:
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 8003c58:	b508      	push	{r3, lr}
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) {
 8003c5a:	884b      	ldrh	r3, [r1, #2]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d004      	beq.n	8003c6a <USBD_SetFeature+0x12>
    } else if (req->wValue == USB_FEATURE_TEST_MODE) {
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d007      	beq.n	8003c74 <USBD_SetFeature+0x1c>
        USBD_CtlError(pdev, req);
 8003c64:	f7ff fe49 	bl	80038fa <USBD_CtlError>
}
 8003c68:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 1U;
 8003c6a:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void) USBD_CtlSendStatus(pdev);
 8003c6e:	f000 fe2f 	bl	80048d0 <USBD_CtlSendStatus>
 8003c72:	e7f9      	b.n	8003c68 <USBD_SetFeature+0x10>
        pdev->dev_test_mode = (uint8_t) (req->wIndex >> 8);
 8003c74:	888b      	ldrh	r3, [r1, #4]
 8003c76:	0a1b      	lsrs	r3, r3, #8
 8003c78:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
        (void) USBD_CtlSendStatus(pdev);
 8003c7c:	f000 fe28 	bl	80048d0 <USBD_CtlSendStatus>
 8003c80:	e7f2      	b.n	8003c68 <USBD_SetFeature+0x10>

08003c82 <USBD_ClrFeature>:
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 8003c82:	b508      	push	{r3, lr}
    switch (pdev->dev_state) {
 8003c84:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d809      	bhi.n	8003ca2 <USBD_ClrFeature+0x20>
        if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) {
 8003c8e:	884b      	ldrh	r3, [r1, #2]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d000      	beq.n	8003c96 <USBD_ClrFeature+0x14>
}
 8003c94:	bd08      	pop	{r3, pc}
            pdev->dev_remote_wakeup = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
            (void) USBD_CtlSendStatus(pdev);
 8003c9c:	f000 fe18 	bl	80048d0 <USBD_CtlSendStatus>
 8003ca0:	e7f8      	b.n	8003c94 <USBD_ClrFeature+0x12>
        USBD_CtlError(pdev, req);
 8003ca2:	f7ff fe2a 	bl	80038fa <USBD_CtlError>
}
 8003ca6:	e7f5      	b.n	8003c94 <USBD_ClrFeature+0x12>

08003ca8 <USBD_StdDevReq>:
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 8003ca8:	b538      	push	{r3, r4, r5, lr}
    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8003caa:	780c      	ldrb	r4, [r1, #0]
 8003cac:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8003cb0:	2c20      	cmp	r4, #32
 8003cb2:	d006      	beq.n	8003cc2 <USBD_StdDevReq+0x1a>
 8003cb4:	2c40      	cmp	r4, #64	@ 0x40
 8003cb6:	d004      	beq.n	8003cc2 <USBD_StdDevReq+0x1a>
 8003cb8:	b16c      	cbz	r4, 8003cd6 <USBD_StdDevReq+0x2e>
        USBD_CtlError(pdev, req);
 8003cba:	f7ff fe1e 	bl	80038fa <USBD_CtlError>
    USBD_StatusTypeDef ret = USBD_OK;
 8003cbe:	2400      	movs	r4, #0
        break;
 8003cc0:	e007      	b.n	8003cd2 <USBD_StdDevReq+0x2a>
        ret = (USBD_StatusTypeDef) pdev->pClass[pdev->classId]->Setup(pdev, req);
 8003cc2:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003cc6:	33ae      	adds	r3, #174	@ 0xae
 8003cc8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	4798      	blx	r3
 8003cd0:	4604      	mov	r4, r0
}
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	bd38      	pop	{r3, r4, r5, pc}
        switch (req->bRequest) {
 8003cd6:	784d      	ldrb	r5, [r1, #1]
 8003cd8:	2d09      	cmp	r5, #9
 8003cda:	d81d      	bhi.n	8003d18 <USBD_StdDevReq+0x70>
 8003cdc:	e8df f005 	tbb	[pc, r5]
 8003ce0:	161c1912 	.word	0x161c1912
 8003ce4:	1c05081c 	.word	0x1c05081c
 8003ce8:	0b0f      	.short	0x0b0f
            USBD_GetDescriptor(pdev, req);
 8003cea:	f7ff fe10 	bl	800390e <USBD_GetDescriptor>
            break;
 8003cee:	e7f0      	b.n	8003cd2 <USBD_StdDevReq+0x2a>
            USBD_SetAddress(pdev, req);
 8003cf0:	f7ff fee8 	bl	8003ac4 <USBD_SetAddress>
            break;
 8003cf4:	e7ed      	b.n	8003cd2 <USBD_StdDevReq+0x2a>
            ret = USBD_SetConfig(pdev, req);
 8003cf6:	f7ff ff0d 	bl	8003b14 <USBD_SetConfig>
 8003cfa:	4604      	mov	r4, r0
            break;
 8003cfc:	e7e9      	b.n	8003cd2 <USBD_StdDevReq+0x2a>
            USBD_GetConfig(pdev, req);
 8003cfe:	f7ff ff6f 	bl	8003be0 <USBD_GetConfig>
            break;
 8003d02:	e7e6      	b.n	8003cd2 <USBD_StdDevReq+0x2a>
            USBD_GetStatus(pdev, req);
 8003d04:	f7ff ff8c 	bl	8003c20 <USBD_GetStatus>
    USBD_StatusTypeDef ret = USBD_OK;
 8003d08:	462c      	mov	r4, r5
            break;
 8003d0a:	e7e2      	b.n	8003cd2 <USBD_StdDevReq+0x2a>
            USBD_SetFeature(pdev, req);
 8003d0c:	f7ff ffa4 	bl	8003c58 <USBD_SetFeature>
            break;
 8003d10:	e7df      	b.n	8003cd2 <USBD_StdDevReq+0x2a>
            USBD_ClrFeature(pdev, req);
 8003d12:	f7ff ffb6 	bl	8003c82 <USBD_ClrFeature>
            break;
 8003d16:	e7dc      	b.n	8003cd2 <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8003d18:	f7ff fdef 	bl	80038fa <USBD_CtlError>
            break;
 8003d1c:	e7d9      	b.n	8003cd2 <USBD_StdDevReq+0x2a>

08003d1e <USBD_StdItfReq>:
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 8003d1e:	b570      	push	{r4, r5, r6, lr}
 8003d20:	4605      	mov	r5, r0
 8003d22:	460c      	mov	r4, r1
    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8003d24:	780b      	ldrb	r3, [r1, #0]
 8003d26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d007      	beq.n	8003d3e <USBD_StdItfReq+0x20>
 8003d2e:	2b40      	cmp	r3, #64	@ 0x40
 8003d30:	d005      	beq.n	8003d3e <USBD_StdItfReq+0x20>
 8003d32:	b123      	cbz	r3, 8003d3e <USBD_StdItfReq+0x20>
        USBD_CtlError(pdev, req);
 8003d34:	f7ff fde1 	bl	80038fa <USBD_CtlError>
    USBD_StatusTypeDef ret = USBD_OK;
 8003d38:	2600      	movs	r6, #0
}
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	bd70      	pop	{r4, r5, r6, pc}
        switch (pdev->dev_state) {
 8003d3e:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 8003d42:	3b01      	subs	r3, #1
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d826      	bhi.n	8003d96 <USBD_StdItfReq+0x78>
            if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) {
 8003d48:	7921      	ldrb	r1, [r4, #4]
 8003d4a:	2901      	cmp	r1, #1
 8003d4c:	d905      	bls.n	8003d5a <USBD_StdItfReq+0x3c>
                USBD_CtlError(pdev, req);
 8003d4e:	4621      	mov	r1, r4
 8003d50:	4628      	mov	r0, r5
 8003d52:	f7ff fdd2 	bl	80038fa <USBD_CtlError>
    USBD_StatusTypeDef ret = USBD_OK;
 8003d56:	2600      	movs	r6, #0
 8003d58:	e7ef      	b.n	8003d3a <USBD_StdItfReq+0x1c>
                idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f7ff fcd3 	bl	8003706 <USBD_CoreFindIF>
                if (((uint8_t) idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 8003d60:	b968      	cbnz	r0, 8003d7e <USBD_StdItfReq+0x60>
                    if (pdev->pClass[idx]->Setup != NULL) {
 8003d62:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8003d66:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8003d6a:	6891      	ldr	r1, [r2, #8]
 8003d6c:	b189      	cbz	r1, 8003d92 <USBD_StdItfReq+0x74>
                        pdev->classId = idx;
 8003d6e:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                        ret = (USBD_StatusTypeDef) (pdev->pClass[idx]->Setup(pdev, req));
 8003d72:	6893      	ldr	r3, [r2, #8]
 8003d74:	4621      	mov	r1, r4
 8003d76:	4628      	mov	r0, r5
 8003d78:	4798      	blx	r3
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	e000      	b.n	8003d80 <USBD_StdItfReq+0x62>
                    ret = USBD_FAIL;
 8003d7e:	2603      	movs	r6, #3
                if ((req->wLength == 0U) && (ret == USBD_OK)) {
 8003d80:	88e3      	ldrh	r3, [r4, #6]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1d9      	bne.n	8003d3a <USBD_StdItfReq+0x1c>
 8003d86:	2e00      	cmp	r6, #0
 8003d88:	d1d7      	bne.n	8003d3a <USBD_StdItfReq+0x1c>
                    (void) USBD_CtlSendStatus(pdev);
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	f000 fda0 	bl	80048d0 <USBD_CtlSendStatus>
 8003d90:	e7d3      	b.n	8003d3a <USBD_StdItfReq+0x1c>
                        ret = USBD_FAIL;
 8003d92:	2603      	movs	r6, #3
 8003d94:	e7f4      	b.n	8003d80 <USBD_StdItfReq+0x62>
            USBD_CtlError(pdev, req);
 8003d96:	4621      	mov	r1, r4
 8003d98:	4628      	mov	r0, r5
 8003d9a:	f7ff fdae 	bl	80038fa <USBD_CtlError>
    USBD_StatusTypeDef ret = USBD_OK;
 8003d9e:	2600      	movs	r6, #0
            break;
 8003da0:	e7cb      	b.n	8003d3a <USBD_StdItfReq+0x1c>

08003da2 <USBD_StdEPReq>:
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 8003da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da6:	4606      	mov	r6, r0
 8003da8:	460d      	mov	r5, r1
    ep_addr = LOBYTE(req->wIndex);
 8003daa:	888b      	ldrh	r3, [r1, #4]
 8003dac:	b2df      	uxtb	r7, r3
    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8003dae:	780c      	ldrb	r4, [r1, #0]
 8003db0:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8003db4:	2c20      	cmp	r4, #32
 8003db6:	d008      	beq.n	8003dca <USBD_StdEPReq+0x28>
 8003db8:	2c40      	cmp	r4, #64	@ 0x40
 8003dba:	d006      	beq.n	8003dca <USBD_StdEPReq+0x28>
 8003dbc:	b1dc      	cbz	r4, 8003df6 <USBD_StdEPReq+0x54>
        USBD_CtlError(pdev, req);
 8003dbe:	f7ff fd9c 	bl	80038fa <USBD_CtlError>
    USBD_StatusTypeDef ret = USBD_OK;
 8003dc2:	2400      	movs	r4, #0
}
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        idx = USBD_CoreFindEP(pdev, ep_addr);
 8003dca:	4639      	mov	r1, r7
 8003dcc:	4630      	mov	r0, r6
 8003dce:	f7ff fc9c 	bl	800370a <USBD_CoreFindEP>
        if (((uint8_t) idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	f040 80f9 	bne.w	8003fcc <USBD_StdEPReq+0x22a>
            pdev->classId = idx;
 8003dda:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
            if (pdev->pClass[idx]->Setup != NULL) {
 8003dde:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8003de2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0eb      	beq.n	8003dc4 <USBD_StdEPReq+0x22>
                ret = (USBD_StatusTypeDef) pdev->pClass[idx]->Setup(pdev, req);
 8003dec:	4629      	mov	r1, r5
 8003dee:	4630      	mov	r0, r6
 8003df0:	4798      	blx	r3
 8003df2:	4604      	mov	r4, r0
 8003df4:	e7e6      	b.n	8003dc4 <USBD_StdEPReq+0x22>
        switch (req->bRequest) {
 8003df6:	f891 8001 	ldrb.w	r8, [r1, #1]
 8003dfa:	f1b8 0f01 	cmp.w	r8, #1
 8003dfe:	d031      	beq.n	8003e64 <USBD_StdEPReq+0xc2>
 8003e00:	f1b8 0f03 	cmp.w	r8, #3
 8003e04:	d005      	beq.n	8003e12 <USBD_StdEPReq+0x70>
 8003e06:	f1b8 0f00 	cmp.w	r8, #0
 8003e0a:	d067      	beq.n	8003edc <USBD_StdEPReq+0x13a>
            USBD_CtlError(pdev, req);
 8003e0c:	f7ff fd75 	bl	80038fa <USBD_CtlError>
            break;
 8003e10:	e7d8      	b.n	8003dc4 <USBD_StdEPReq+0x22>
            switch (pdev->dev_state) {
 8003e12:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d004      	beq.n	8003e26 <USBD_StdEPReq+0x84>
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d012      	beq.n	8003e46 <USBD_StdEPReq+0xa4>
                USBD_CtlError(pdev, req);
 8003e20:	f7ff fd6b 	bl	80038fa <USBD_CtlError>
                break;
 8003e24:	e7ce      	b.n	8003dc4 <USBD_StdEPReq+0x22>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 8003e26:	b10f      	cbz	r7, 8003e2c <USBD_StdEPReq+0x8a>
 8003e28:	2f80      	cmp	r7, #128	@ 0x80
 8003e2a:	d104      	bne.n	8003e36 <USBD_StdEPReq+0x94>
                    USBD_CtlError(pdev, req);
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	4630      	mov	r0, r6
 8003e30:	f7ff fd63 	bl	80038fa <USBD_CtlError>
 8003e34:	e7c6      	b.n	8003dc4 <USBD_StdEPReq+0x22>
                    (void) USBD_LL_StallEP(pdev, ep_addr);
 8003e36:	4639      	mov	r1, r7
 8003e38:	f001 f800 	bl	8004e3c <USBD_LL_StallEP>
                    (void) USBD_LL_StallEP(pdev, 0x80U);
 8003e3c:	2180      	movs	r1, #128	@ 0x80
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f000 fffc 	bl	8004e3c <USBD_LL_StallEP>
 8003e44:	e7be      	b.n	8003dc4 <USBD_StdEPReq+0x22>
                if (req->wValue == USB_FEATURE_EP_HALT) {
 8003e46:	884b      	ldrh	r3, [r1, #2]
 8003e48:	b923      	cbnz	r3, 8003e54 <USBD_StdEPReq+0xb2>
                    if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U)) {
 8003e4a:	b11f      	cbz	r7, 8003e54 <USBD_StdEPReq+0xb2>
 8003e4c:	2f80      	cmp	r7, #128	@ 0x80
 8003e4e:	d001      	beq.n	8003e54 <USBD_StdEPReq+0xb2>
 8003e50:	88cb      	ldrh	r3, [r1, #6]
 8003e52:	b11b      	cbz	r3, 8003e5c <USBD_StdEPReq+0xba>
                (void) USBD_CtlSendStatus(pdev);
 8003e54:	4630      	mov	r0, r6
 8003e56:	f000 fd3b 	bl	80048d0 <USBD_CtlSendStatus>
                break;
 8003e5a:	e7b3      	b.n	8003dc4 <USBD_StdEPReq+0x22>
                        (void) USBD_LL_StallEP(pdev, ep_addr);
 8003e5c:	4639      	mov	r1, r7
 8003e5e:	f000 ffed 	bl	8004e3c <USBD_LL_StallEP>
 8003e62:	e7f7      	b.n	8003e54 <USBD_StdEPReq+0xb2>
            switch (pdev->dev_state) {
 8003e64:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d004      	beq.n	8003e78 <USBD_StdEPReq+0xd6>
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d012      	beq.n	8003e98 <USBD_StdEPReq+0xf6>
                USBD_CtlError(pdev, req);
 8003e72:	f7ff fd42 	bl	80038fa <USBD_CtlError>
                break;
 8003e76:	e7a5      	b.n	8003dc4 <USBD_StdEPReq+0x22>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 8003e78:	b10f      	cbz	r7, 8003e7e <USBD_StdEPReq+0xdc>
 8003e7a:	2f80      	cmp	r7, #128	@ 0x80
 8003e7c:	d104      	bne.n	8003e88 <USBD_StdEPReq+0xe6>
                    USBD_CtlError(pdev, req);
 8003e7e:	4629      	mov	r1, r5
 8003e80:	4630      	mov	r0, r6
 8003e82:	f7ff fd3a 	bl	80038fa <USBD_CtlError>
 8003e86:	e79d      	b.n	8003dc4 <USBD_StdEPReq+0x22>
                    (void) USBD_LL_StallEP(pdev, ep_addr);
 8003e88:	4639      	mov	r1, r7
 8003e8a:	f000 ffd7 	bl	8004e3c <USBD_LL_StallEP>
                    (void) USBD_LL_StallEP(pdev, 0x80U);
 8003e8e:	2180      	movs	r1, #128	@ 0x80
 8003e90:	4630      	mov	r0, r6
 8003e92:	f000 ffd3 	bl	8004e3c <USBD_LL_StallEP>
 8003e96:	e795      	b.n	8003dc4 <USBD_StdEPReq+0x22>
                if (req->wValue == USB_FEATURE_EP_HALT) {
 8003e98:	884b      	ldrh	r3, [r1, #2]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d192      	bne.n	8003dc4 <USBD_StdEPReq+0x22>
                    if ((ep_addr & 0x7FU) != 0x00U) {
 8003e9e:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 8003ea2:	d117      	bne.n	8003ed4 <USBD_StdEPReq+0x132>
                    (void) USBD_CtlSendStatus(pdev);
 8003ea4:	4630      	mov	r0, r6
 8003ea6:	f000 fd13 	bl	80048d0 <USBD_CtlSendStatus>
                    idx = USBD_CoreFindEP(pdev, ep_addr);
 8003eaa:	4639      	mov	r1, r7
 8003eac:	4630      	mov	r0, r6
 8003eae:	f7ff fc2c 	bl	800370a <USBD_CoreFindEP>
                    if (((uint8_t) idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d186      	bne.n	8003dc4 <USBD_StdEPReq+0x22>
                        pdev->classId = idx;
 8003eb6:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                        if (pdev->pClass[idx]->Setup != NULL) {
 8003eba:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8003ebe:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8003ec2:	6892      	ldr	r2, [r2, #8]
 8003ec4:	2a00      	cmp	r2, #0
 8003ec6:	f000 8083 	beq.w	8003fd0 <USBD_StdEPReq+0x22e>
                            ret = (USBD_StatusTypeDef) (pdev->pClass[idx]->Setup(pdev, req));
 8003eca:	4629      	mov	r1, r5
 8003ecc:	4630      	mov	r0, r6
 8003ece:	4790      	blx	r2
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	e777      	b.n	8003dc4 <USBD_StdEPReq+0x22>
                        (void) USBD_LL_ClearStallEP(pdev, ep_addr);
 8003ed4:	4639      	mov	r1, r7
 8003ed6:	f000 ffb9 	bl	8004e4c <USBD_LL_ClearStallEP>
 8003eda:	e7e3      	b.n	8003ea4 <USBD_StdEPReq+0x102>
            switch (pdev->dev_state) {
 8003edc:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	2a02      	cmp	r2, #2
 8003ee4:	d005      	beq.n	8003ef2 <USBD_StdEPReq+0x150>
 8003ee6:	2a03      	cmp	r2, #3
 8003ee8:	d028      	beq.n	8003f3c <USBD_StdEPReq+0x19a>
                USBD_CtlError(pdev, req);
 8003eea:	f7ff fd06 	bl	80038fa <USBD_CtlError>
    USBD_StatusTypeDef ret = USBD_OK;
 8003eee:	4644      	mov	r4, r8
                break;
 8003ef0:	e768      	b.n	8003dc4 <USBD_StdEPReq+0x22>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 8003ef2:	b10f      	cbz	r7, 8003ef8 <USBD_StdEPReq+0x156>
 8003ef4:	2f80      	cmp	r7, #128	@ 0x80
 8003ef6:	d114      	bne.n	8003f22 <USBD_StdEPReq+0x180>
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : &pdev->ep_out[ep_addr & 0x7FU];
 8003ef8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003efc:	d115      	bne.n	8003f2a <USBD_StdEPReq+0x188>
 8003efe:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8003f02:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8003f06:	00b9      	lsls	r1, r7, #2
 8003f08:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8003f0c:	4431      	add	r1, r6
 8003f0e:	3104      	adds	r1, #4
                pep->status = 0x0000U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f801 3f0e 	strb.w	r3, [r1, #14]!
                (void) USBD_CtlSendData(pdev, (uint8_t*) &pep->status, 2U);
 8003f16:	2202      	movs	r2, #2
 8003f18:	4630      	mov	r0, r6
 8003f1a:	f000 fcaa 	bl	8004872 <USBD_CtlSendData>
    USBD_StatusTypeDef ret = USBD_OK;
 8003f1e:	4644      	mov	r4, r8
                break;
 8003f20:	e750      	b.n	8003dc4 <USBD_StdEPReq+0x22>
                    USBD_CtlError(pdev, req);
 8003f22:	f7ff fcea 	bl	80038fa <USBD_CtlError>
    USBD_StatusTypeDef ret = USBD_OK;
 8003f26:	4644      	mov	r4, r8
                    break;
 8003f28:	e74c      	b.n	8003dc4 <USBD_StdEPReq+0x22>
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : &pdev->ep_out[ep_addr & 0x7FU];
 8003f2a:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8003f2e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8003f32:	00b9      	lsls	r1, r7, #2
 8003f34:	3110      	adds	r1, #16
 8003f36:	4431      	add	r1, r6
 8003f38:	3104      	adds	r1, #4
 8003f3a:	e7e9      	b.n	8003f10 <USBD_StdEPReq+0x16e>
                if ((ep_addr & 0x80U) == 0x80U) {
 8003f3c:	b25b      	sxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	db20      	blt.n	8003f84 <USBD_StdEPReq+0x1e2>
                    if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U) {
 8003f42:	f007 020f 	and.w	r2, r7, #15
 8003f46:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f4a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003f4e:	f892 4163 	ldrb.w	r4, [r2, #355]	@ 0x163
 8003f52:	b324      	cbz	r4, 8003f9e <USBD_StdEPReq+0x1fc>
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : &pdev->ep_out[ep_addr & 0x7FU];
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	db25      	blt.n	8003fa4 <USBD_StdEPReq+0x202>
 8003f58:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 8003f5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f60:	009c      	lsls	r4, r3, #2
 8003f62:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 8003f66:	4434      	add	r4, r6
 8003f68:	3404      	adds	r4, #4
                if ((ep_addr == 0x00U) || (ep_addr == 0x80U)) {
 8003f6a:	b10f      	cbz	r7, 8003f70 <USBD_StdEPReq+0x1ce>
 8003f6c:	2f80      	cmp	r7, #128	@ 0x80
 8003f6e:	d122      	bne.n	8003fb6 <USBD_StdEPReq+0x214>
                    pep->status = 0x0000U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	73a3      	strb	r3, [r4, #14]
                (void) USBD_CtlSendData(pdev, (uint8_t*) &pep->status, 2U);
 8003f74:	2202      	movs	r2, #2
 8003f76:	f104 010e 	add.w	r1, r4, #14
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	f000 fc79 	bl	8004872 <USBD_CtlSendData>
    USBD_StatusTypeDef ret = USBD_OK;
 8003f80:	4644      	mov	r4, r8
                break;
 8003f82:	e71f      	b.n	8003dc4 <USBD_StdEPReq+0x22>
                    if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U) {
 8003f84:	f007 020f 	and.w	r2, r7, #15
 8003f88:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f8c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003f90:	f892 4023 	ldrb.w	r4, [r2, #35]	@ 0x23
 8003f94:	2c00      	cmp	r4, #0
 8003f96:	d1dd      	bne.n	8003f54 <USBD_StdEPReq+0x1b2>
                        USBD_CtlError(pdev, req);
 8003f98:	f7ff fcaf 	bl	80038fa <USBD_CtlError>
                        break;
 8003f9c:	e712      	b.n	8003dc4 <USBD_StdEPReq+0x22>
                        USBD_CtlError(pdev, req);
 8003f9e:	f7ff fcac 	bl	80038fa <USBD_CtlError>
                        break;
 8003fa2:	e70f      	b.n	8003dc4 <USBD_StdEPReq+0x22>
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : &pdev->ep_out[ep_addr & 0x7FU];
 8003fa4:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 8003fa8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003fac:	009c      	lsls	r4, r3, #2
 8003fae:	3410      	adds	r4, #16
 8003fb0:	4434      	add	r4, r6
 8003fb2:	3404      	adds	r4, #4
 8003fb4:	e7d9      	b.n	8003f6a <USBD_StdEPReq+0x1c8>
                } else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U) {
 8003fb6:	4639      	mov	r1, r7
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f000 feff 	bl	8004dbc <USBD_LL_IsStallEP>
 8003fbe:	b110      	cbz	r0, 8003fc6 <USBD_StdEPReq+0x224>
                    pep->status = 0x0001U;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	73a3      	strb	r3, [r4, #14]
 8003fc4:	e7d6      	b.n	8003f74 <USBD_StdEPReq+0x1d2>
                    pep->status = 0x0000U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	73a3      	strb	r3, [r4, #14]
 8003fca:	e7d3      	b.n	8003f74 <USBD_StdEPReq+0x1d2>
    USBD_StatusTypeDef ret = USBD_OK;
 8003fcc:	2400      	movs	r4, #0
 8003fce:	e6f9      	b.n	8003dc4 <USBD_StdEPReq+0x22>
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	e6f7      	b.n	8003dc4 <USBD_StdEPReq+0x22>

08003fd4 <USBD_GetString>:
    if (desc == NULL) {
 8003fd4:	b300      	cbz	r0, 8004018 <USBD_GetString+0x44>
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len) {
 8003fd6:	b570      	push	{r4, r5, r6, lr}
 8003fd8:	460d      	mov	r5, r1
 8003fda:	4616      	mov	r6, r2
 8003fdc:	4604      	mov	r4, r0
    *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t )USBD_GetLen(pdesc) * 2U) + 2U);
 8003fde:	f7ff fc6e 	bl	80038be <USBD_GetLen>
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	0043      	lsls	r3, r0, #1
 8003fe6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fea:	d806      	bhi.n	8003ffa <USBD_GetString+0x26>
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	8033      	strh	r3, [r6, #0]
    unicode[idx] = *(uint8_t*) len;
 8003ff0:	702b      	strb	r3, [r5, #0]
    unicode[idx] = USB_DESC_TYPE_STRING;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	706b      	strb	r3, [r5, #1]
    idx++;
 8003ff6:	2302      	movs	r3, #2
    while (*pdesc != (uint8_t) '\0') {
 8003ff8:	e00a      	b.n	8004010 <USBD_GetString+0x3c>
    *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t )USBD_GetLen(pdesc) * 2U) + 2U);
 8003ffa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ffe:	e7f6      	b.n	8003fee <USBD_GetString+0x1a>
        unicode[idx] = *pdesc;
 8004000:	54ea      	strb	r2, [r5, r3]
        pdesc++;
 8004002:	3401      	adds	r4, #1
        idx++;
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	b2d2      	uxtb	r2, r2
        unicode[idx] = 0U;
 8004008:	2100      	movs	r1, #0
 800400a:	54a9      	strb	r1, [r5, r2]
        idx++;
 800400c:	3302      	adds	r3, #2
 800400e:	b2db      	uxtb	r3, r3
    while (*pdesc != (uint8_t) '\0') {
 8004010:	7822      	ldrb	r2, [r4, #0]
 8004012:	2a00      	cmp	r2, #0
 8004014:	d1f4      	bne.n	8004000 <USBD_GetString+0x2c>
}
 8004016:	bd70      	pop	{r4, r5, r6, pc}
 8004018:	4770      	bx	lr
	...

0800401c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800401c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004020:	4905      	ldr	r1, [pc, #20]	@ (8004038 <__NVIC_SystemReset+0x1c>)
 8004022:	68ca      	ldr	r2, [r1, #12]
 8004024:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004028:	4b04      	ldr	r3, [pc, #16]	@ (800403c <__NVIC_SystemReset+0x20>)
 800402a:	4313      	orrs	r3, r2
 800402c:	60cb      	str	r3, [r1, #12]
 800402e:	f3bf 8f4f 	dsb	sy
    __NOP();
 8004032:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8004034:	e7fd      	b.n	8004032 <__NVIC_SystemReset+0x16>
 8004036:	bf00      	nop
 8004038:	e000ed00 	.word	0xe000ed00
 800403c:	05fa0004 	.word	0x05fa0004

08004040 <USBD_DFU_GetCfgDesc>:
 *         return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_DFU_GetCfgDesc(uint16_t *length) {
    *length = (uint16_t) sizeof(USBD_DFU_CfgDesc);
 8004040:	231b      	movs	r3, #27
 8004042:	8003      	strh	r3, [r0, #0]

    return USBD_DFU_CfgDesc;
}
 8004044:	4800      	ldr	r0, [pc, #0]	@ (8004048 <USBD_DFU_GetCfgDesc+0x8>)
 8004046:	4770      	bx	lr
 8004048:	20000020 	.word	0x20000020

0800404c <USBD_DFU_EP0_RxReady>:
 */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev) {
    UNUSED(pdev);

    return (uint8_t) USBD_OK;
}
 800404c:	2000      	movs	r0, #0
 800404e:	4770      	bx	lr

08004050 <USBD_DFU_SOF>:
 */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev) {
    UNUSED(pdev);

    return (uint8_t) USBD_OK;
}
 8004050:	2000      	movs	r0, #0
 8004052:	4770      	bx	lr

08004054 <USBD_DFU_GetDeviceQualifierDesc>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_DFU_GetDeviceQualifierDesc(uint16_t *length) {
    *length = (uint16_t) sizeof(USBD_DFU_DeviceQualifierDesc);
 8004054:	230a      	movs	r3, #10
 8004056:	8003      	strh	r3, [r0, #0]

    return USBD_DFU_DeviceQualifierDesc;
}
 8004058:	4800      	ldr	r0, [pc, #0]	@ (800405c <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 800405a:	4770      	bx	lr
 800405c:	20000014 	.word	0x20000014

08004060 <DFU_ClearStatus>:
 *         Handles the DFU CLRSTATUS request.
 * @param  pdev: device instance
 * @retval status
 */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev) {
    USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 8004060:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004064:	33b0      	adds	r3, #176	@ 0xb0
 8004066:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

    if (hdfu == NULL) {
 800406a:	b1a3      	cbz	r3, 8004096 <DFU_ClearStatus+0x36>
        return;
    }

    if (hdfu->dev_state == DFU_STATE_ERROR) {
 800406c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8004070:	2a0a      	cmp	r2, #10
 8004072:	d011      	beq.n	8004098 <DFU_ClearStatus+0x38>
        hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
        hdfu->dev_status[4] = hdfu->dev_state; /* bState */
        hdfu->dev_status[5] = 0U; /* iString */
    } else {
        /* State Error */
        hdfu->dev_state = DFU_STATE_ERROR;
 8004074:	210a      	movs	r1, #10
 8004076:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
        hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800407a:	220e      	movs	r2, #14
 800407c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        hdfu->dev_status[1] = 0U;
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8004086:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800408a:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800408e:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
        hdfu->dev_status[5] = 0U; /* iString */
 8004092:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    }
}
 8004096:	4770      	bx	lr
        hdfu->dev_state = DFU_STATE_IDLE;
 8004098:	2102      	movs	r1, #2
 800409a:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
        hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        hdfu->dev_status[1] = 0U;
 80040a4:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80040a8:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80040ac:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80040b0:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
        hdfu->dev_status[5] = 0U; /* iString */
 80040b4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 80040b8:	4770      	bx	lr

080040ba <DFU_Abort>:
 *         Handles the DFU ABORT request.
 * @param  pdev: device instance
 * @retval None
 */
static void DFU_Abort(USBD_HandleTypeDef *pdev) {
    USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 80040ba:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80040be:	33b0      	adds	r3, #176	@ 0xb0
 80040c0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

    if (hdfu == NULL) {
 80040c4:	b1eb      	cbz	r3, 8004102 <DFU_Abort+0x48>
        return;
    }

    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)) {
 80040c6:	f893 141c 	ldrb.w	r1, [r3, #1052]	@ 0x41c
 80040ca:	2909      	cmp	r1, #9
 80040cc:	d819      	bhi.n	8004102 <DFU_Abort+0x48>
 80040ce:	f44f 721b 	mov.w	r2, #620	@ 0x26c
 80040d2:	40ca      	lsrs	r2, r1
 80040d4:	f012 0f01 	tst.w	r2, #1
 80040d8:	d013      	beq.n	8004102 <DFU_Abort+0x48>
        hdfu->dev_state = DFU_STATE_IDLE;
 80040da:	2102      	movs	r1, #2
 80040dc:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
        hdfu->dev_status[0] = DFU_ERROR_NONE;
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        hdfu->dev_status[1] = 0U;
 80040e6:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80040ea:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80040ee:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80040f2:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
        hdfu->dev_status[5] = 0U; /* iString */
 80040f6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
        hdfu->wblock_num = 0U;
 80040fa:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        hdfu->wlength = 0U;
 80040fe:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    }
}
 8004102:	4770      	bx	lr

08004104 <USBD_DFU_GetUsrStringDesc>:
    USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef*) pdev->pUserData[pdev->classId];
 8004104:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004108:	33b0      	adds	r3, #176	@ 0xb0
 800410a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800410e:	6843      	ldr	r3, [r0, #4]
    if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM)) {
 8004110:	2906      	cmp	r1, #6
 8004112:	d807      	bhi.n	8004124 <USBD_DFU_GetUsrStringDesc+0x20>
static uint8_t* USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length) {
 8004114:	b510      	push	{r4, lr}
        USBD_GetString((uint8_t*) DfuInterface->pStrDesc, USBD_StrDesc, length);
 8004116:	4c05      	ldr	r4, [pc, #20]	@ (800412c <USBD_DFU_GetUsrStringDesc+0x28>)
 8004118:	4621      	mov	r1, r4
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	f7ff ff5a 	bl	8003fd4 <USBD_GetString>
        return USBD_StrDesc;
 8004120:	4620      	mov	r0, r4
}
 8004122:	bd10      	pop	{r4, pc}
        *length = 0U;
 8004124:	2000      	movs	r0, #0
 8004126:	8010      	strh	r0, [r2, #0]
}
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	200001d4 	.word	0x200001d4

08004130 <USBD_DFU_GetDfuFuncDesc>:
    USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef*) (void*) pConfDesc;
    USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef*) (void*) pConfDesc;
    uint8_t *pDfuDesc = NULL;
    uint16_t ptr;

    if (desc->wTotalLength > desc->bLength) {
 8004130:	8842      	ldrh	r2, [r0, #2]
 8004132:	7803      	ldrb	r3, [r0, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d914      	bls.n	8004162 <USBD_DFU_GetDfuFuncDesc+0x32>
static void* USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc) {
 8004138:	b510      	push	{r4, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	4604      	mov	r4, r0
        ptr = desc->bLength;
 800413e:	f8ad 3006 	strh.w	r3, [sp, #6]

        while (ptr < desc->wTotalLength) {
 8004142:	8863      	ldrh	r3, [r4, #2]
 8004144:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004148:	429a      	cmp	r2, r3
 800414a:	d207      	bcs.n	800415c <USBD_DFU_GetDfuFuncDesc+0x2c>
            pdesc = USBD_GetNextDesc((uint8_t*) pdesc, &ptr);
 800414c:	f10d 0106 	add.w	r1, sp, #6
 8004150:	f7ff fbae 	bl	80038b0 <USBD_GetNextDesc>

            if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE) {
 8004154:	7843      	ldrb	r3, [r0, #1]
 8004156:	2b21      	cmp	r3, #33	@ 0x21
 8004158:	d1f3      	bne.n	8004142 <USBD_DFU_GetDfuFuncDesc+0x12>
 800415a:	e000      	b.n	800415e <USBD_DFU_GetDfuFuncDesc+0x2e>
    uint8_t *pDfuDesc = NULL;
 800415c:	2000      	movs	r0, #0
                break;
            }
        }
    }
    return pDfuDesc;
}
 800415e:	b002      	add	sp, #8
 8004160:	bd10      	pop	{r4, pc}
    uint8_t *pDfuDesc = NULL;
 8004162:	2000      	movs	r0, #0
}
 8004164:	4770      	bx	lr

08004166 <DFU_Leave>:
static void DFU_Leave(USBD_HandleTypeDef *pdev) {
 8004166:	b570      	push	{r4, r5, r6, lr}
 8004168:	4604      	mov	r4, r0
    USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 800416a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800416e:	33b0      	adds	r3, #176	@ 0xb0
 8004170:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
    USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef*) pdev->pUserData[pdev->classId];
 8004174:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004178:	685e      	ldr	r6, [r3, #4]
    USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef*) USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800417a:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 800417e:	f7ff ffd7 	bl	8004130 <USBD_DFU_GetDfuFuncDesc>
    if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL)) {
 8004182:	b1a5      	cbz	r5, 80041ae <DFU_Leave+0x48>
 8004184:	b19e      	cbz	r6, 80041ae <DFU_Leave+0x48>
 8004186:	b190      	cbz	r0, 80041ae <DFU_Leave+0x48>
    hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8004188:	2300      	movs	r3, #0
 800418a:	f885 341d 	strb.w	r3, [r5, #1053]	@ 0x41d
    if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U) {
 800418e:	7883      	ldrb	r3, [r0, #2]
 8004190:	f013 0f04 	tst.w	r3, #4
 8004194:	d00c      	beq.n	80041b0 <DFU_Leave+0x4a>
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8004196:	2206      	movs	r2, #6
 8004198:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80041a2:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 80041a6:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80041aa:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
}
 80041ae:	bd70      	pop	{r4, r5, r6, pc}
        hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 80041b0:	2208      	movs	r2, #8
 80041b2:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80041bc:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 80041c0:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80041c4:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
        (void) USBD_Stop(pdev);
 80041c8:	4620      	mov	r0, r4
 80041ca:	f7ff f9ae 	bl	800352a <USBD_Stop>
        NVIC_SystemReset();
 80041ce:	f7ff ff25 	bl	800401c <__NVIC_SystemReset>

080041d2 <USBD_DFU_EP0_TxReady>:
static uint8_t USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev) {
 80041d2:	b510      	push	{r4, lr}
 80041d4:	b082      	sub	sp, #8
    USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 80041d6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80041da:	33b0      	adds	r3, #176	@ 0xb0
 80041dc:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef*) pdev->pUserData[pdev->classId];
 80041e0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80041e4:	685a      	ldr	r2, [r3, #4]
    if (hdfu == NULL) {
 80041e6:	2c00      	cmp	r4, #0
 80041e8:	f000 808c 	beq.w	8004304 <USBD_DFU_EP0_TxReady+0x132>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY) {
 80041ec:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d005      	beq.n	8004200 <USBD_DFU_EP0_TxReady+0x2e>
    } else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 80041f4:	2b07      	cmp	r3, #7
 80041f6:	f000 8081 	beq.w	80042fc <USBD_DFU_EP0_TxReady+0x12a>
        return (uint8_t) USBD_FAIL;
 80041fa:	2003      	movs	r0, #3
}
 80041fc:	b002      	add	sp, #8
 80041fe:	bd10      	pop	{r4, pc}
        if (hdfu->wblock_num == 0U) {
 8004200:	f8d4 1400 	ldr.w	r1, [r4, #1024]	@ 0x400
 8004204:	2900      	cmp	r1, #0
 8004206:	d14a      	bne.n	800429e <USBD_DFU_EP0_TxReady+0xcc>
            if (hdfu->wlength == 1U) {
 8004208:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 800420c:	2b01      	cmp	r3, #1
 800420e:	d053      	beq.n	80042b8 <USBD_DFU_EP0_TxReady+0xe6>
            } else if (hdfu->wlength == 5U) {
 8004210:	2b05      	cmp	r3, #5
 8004212:	d136      	bne.n	8004282 <USBD_DFU_EP0_TxReady+0xb0>
                if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) {
 8004214:	7823      	ldrb	r3, [r4, #0]
 8004216:	2b21      	cmp	r3, #33	@ 0x21
 8004218:	d020      	beq.n	800425c <USBD_DFU_EP0_TxReady+0x8a>
                } else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE) {
 800421a:	2b41      	cmp	r3, #65	@ 0x41
 800421c:	d174      	bne.n	8004308 <USBD_DFU_EP0_TxReady+0x136>
                    app_addr_ptr = hdfu->buffer.d8[1];
 800421e:	7863      	ldrb	r3, [r4, #1]
                    app_addr_ptr += (uint32_t) hdfu->buffer.d8[2] << 8;
 8004220:	78a1      	ldrb	r1, [r4, #2]
 8004222:	eb03 2301 	add.w	r3, r3, r1, lsl #8
                    app_addr_ptr += (uint32_t) hdfu->buffer.d8[3] << 16;
 8004226:	78e1      	ldrb	r1, [r4, #3]
 8004228:	eb03 4301 	add.w	r3, r3, r1, lsl #16
                    app_addr_ptr += (uint32_t) hdfu->buffer.d8[4] << 24;
 800422c:	7920      	ldrb	r0, [r4, #4]
                    if (DfuInterface->Erase(app_addr_ptr) != USBD_OK) {
 800422e:	68d2      	ldr	r2, [r2, #12]
 8004230:	eb03 6000 	add.w	r0, r3, r0, lsl #24
 8004234:	4790      	blx	r2
 8004236:	2800      	cmp	r0, #0
 8004238:	d03e      	beq.n	80042b8 <USBD_DFU_EP0_TxReady+0xe6>
                        hdfu->dev_state = DFU_STATE_ERROR;
 800423a:	220a      	movs	r2, #10
 800423c:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
                        hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8004240:	230b      	movs	r3, #11
 8004242:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
                        hdfu->dev_status[1] = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
                        hdfu->dev_status[2] = 0U;
 800424c:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
                        hdfu->dev_status[3] = 0U;
 8004250:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
                        hdfu->dev_status[4] = hdfu->dev_state;
 8004254:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
                        return (uint8_t) USBD_FAIL;
 8004258:	2003      	movs	r0, #3
 800425a:	e7cf      	b.n	80041fc <USBD_DFU_EP0_TxReady+0x2a>
                    hdfu->data_ptr = hdfu->buffer.d8[1];
 800425c:	7863      	ldrb	r3, [r4, #1]
 800425e:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
                    hdfu->data_ptr += (uint32_t) hdfu->buffer.d8[2] << 8;
 8004262:	78a2      	ldrb	r2, [r4, #2]
 8004264:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004268:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
                    hdfu->data_ptr += (uint32_t) hdfu->buffer.d8[3] << 16;
 800426c:	78e2      	ldrb	r2, [r4, #3]
 800426e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8004272:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
                    hdfu->data_ptr += (uint32_t) hdfu->buffer.d8[4] << 24;
 8004276:	7922      	ldrb	r2, [r4, #4]
 8004278:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 800427c:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
 8004280:	e01a      	b.n	80042b8 <USBD_DFU_EP0_TxReady+0xe6>
                hdfu->wlength = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
                hdfu->wblock_num = 0U;
 8004288:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
                req.bmRequest = 0U;
 800428c:	f88d 3000 	strb.w	r3, [sp]
                req.wLength = 1U;
 8004290:	2301      	movs	r3, #1
 8004292:	f8ad 3006 	strh.w	r3, [sp, #6]
                USBD_CtlError(pdev, &req);
 8004296:	4669      	mov	r1, sp
 8004298:	f7ff fb2f 	bl	80038fa <USBD_CtlError>
 800429c:	e00c      	b.n	80042b8 <USBD_DFU_EP0_TxReady+0xe6>
            if (hdfu->wblock_num > 1U) {
 800429e:	2901      	cmp	r1, #1
 80042a0:	d90a      	bls.n	80042b8 <USBD_DFU_EP0_TxReady+0xe6>
                addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80042a2:	3902      	subs	r1, #2
 80042a4:	f8d4 0408 	ldr.w	r0, [r4, #1032]	@ 0x408
                if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t*) addr, hdfu->wlength) != USBD_OK) {
 80042a8:	6913      	ldr	r3, [r2, #16]
 80042aa:	f8d4 2404 	ldr.w	r2, [r4, #1028]	@ 0x404
 80042ae:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 80042b2:	4620      	mov	r0, r4
 80042b4:	4798      	blx	r3
 80042b6:	b980      	cbnz	r0, 80042da <USBD_DFU_EP0_TxReady+0x108>
        hdfu->wlength = 0U;
 80042b8:	2000      	movs	r0, #0
 80042ba:	f8c4 0404 	str.w	r0, [r4, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 80042be:	f8c4 0400 	str.w	r0, [r4, #1024]	@ 0x400
        hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 80042c2:	2303      	movs	r3, #3
 80042c4:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 80042c8:	f884 0415 	strb.w	r0, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80042cc:	f884 0416 	strb.w	r0, [r4, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 80042d0:	f884 0417 	strb.w	r0, [r4, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80042d4:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
 80042d8:	e790      	b.n	80041fc <USBD_DFU_EP0_TxReady+0x2a>
                    hdfu->dev_state = DFU_STATE_ERROR;
 80042da:	220a      	movs	r2, #10
 80042dc:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
                    hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 80042e0:	230b      	movs	r3, #11
 80042e2:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
                    hdfu->dev_status[1] = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
                    hdfu->dev_status[2] = 0U;
 80042ec:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
                    hdfu->dev_status[3] = 0U;
 80042f0:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
                    hdfu->dev_status[4] = hdfu->dev_state;
 80042f4:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
                    return (uint8_t) USBD_FAIL;
 80042f8:	2003      	movs	r0, #3
 80042fa:	e77f      	b.n	80041fc <USBD_DFU_EP0_TxReady+0x2a>
        DFU_Leave(pdev);
 80042fc:	f7ff ff33 	bl	8004166 <DFU_Leave>
    return (uint8_t) USBD_OK;
 8004300:	2000      	movs	r0, #0
 8004302:	e77b      	b.n	80041fc <USBD_DFU_EP0_TxReady+0x2a>
        return (uint8_t) USBD_FAIL;
 8004304:	2003      	movs	r0, #3
 8004306:	e779      	b.n	80041fc <USBD_DFU_EP0_TxReady+0x2a>
                    return (uint8_t) USBD_FAIL;
 8004308:	2003      	movs	r0, #3
 800430a:	e777      	b.n	80041fc <USBD_DFU_EP0_TxReady+0x2a>

0800430c <DFU_Upload>:
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	460e      	mov	r6, r1
    USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 8004310:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004314:	33b0      	adds	r3, #176	@ 0xb0
 8004316:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef*) pdev->pUserData[pdev->classId];
 800431a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800431e:	6859      	ldr	r1, [r3, #4]
    if (hdfu == NULL) {
 8004320:	2c00      	cmp	r4, #0
 8004322:	f000 8087 	beq.w	8004434 <DFU_Upload+0x128>
 8004326:	4605      	mov	r5, r0
    if (req->wLength > 0U) {
 8004328:	88f3      	ldrh	r3, [r6, #6]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d076      	beq.n	800441c <DFU_Upload+0x110>
        if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)) {
 800432e:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 8004332:	2b02      	cmp	r3, #2
 8004334:	d001      	beq.n	800433a <DFU_Upload+0x2e>
 8004336:	2b09      	cmp	r3, #9
 8004338:	d167      	bne.n	800440a <DFU_Upload+0xfe>
            hdfu->wblock_num = req->wValue;
 800433a:	8870      	ldrh	r0, [r6, #2]
 800433c:	f8c4 0400 	str.w	r0, [r4, #1024]	@ 0x400
            hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8004340:	88f2      	ldrh	r2, [r6, #6]
 8004342:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004346:	bf28      	it	cs
 8004348:	f44f 6280 	movcs.w	r2, #1024	@ 0x400
 800434c:	f8c4 2404 	str.w	r2, [r4, #1028]	@ 0x404
            if (hdfu->wblock_num == 0U) {
 8004350:	b9d0      	cbnz	r0, 8004388 <DFU_Upload+0x7c>
                hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8004352:	2a03      	cmp	r2, #3
 8004354:	d916      	bls.n	8004384 <DFU_Upload+0x78>
 8004356:	2202      	movs	r2, #2
 8004358:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
                hdfu->dev_status[1] = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
                hdfu->dev_status[2] = 0U;
 8004362:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
                hdfu->dev_status[3] = 0U;
 8004366:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
                hdfu->dev_status[4] = hdfu->dev_state;
 800436a:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
                hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800436e:	7023      	strb	r3, [r4, #0]
                hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8004370:	2321      	movs	r3, #33	@ 0x21
 8004372:	7063      	strb	r3, [r4, #1]
                hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8004374:	2341      	movs	r3, #65	@ 0x41
 8004376:	70a3      	strb	r3, [r4, #2]
                (void) USBD_CtlSendData(pdev, (uint8_t*) (&(hdfu->buffer.d8[0])), CmdLength);
 8004378:	2203      	movs	r2, #3
 800437a:	4621      	mov	r1, r4
 800437c:	4628      	mov	r0, r5
 800437e:	f000 fa78 	bl	8004872 <USBD_CtlSendData>
 8004382:	e057      	b.n	8004434 <DFU_Upload+0x128>
                hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8004384:	2209      	movs	r2, #9
 8004386:	e7e7      	b.n	8004358 <DFU_Upload+0x4c>
            } else if (hdfu->wblock_num > 1U) {
 8004388:	2801      	cmp	r0, #1
 800438a:	d92d      	bls.n	80043e8 <DFU_Upload+0xdc>
                hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800438c:	f04f 0c09 	mov.w	ip, #9
 8004390:	f884 c41c 	strb.w	ip, [r4, #1052]	@ 0x41c
                hdfu->dev_status[1] = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
                hdfu->dev_status[2] = 0U;
 800439a:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
                hdfu->dev_status[3] = 0U;
 800439e:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
                hdfu->dev_status[4] = hdfu->dev_state;
 80043a2:	f884 c418 	strb.w	ip, [r4, #1048]	@ 0x418
                    addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80043a6:	3802      	subs	r0, #2
 80043a8:	f8d4 3408 	ldr.w	r3, [r4, #1032]	@ 0x408
                    phaddr = DfuInterface->Read((uint8_t*) addr, hdfu->buffer.d8, hdfu->wlength);
 80043ac:	694f      	ldr	r7, [r1, #20]
 80043ae:	4621      	mov	r1, r4
 80043b0:	eb03 2080 	add.w	r0, r3, r0, lsl #10
 80043b4:	47b8      	blx	r7
                    if (phaddr == NULL) {
 80043b6:	4601      	mov	r1, r0
 80043b8:	b128      	cbz	r0, 80043c6 <DFU_Upload+0xba>
                        (void) USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 80043ba:	f8d4 2404 	ldr.w	r2, [r4, #1028]	@ 0x404
 80043be:	4628      	mov	r0, r5
 80043c0:	f000 fa57 	bl	8004872 <USBD_CtlSendData>
 80043c4:	e036      	b.n	8004434 <DFU_Upload+0x128>
                        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80043c6:	220f      	movs	r2, #15
 80043c8:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
                        hdfu->dev_status[1] = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
                        hdfu->dev_status[2] = 0U;
 80043d2:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
                        hdfu->dev_status[3] = 0U;
 80043d6:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
                        hdfu->dev_status[4] = hdfu->dev_state;
 80043da:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
                        USBD_CtlError(pdev, req);
 80043de:	4631      	mov	r1, r6
 80043e0:	4628      	mov	r0, r5
 80043e2:	f7ff fa8a 	bl	80038fa <USBD_CtlError>
 80043e6:	e025      	b.n	8004434 <DFU_Upload+0x128>
                hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80043e8:	220f      	movs	r2, #15
 80043ea:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
                hdfu->dev_status[1] = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
                hdfu->dev_status[2] = 0U;
 80043f4:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
                hdfu->dev_status[3] = 0U;
 80043f8:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
                hdfu->dev_status[4] = hdfu->dev_state;
 80043fc:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
                USBD_CtlError(pdev, req);
 8004400:	4631      	mov	r1, r6
 8004402:	4628      	mov	r0, r5
 8004404:	f7ff fa79 	bl	80038fa <USBD_CtlError>
 8004408:	e014      	b.n	8004434 <DFU_Upload+0x128>
            hdfu->wlength = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
            hdfu->wblock_num = 0U;
 8004410:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
            USBD_CtlError(pdev, req);
 8004414:	4631      	mov	r1, r6
 8004416:	f7ff fa70 	bl	80038fa <USBD_CtlError>
 800441a:	e00b      	b.n	8004434 <DFU_Upload+0x128>
        hdfu->dev_state = DFU_STATE_IDLE;
 800441c:	2202      	movs	r2, #2
 800441e:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8004428:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 800442c:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8004430:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
}
 8004434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004436 <DFU_GetStatus>:
static void DFU_GetStatus(USBD_HandleTypeDef *pdev) {
 8004436:	b570      	push	{r4, r5, r6, lr}
 8004438:	4604      	mov	r4, r0
    USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 800443a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800443e:	33b0      	adds	r3, #176	@ 0xb0
 8004440:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
    USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef*) pdev->pUserData[pdev->classId];
 8004444:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004448:	685e      	ldr	r6, [r3, #4]
    USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef*) USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800444a:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 800444e:	f7ff fe6f 	bl	8004130 <USBD_DFU_GetDfuFuncDesc>
    if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL)) {
 8004452:	b16d      	cbz	r5, 8004470 <DFU_GetStatus+0x3a>
 8004454:	b166      	cbz	r6, 8004470 <DFU_GetStatus+0x3a>
 8004456:	b158      	cbz	r0, 8004470 <DFU_GetStatus+0x3a>
    switch (hdfu->dev_state) {
 8004458:	f895 341c 	ldrb.w	r3, [r5, #1052]	@ 0x41c
 800445c:	2b03      	cmp	r3, #3
 800445e:	d008      	beq.n	8004472 <DFU_GetStatus+0x3c>
 8004460:	2b06      	cmp	r3, #6
 8004462:	d038      	beq.n	80044d6 <DFU_GetStatus+0xa0>
    (void) USBD_CtlSendData(pdev, (uint8_t*) (&(hdfu->dev_status[0])), 6U);
 8004464:	2206      	movs	r2, #6
 8004466:	f205 4114 	addw	r1, r5, #1044	@ 0x414
 800446a:	4620      	mov	r0, r4
 800446c:	f000 fa01 	bl	8004872 <USBD_CtlSendData>
}
 8004470:	bd70      	pop	{r4, r5, r6, pc}
        if (hdfu->wlength != 0U) {
 8004472:	f8d5 3404 	ldr.w	r3, [r5, #1028]	@ 0x404
 8004476:	b30b      	cbz	r3, 80044bc <DFU_GetStatus+0x86>
            hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8004478:	2204      	movs	r2, #4
 800447a:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
            hdfu->dev_status[1] = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 8004484:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 8004488:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 800448c:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
            if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE)) {
 8004490:	f8d5 3400 	ldr.w	r3, [r5, #1024]	@ 0x400
 8004494:	b913      	cbnz	r3, 800449c <DFU_GetStatus+0x66>
 8004496:	782b      	ldrb	r3, [r5, #0]
 8004498:	2b41      	cmp	r3, #65	@ 0x41
 800449a:	d007      	beq.n	80044ac <DFU_GetStatus+0x76>
                DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800449c:	69b3      	ldr	r3, [r6, #24]
 800449e:	f205 4214 	addw	r2, r5, #1044	@ 0x414
 80044a2:	2101      	movs	r1, #1
 80044a4:	f8d5 0408 	ldr.w	r0, [r5, #1032]	@ 0x408
 80044a8:	4798      	blx	r3
 80044aa:	e7db      	b.n	8004464 <DFU_GetStatus+0x2e>
                DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80044ac:	69b3      	ldr	r3, [r6, #24]
 80044ae:	f205 4214 	addw	r2, r5, #1044	@ 0x414
 80044b2:	2100      	movs	r1, #0
 80044b4:	f8d5 0408 	ldr.w	r0, [r5, #1032]	@ 0x408
 80044b8:	4798      	blx	r3
 80044ba:	e7d3      	b.n	8004464 <DFU_GetStatus+0x2e>
            hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80044bc:	2205      	movs	r2, #5
 80044be:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
            hdfu->dev_status[1] = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 80044c8:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 80044cc:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 80044d0:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
 80044d4:	e7c6      	b.n	8004464 <DFU_GetStatus+0x2e>
        if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS) {
 80044d6:	f895 341d 	ldrb.w	r3, [r5, #1053]	@ 0x41d
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d012      	beq.n	8004504 <DFU_GetStatus+0xce>
            if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) && ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)) {
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1c0      	bne.n	8004464 <DFU_GetStatus+0x2e>
 80044e2:	7883      	ldrb	r3, [r0, #2]
 80044e4:	f013 0f04 	tst.w	r3, #4
 80044e8:	d0bc      	beq.n	8004464 <DFU_GetStatus+0x2e>
                hdfu->dev_state = DFU_STATE_IDLE;
 80044ea:	2202      	movs	r2, #2
 80044ec:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
                hdfu->dev_status[1] = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
                hdfu->dev_status[2] = 0U;
 80044f6:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
                hdfu->dev_status[3] = 0U;
 80044fa:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
                hdfu->dev_status[4] = hdfu->dev_state;
 80044fe:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
 8004502:	e7af      	b.n	8004464 <DFU_GetStatus+0x2e>
            hdfu->dev_state = DFU_STATE_MANIFEST;
 8004504:	2307      	movs	r3, #7
 8004506:	f885 341c 	strb.w	r3, [r5, #1052]	@ 0x41c
            hdfu->dev_status[1] = 1U; /* bwPollTimeout = 1ms */
 800450a:	2201      	movs	r2, #1
 800450c:	f885 2415 	strb.w	r2, [r5, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 8004510:	2200      	movs	r2, #0
 8004512:	f885 2416 	strb.w	r2, [r5, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 8004516:	f885 2417 	strb.w	r2, [r5, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 800451a:	f885 3418 	strb.w	r3, [r5, #1048]	@ 0x418
 800451e:	e7a1      	b.n	8004464 <DFU_GetStatus+0x2e>

08004520 <DFU_GetState>:
static void DFU_GetState(USBD_HandleTypeDef *pdev) {
 8004520:	b508      	push	{r3, lr}
    USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 8004522:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004526:	33b0      	adds	r3, #176	@ 0xb0
 8004528:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    if (hdfu == NULL) {
 800452c:	b121      	cbz	r1, 8004538 <DFU_GetState+0x18>
    (void) USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800452e:	2201      	movs	r2, #1
 8004530:	f201 411c 	addw	r1, r1, #1052	@ 0x41c
 8004534:	f000 f99d 	bl	8004872 <USBD_CtlSendData>
}
 8004538:	bd08      	pop	{r3, pc}

0800453a <DFU_Download>:
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800453a:	b508      	push	{r3, lr}
    USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 800453c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004540:	33b0      	adds	r3, #176	@ 0xb0
 8004542:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    if (hdfu == NULL) {
 8004546:	b39b      	cbz	r3, 80045b0 <DFU_Download+0x76>
    if (req->wLength > 0U) {
 8004548:	88ca      	ldrh	r2, [r1, #6]
 800454a:	b1e2      	cbz	r2, 8004586 <DFU_Download+0x4c>
        if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE)) {
 800454c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8004550:	2a02      	cmp	r2, #2
 8004552:	d001      	beq.n	8004558 <DFU_Download+0x1e>
 8004554:	2a05      	cmp	r2, #5
 8004556:	d113      	bne.n	8004580 <DFU_Download+0x46>
            hdfu->wblock_num = req->wValue;
 8004558:	884a      	ldrh	r2, [r1, #2]
 800455a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
            hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 800455e:	88ca      	ldrh	r2, [r1, #6]
 8004560:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004564:	bf28      	it	cs
 8004566:	f44f 6280 	movcs.w	r2, #1024	@ 0x400
 800456a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
            hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800456e:	2103      	movs	r1, #3
 8004570:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
            hdfu->dev_status[4] = hdfu->dev_state;
 8004574:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
            (void) USBD_CtlPrepareRx(pdev, (uint8_t*) hdfu->buffer.d8, hdfu->wlength);
 8004578:	4619      	mov	r1, r3
 800457a:	f000 f990 	bl	800489e <USBD_CtlPrepareRx>
 800457e:	e017      	b.n	80045b0 <DFU_Download+0x76>
            USBD_CtlError(pdev, req);
 8004580:	f7ff f9bb 	bl	80038fa <USBD_CtlError>
 8004584:	e014      	b.n	80045b0 <DFU_Download+0x76>
        if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE)) {
 8004586:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800458a:	2a05      	cmp	r2, #5
 800458c:	d001      	beq.n	8004592 <DFU_Download+0x58>
 800458e:	2a02      	cmp	r2, #2
 8004590:	d10f      	bne.n	80045b2 <DFU_Download+0x78>
                hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8004592:	2201      	movs	r2, #1
 8004594:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8004598:	2106      	movs	r1, #6
 800459a:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
                hdfu->dev_status[1] = 0U;
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
                hdfu->dev_status[2] = 0U;
 80045a4:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
                hdfu->dev_status[3] = 0U;
 80045a8:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
                hdfu->dev_status[4] = hdfu->dev_state;
 80045ac:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
}
 80045b0:	bd08      	pop	{r3, pc}
            USBD_CtlError(pdev, req);
 80045b2:	f7ff f9a2 	bl	80038fa <USBD_CtlError>
 80045b6:	e7fb      	b.n	80045b0 <DFU_Download+0x76>

080045b8 <DFU_Detach>:
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 80045b8:	b570      	push	{r4, r5, r6, lr}
 80045ba:	4604      	mov	r4, r0
 80045bc:	460e      	mov	r6, r1
    USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 80045be:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80045c2:	33b0      	adds	r3, #176	@ 0xb0
 80045c4:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
    USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef*) USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 80045c8:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 80045cc:	f7ff fdb0 	bl	8004130 <USBD_DFU_GetDfuFuncDesc>
    if ((hdfu == NULL) || (pDfuFunc == NULL)) {
 80045d0:	b345      	cbz	r5, 8004624 <DFU_Detach+0x6c>
 80045d2:	b338      	cbz	r0, 8004624 <DFU_Detach+0x6c>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)) {
 80045d4:	f895 241c 	ldrb.w	r2, [r5, #1052]	@ 0x41c
 80045d8:	2a09      	cmp	r2, #9
 80045da:	d819      	bhi.n	8004610 <DFU_Detach+0x58>
 80045dc:	f44f 731b 	mov.w	r3, #620	@ 0x26c
 80045e0:	40d3      	lsrs	r3, r2
 80045e2:	f013 0f01 	tst.w	r3, #1
 80045e6:	d013      	beq.n	8004610 <DFU_Detach+0x58>
        hdfu->dev_state = DFU_STATE_IDLE;
 80045e8:	2202      	movs	r2, #2
 80045ea:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
        hdfu->dev_status[0] = DFU_ERROR_NONE;
 80045ee:	2300      	movs	r3, #0
 80045f0:	f885 3414 	strb.w	r3, [r5, #1044]	@ 0x414
        hdfu->dev_status[1] = 0U;
 80045f4:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80045f8:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80045fc:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8004600:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
        hdfu->dev_status[5] = 0U; /*iString*/
 8004604:	f885 3419 	strb.w	r3, [r5, #1049]	@ 0x419
        hdfu->wblock_num = 0U;
 8004608:	f8c5 3400 	str.w	r3, [r5, #1024]	@ 0x400
        hdfu->wlength = 0U;
 800460c:	f8c5 3404 	str.w	r3, [r5, #1028]	@ 0x404
    if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U) {
 8004610:	7883      	ldrb	r3, [r0, #2]
 8004612:	f013 0f08 	tst.w	r3, #8
 8004616:	d006      	beq.n	8004626 <DFU_Detach+0x6e>
        (void) USBD_Stop(pdev);
 8004618:	4620      	mov	r0, r4
 800461a:	f7fe ff86 	bl	800352a <USBD_Stop>
        (void) USBD_Start(pdev);
 800461e:	4620      	mov	r0, r4
 8004620:	f7fe ff7f 	bl	8003522 <USBD_Start>
}
 8004624:	bd70      	pop	{r4, r5, r6, pc}
        USBD_Delay((uint32_t) req->wValue);
 8004626:	8870      	ldrh	r0, [r6, #2]
 8004628:	f7fc fbb4 	bl	8000d94 <HAL_Delay>
 800462c:	e7fa      	b.n	8004624 <DFU_Detach+0x6c>

0800462e <USBD_DFU_Setup>:
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800462e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004630:	b083      	sub	sp, #12
 8004632:	460e      	mov	r6, r1
    USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 8004634:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004638:	33b0      	adds	r3, #176	@ 0xb0
 800463a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    uint16_t status_info = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (hdfu == NULL) {
 8004644:	2900      	cmp	r1, #0
 8004646:	f000 8098 	beq.w	800477a <USBD_DFU_Setup+0x14c>
 800464a:	4605      	mov	r5, r0
    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800464c:	7834      	ldrb	r4, [r6, #0]
 800464e:	f014 0460 	ands.w	r4, r4, #96	@ 0x60
 8004652:	d02e      	beq.n	80046b2 <USBD_DFU_Setup+0x84>
 8004654:	2c20      	cmp	r4, #32
 8004656:	f040 8089 	bne.w	800476c <USBD_DFU_Setup+0x13e>
        switch (req->bRequest) {
 800465a:	7874      	ldrb	r4, [r6, #1]
 800465c:	2c06      	cmp	r4, #6
 800465e:	d823      	bhi.n	80046a8 <USBD_DFU_Setup+0x7a>
 8004660:	e8df f004 	tbb	[pc, r4]
 8004664:	0e09041e 	.word	0x0e09041e
 8004668:	1612      	.short	0x1612
 800466a:	1a          	.byte	0x1a
 800466b:	00          	.byte	0x00
            DFU_Download(pdev, req);
 800466c:	4631      	mov	r1, r6
 800466e:	f7ff ff64 	bl	800453a <DFU_Download>
    USBD_StatusTypeDef ret = USBD_OK;
 8004672:	2400      	movs	r4, #0
            break;
 8004674:	e07e      	b.n	8004774 <USBD_DFU_Setup+0x146>
            DFU_Upload(pdev, req);
 8004676:	4631      	mov	r1, r6
 8004678:	f7ff fe48 	bl	800430c <DFU_Upload>
    USBD_StatusTypeDef ret = USBD_OK;
 800467c:	2400      	movs	r4, #0
            break;
 800467e:	e079      	b.n	8004774 <USBD_DFU_Setup+0x146>
            DFU_GetStatus(pdev);
 8004680:	f7ff fed9 	bl	8004436 <DFU_GetStatus>
    USBD_StatusTypeDef ret = USBD_OK;
 8004684:	2400      	movs	r4, #0
            break;
 8004686:	e075      	b.n	8004774 <USBD_DFU_Setup+0x146>
            DFU_ClearStatus(pdev);
 8004688:	f7ff fcea 	bl	8004060 <DFU_ClearStatus>
    USBD_StatusTypeDef ret = USBD_OK;
 800468c:	2400      	movs	r4, #0
            break;
 800468e:	e071      	b.n	8004774 <USBD_DFU_Setup+0x146>
            DFU_GetState(pdev);
 8004690:	f7ff ff46 	bl	8004520 <DFU_GetState>
    USBD_StatusTypeDef ret = USBD_OK;
 8004694:	2400      	movs	r4, #0
            break;
 8004696:	e06d      	b.n	8004774 <USBD_DFU_Setup+0x146>
            DFU_Abort(pdev);
 8004698:	f7ff fd0f 	bl	80040ba <DFU_Abort>
    USBD_StatusTypeDef ret = USBD_OK;
 800469c:	2400      	movs	r4, #0
            break;
 800469e:	e069      	b.n	8004774 <USBD_DFU_Setup+0x146>
            DFU_Detach(pdev, req);
 80046a0:	4631      	mov	r1, r6
 80046a2:	f7ff ff89 	bl	80045b8 <DFU_Detach>
            break;
 80046a6:	e065      	b.n	8004774 <USBD_DFU_Setup+0x146>
            USBD_CtlError(pdev, req);
 80046a8:	4631      	mov	r1, r6
 80046aa:	f7ff f926 	bl	80038fa <USBD_CtlError>
            ret = USBD_FAIL;
 80046ae:	2403      	movs	r4, #3
            break;
 80046b0:	e060      	b.n	8004774 <USBD_DFU_Setup+0x146>
        switch (req->bRequest) {
 80046b2:	7877      	ldrb	r7, [r6, #1]
 80046b4:	2f0b      	cmp	r7, #11
 80046b6:	d854      	bhi.n	8004762 <USBD_DFU_Setup+0x134>
 80046b8:	e8df f007 	tbb	[pc, r7]
 80046bc:	53535c06 	.word	0x53535c06
 80046c0:	53175353 	.word	0x53175353
 80046c4:	3f2f5353 	.word	0x3f2f5353
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80046c8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d004      	beq.n	80046dc <USBD_DFU_Setup+0xae>
                USBD_CtlError(pdev, req);
 80046d2:	4631      	mov	r1, r6
 80046d4:	f7ff f911 	bl	80038fa <USBD_CtlError>
                ret = USBD_FAIL;
 80046d8:	2403      	movs	r4, #3
 80046da:	e04b      	b.n	8004774 <USBD_DFU_Setup+0x146>
                (void) USBD_CtlSendData(pdev, (uint8_t*) &status_info, 2U);
 80046dc:	2202      	movs	r2, #2
 80046de:	f10d 0106 	add.w	r1, sp, #6
 80046e2:	f000 f8c6 	bl	8004872 <USBD_CtlSendData>
    USBD_StatusTypeDef ret = USBD_OK;
 80046e6:	463c      	mov	r4, r7
 80046e8:	e044      	b.n	8004774 <USBD_DFU_Setup+0x146>
            if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE) {
 80046ea:	8873      	ldrh	r3, [r6, #2]
 80046ec:	0a1b      	lsrs	r3, r3, #8
 80046ee:	2b21      	cmp	r3, #33	@ 0x21
 80046f0:	d140      	bne.n	8004774 <USBD_DFU_Setup+0x146>
                pbuf = (uint8_t*) USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 80046f2:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 80046f6:	f7ff fd1b 	bl	8004130 <USBD_DFU_GetDfuFuncDesc>
                if (pbuf != NULL) {
 80046fa:	4601      	mov	r1, r0
 80046fc:	b138      	cbz	r0, 800470e <USBD_DFU_Setup+0xe0>
                    len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80046fe:	88f2      	ldrh	r2, [r6, #6]
                    (void) USBD_CtlSendData(pdev, pbuf, len);
 8004700:	2a09      	cmp	r2, #9
 8004702:	bf28      	it	cs
 8004704:	2209      	movcs	r2, #9
 8004706:	4628      	mov	r0, r5
 8004708:	f000 f8b3 	bl	8004872 <USBD_CtlSendData>
 800470c:	e032      	b.n	8004774 <USBD_DFU_Setup+0x146>
                    USBD_CtlError(pdev, req);
 800470e:	4631      	mov	r1, r6
 8004710:	4628      	mov	r0, r5
 8004712:	f7ff f8f2 	bl	80038fa <USBD_CtlError>
                    ret = USBD_FAIL;
 8004716:	2403      	movs	r4, #3
 8004718:	e02c      	b.n	8004774 <USBD_DFU_Setup+0x146>
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800471a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b03      	cmp	r3, #3
 8004722:	d004      	beq.n	800472e <USBD_DFU_Setup+0x100>
                USBD_CtlError(pdev, req);
 8004724:	4631      	mov	r1, r6
 8004726:	f7ff f8e8 	bl	80038fa <USBD_CtlError>
                ret = USBD_FAIL;
 800472a:	2403      	movs	r4, #3
 800472c:	e022      	b.n	8004774 <USBD_DFU_Setup+0x146>
                (void) USBD_CtlSendData(pdev, (uint8_t*) &hdfu->alt_setting, 1U);
 800472e:	2201      	movs	r2, #1
 8004730:	f501 6182 	add.w	r1, r1, #1040	@ 0x410
 8004734:	f000 f89d 	bl	8004872 <USBD_CtlSendData>
 8004738:	e01c      	b.n	8004774 <USBD_DFU_Setup+0x146>
            if ((uint8_t) (req->wValue) < USBD_DFU_MAX_ITF_NUM) {
 800473a:	78b4      	ldrb	r4, [r6, #2]
 800473c:	b964      	cbnz	r4, 8004758 <USBD_DFU_Setup+0x12a>
                if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800473e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b03      	cmp	r3, #3
 8004746:	d102      	bne.n	800474e <USBD_DFU_Setup+0x120>
                    hdfu->alt_setting = (uint8_t) (req->wValue);
 8004748:	f8c1 4410 	str.w	r4, [r1, #1040]	@ 0x410
 800474c:	e012      	b.n	8004774 <USBD_DFU_Setup+0x146>
                    USBD_CtlError(pdev, req);
 800474e:	4631      	mov	r1, r6
 8004750:	f7ff f8d3 	bl	80038fa <USBD_CtlError>
                    ret = USBD_FAIL;
 8004754:	2403      	movs	r4, #3
 8004756:	e00d      	b.n	8004774 <USBD_DFU_Setup+0x146>
                USBD_CtlError(pdev, req);
 8004758:	4631      	mov	r1, r6
 800475a:	f7ff f8ce 	bl	80038fa <USBD_CtlError>
                ret = USBD_FAIL;
 800475e:	2403      	movs	r4, #3
 8004760:	e008      	b.n	8004774 <USBD_DFU_Setup+0x146>
            USBD_CtlError(pdev, req);
 8004762:	4631      	mov	r1, r6
 8004764:	f7ff f8c9 	bl	80038fa <USBD_CtlError>
            ret = USBD_FAIL;
 8004768:	2403      	movs	r4, #3
            break;
 800476a:	e003      	b.n	8004774 <USBD_DFU_Setup+0x146>
        USBD_CtlError(pdev, req);
 800476c:	4631      	mov	r1, r6
 800476e:	f7ff f8c4 	bl	80038fa <USBD_CtlError>
        ret = USBD_FAIL;
 8004772:	2403      	movs	r4, #3
}
 8004774:	4620      	mov	r0, r4
 8004776:	b003      	add	sp, #12
 8004778:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return (uint8_t) USBD_FAIL;
 800477a:	2403      	movs	r4, #3
 800477c:	e7fa      	b.n	8004774 <USBD_DFU_Setup+0x146>

0800477e <USBD_DFU_DeInit>:
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 800477e:	b538      	push	{r3, r4, r5, lr}
    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 8004780:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004784:	33b0      	adds	r3, #176	@ 0xb0
 8004786:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800478a:	b323      	cbz	r3, 80047d6 <USBD_DFU_DeInit+0x58>
 800478c:	4604      	mov	r4, r0
    hdfu->wblock_num = 0U;
 800478e:	2500      	movs	r5, #0
 8004790:	f8c3 5400 	str.w	r5, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8004794:	f8c3 5404 	str.w	r5, [r3, #1028]	@ 0x404
    hdfu->dev_state = DFU_STATE_IDLE;
 8004798:	2202      	movs	r2, #2
 800479a:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800479e:	f883 5414 	strb.w	r5, [r3, #1044]	@ 0x414
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 80047a2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    ((USBD_DFU_MediaTypeDef*) pdev->pUserData[pdev->classId])->DeInit();
 80047a6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80047aa:	33b0      	adds	r3, #176	@ 0xb0
 80047ac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80047b6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80047ba:	33b0      	adds	r3, #176	@ 0xb0
 80047bc:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80047c0:	f000 fb16 	bl	8004df0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80047c4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80047c8:	33b0      	adds	r3, #176	@ 0xb0
 80047ca:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 80047ce:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
    return (uint8_t) USBD_OK;
 80047d2:	4628      	mov	r0, r5
}
 80047d4:	bd38      	pop	{r3, r4, r5, pc}
        return (uint8_t) USBD_EMEM;
 80047d6:	2002      	movs	r0, #2
 80047d8:	e7fc      	b.n	80047d4 <USBD_DFU_DeInit+0x56>
	...

080047dc <USBD_DFU_Init>:
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 80047dc:	b510      	push	{r4, lr}
 80047de:	4604      	mov	r4, r0
    hdfu = (USBD_DFU_HandleTypeDef*) USBD_malloc (sizeof(USBD_DFU_HandleTypeDef));
 80047e0:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 80047e4:	f000 fb00 	bl	8004de8 <USBD_static_malloc>
    if (hdfu == NULL) {
 80047e8:	b358      	cbz	r0, 8004842 <USBD_DFU_Init+0x66>
    pdev->pClassDataCmsit[pdev->classId] = (void*) hdfu;
 80047ea:	f8d4 22d4 	ldr.w	r2, [r4, #724]	@ 0x2d4
 80047ee:	32b0      	adds	r2, #176	@ 0xb0
 80047f0:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80047f4:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
    hdfu->alt_setting = 0U;
 80047f8:	2200      	movs	r2, #0
 80047fa:	f8c0 2410 	str.w	r2, [r0, #1040]	@ 0x410
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80047fe:	4916      	ldr	r1, [pc, #88]	@ (8004858 <USBD_DFU_Init+0x7c>)
 8004800:	f8c0 1408 	str.w	r1, [r0, #1032]	@ 0x408
    hdfu->wblock_num = 0U;
 8004804:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8004808:	f8c0 2404 	str.w	r2, [r0, #1028]	@ 0x404
    hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800480c:	f880 241d 	strb.w	r2, [r0, #1053]	@ 0x41d
    hdfu->dev_state = DFU_STATE_IDLE;
 8004810:	2102      	movs	r1, #2
 8004812:	f880 141c 	strb.w	r1, [r0, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8004816:	f880 2414 	strb.w	r2, [r0, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 800481a:	f880 2415 	strb.w	r2, [r0, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 800481e:	f880 2416 	strb.w	r2, [r0, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8004822:	f880 2417 	strb.w	r2, [r0, #1047]	@ 0x417
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 8004826:	f880 1418 	strb.w	r1, [r0, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U;
 800482a:	f880 2419 	strb.w	r2, [r0, #1049]	@ 0x419
    if (((USBD_DFU_MediaTypeDef*) pdev->pUserData[pdev->classId])->Init() != USBD_OK) {
 800482e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8004832:	33b0      	adds	r3, #176	@ 0xb0
 8004834:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004838:	6863      	ldr	r3, [r4, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4798      	blx	r3
 800483e:	b940      	cbnz	r0, 8004852 <USBD_DFU_Init+0x76>
}
 8004840:	bd10      	pop	{r4, pc}
        pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004842:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8004846:	33b0      	adds	r3, #176	@ 0xb0
 8004848:	2200      	movs	r2, #0
 800484a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        return (uint8_t) USBD_EMEM;
 800484e:	2002      	movs	r0, #2
 8004850:	e7f6      	b.n	8004840 <USBD_DFU_Init+0x64>
        return (uint8_t) USBD_FAIL;
 8004852:	2003      	movs	r0, #3
 8004854:	e7f4      	b.n	8004840 <USBD_DFU_Init+0x64>
 8004856:	bf00      	nop
 8004858:	08008000 	.word	0x08008000

0800485c <USBD_DFU_RegisterMedia>:
    if (fops == NULL) {
 800485c:	b139      	cbz	r1, 800486e <USBD_DFU_RegisterMedia+0x12>
    pdev->pUserData[pdev->classId] = fops;
 800485e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004862:	33b0      	adds	r3, #176	@ 0xb0
 8004864:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004868:	6041      	str	r1, [r0, #4]
    return (uint8_t) USBD_OK;
 800486a:	2000      	movs	r0, #0
 800486c:	4770      	bx	lr
        return (uint8_t) USBD_FAIL;
 800486e:	2003      	movs	r0, #3
}
 8004870:	4770      	bx	lr

08004872 <USBD_CtlSendData>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be sent
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len) {
 8004872:	b508      	push	{r3, lr}
 8004874:	4613      	mov	r3, r2
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_DATA_IN;
 8004876:	2202      	movs	r2, #2
 8004878:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
    pdev->ep_in[0].total_length = len;
 800487c:	6143      	str	r3, [r0, #20]
    pdev->ep_in[0].pbuffer = pbuf;
 800487e:	6241      	str	r1, [r0, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
    pdev->ep_in[0].rem_length = len;
 8004880:	6183      	str	r3, [r0, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

    /* Start the transfer */
    (void) USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004882:	460a      	mov	r2, r1
 8004884:	2100      	movs	r1, #0
 8004886:	f000 faf1 	bl	8004e6c <USBD_LL_Transmit>

    return USBD_OK;
}
 800488a:	2000      	movs	r0, #0
 800488c:	bd08      	pop	{r3, pc}

0800488e <USBD_CtlContinueSendData>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be sent
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len) {
 800488e:	b508      	push	{r3, lr}
 8004890:	4613      	mov	r3, r2
    /* Start the next transfer */
    (void) USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004892:	460a      	mov	r2, r1
 8004894:	2100      	movs	r1, #0
 8004896:	f000 fae9 	bl	8004e6c <USBD_LL_Transmit>

    return USBD_OK;
}
 800489a:	2000      	movs	r0, #0
 800489c:	bd08      	pop	{r3, pc}

0800489e <USBD_CtlPrepareRx>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be received
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len) {
 800489e:	b508      	push	{r3, lr}
 80048a0:	4613      	mov	r3, r2
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_DATA_OUT;
 80048a2:	2203      	movs	r2, #3
 80048a4:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
    pdev->ep_out[0].total_length = len;
 80048a8:	f8c0 3154 	str.w	r3, [r0, #340]	@ 0x154
    pdev->ep_out[0].pbuffer = pbuf;
 80048ac:	f8c0 1164 	str.w	r1, [r0, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
    pdev->ep_out[0].rem_length = len;
 80048b0:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

    /* Start the transfer */
    (void) USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80048b4:	460a      	mov	r2, r1
 80048b6:	2100      	movs	r1, #0
 80048b8:	f000 fae0 	bl	8004e7c <USBD_LL_PrepareReceive>

    return USBD_OK;
}
 80048bc:	2000      	movs	r0, #0
 80048be:	bd08      	pop	{r3, pc}

080048c0 <USBD_CtlContinueRx>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be received
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len) {
 80048c0:	b508      	push	{r3, lr}
 80048c2:	4613      	mov	r3, r2
    (void) USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80048c4:	460a      	mov	r2, r1
 80048c6:	2100      	movs	r1, #0
 80048c8:	f000 fad8 	bl	8004e7c <USBD_LL_PrepareReceive>

    return USBD_OK;
}
 80048cc:	2000      	movs	r0, #0
 80048ce:	bd08      	pop	{r3, pc}

080048d0 <USBD_CtlSendStatus>:
 * @brief  USBD_CtlSendStatus
 *         send zero lzngth packet on the ctl pipe
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev) {
 80048d0:	b508      	push	{r3, lr}
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_STATUS_IN;
 80048d2:	2204      	movs	r2, #4
 80048d4:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

    /* Start the transfer */
    (void) USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80048d8:	2300      	movs	r3, #0
 80048da:	461a      	mov	r2, r3
 80048dc:	4619      	mov	r1, r3
 80048de:	f000 fac5 	bl	8004e6c <USBD_LL_Transmit>

    return USBD_OK;
}
 80048e2:	2000      	movs	r0, #0
 80048e4:	bd08      	pop	{r3, pc}

080048e6 <USBD_CtlReceiveStatus>:
 * @brief  USBD_CtlReceiveStatus
 *         receive zero lzngth packet on the ctl pipe
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev) {
 80048e6:	b508      	push	{r3, lr}
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80048e8:	2205      	movs	r2, #5
 80048ea:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

    /* Start the transfer */
    (void) USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80048ee:	2300      	movs	r3, #0
 80048f0:	461a      	mov	r2, r3
 80048f2:	4619      	mov	r1, r3
 80048f4:	f000 fac2 	bl	8004e7c <USBD_LL_PrepareReceive>

    return USBD_OK;
}
 80048f8:	2000      	movs	r0, #0
 80048fa:	bd08      	pop	{r3, pc}

080048fc <MX_USB_DEVICE_Init>:

/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void) {
 80048fc:	b508      	push	{r3, lr}
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 80048fe:	2200      	movs	r2, #0
 8004900:	490f      	ldr	r1, [pc, #60]	@ (8004940 <MX_USB_DEVICE_Init+0x44>)
 8004902:	4810      	ldr	r0, [pc, #64]	@ (8004944 <MX_USB_DEVICE_Init+0x48>)
 8004904:	f7fe fdd6 	bl	80034b4 <USBD_Init>
 8004908:	b970      	cbnz	r0, 8004928 <MX_USB_DEVICE_Init+0x2c>
        Error_Handler();
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 800490a:	490f      	ldr	r1, [pc, #60]	@ (8004948 <MX_USB_DEVICE_Init+0x4c>)
 800490c:	480d      	ldr	r0, [pc, #52]	@ (8004944 <MX_USB_DEVICE_Init+0x48>)
 800490e:	f7fe fde8 	bl	80034e2 <USBD_RegisterClass>
 8004912:	b960      	cbnz	r0, 800492e <MX_USB_DEVICE_Init+0x32>
        Error_Handler();
    }
    if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK) {
 8004914:	490d      	ldr	r1, [pc, #52]	@ (800494c <MX_USB_DEVICE_Init+0x50>)
 8004916:	480b      	ldr	r0, [pc, #44]	@ (8004944 <MX_USB_DEVICE_Init+0x48>)
 8004918:	f7ff ffa0 	bl	800485c <USBD_DFU_RegisterMedia>
 800491c:	b950      	cbnz	r0, 8004934 <MX_USB_DEVICE_Init+0x38>
        Error_Handler();
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800491e:	4809      	ldr	r0, [pc, #36]	@ (8004944 <MX_USB_DEVICE_Init+0x48>)
 8004920:	f7fe fdff 	bl	8003522 <USBD_Start>
 8004924:	b948      	cbnz	r0, 800493a <MX_USB_DEVICE_Init+0x3e>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004926:	bd08      	pop	{r3, pc}
        Error_Handler();
 8004928:	f7fb ffd0 	bl	80008cc <Error_Handler>
 800492c:	e7ed      	b.n	800490a <MX_USB_DEVICE_Init+0xe>
        Error_Handler();
 800492e:	f7fb ffcd 	bl	80008cc <Error_Handler>
 8004932:	e7ef      	b.n	8004914 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 8004934:	f7fb ffca 	bl	80008cc <Error_Handler>
 8004938:	e7f1      	b.n	800491e <MX_USB_DEVICE_Init+0x22>
        Error_Handler();
 800493a:	f7fb ffc7 	bl	80008cc <Error_Handler>
}
 800493e:	e7f2      	b.n	8004926 <MX_USB_DEVICE_Init+0x2a>
 8004940:	200000ac 	.word	0x200000ac
 8004944:	200002d4 	.word	0x200002d4
 8004948:	2000003c 	.word	0x2000003c
 800494c:	200000c8 	.word	0x200000c8

08004950 <USBD_FS_DeviceDescriptor>:
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t* USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
    UNUSED(speed);
    *length = sizeof(USBD_FS_DeviceDesc);
 8004950:	2312      	movs	r3, #18
 8004952:	800b      	strh	r3, [r1, #0]
    return USBD_FS_DeviceDesc;
}
 8004954:	4800      	ldr	r0, [pc, #0]	@ (8004958 <USBD_FS_DeviceDescriptor+0x8>)
 8004956:	4770      	bx	lr
 8004958:	20000098 	.word	0x20000098

0800495c <USBD_FS_LangIDStrDescriptor>:
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t* USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
    UNUSED(speed);
    *length = sizeof(USBD_LangIDDesc);
 800495c:	2304      	movs	r3, #4
 800495e:	800b      	strh	r3, [r1, #0]
    return USBD_LangIDDesc;
}
 8004960:	4800      	ldr	r0, [pc, #0]	@ (8004964 <USBD_FS_LangIDStrDescriptor+0x8>)
 8004962:	4770      	bx	lr
 8004964:	20000094 	.word	0x20000094

08004968 <IntToUnicode>:
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len) {
    uint8_t idx = 0;

    for (idx = 0; idx < len; idx++) {
 8004968:	2300      	movs	r3, #0
 800496a:	4293      	cmp	r3, r2
 800496c:	d21e      	bcs.n	80049ac <IntToUnicode+0x44>
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len) {
 800496e:	b500      	push	{lr}
 8004970:	e010      	b.n	8004994 <IntToUnicode+0x2c>
        if (((value >> 28)) < 0xA) {
            pbuf[2 * idx] = (value >> 28) + '0';
        } else {
            pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004972:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 8004976:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
        }

        value = value << 4;
 800497a:	0100      	lsls	r0, r0, #4

        pbuf[2 * idx + 1] = 0;
 800497c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004980:	f10c 0c01 	add.w	ip, ip, #1
 8004984:	f04f 0e00 	mov.w	lr, #0
 8004988:	f801 e00c 	strb.w	lr, [r1, ip]
    for (idx = 0; idx < len; idx++) {
 800498c:	3301      	adds	r3, #1
 800498e:	b2db      	uxtb	r3, r3
 8004990:	4293      	cmp	r3, r2
 8004992:	d209      	bcs.n	80049a8 <IntToUnicode+0x40>
        if (((value >> 28)) < 0xA) {
 8004994:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8004998:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 800499c:	d2e9      	bcs.n	8004972 <IntToUnicode+0xa>
            pbuf[2 * idx] = (value >> 28) + '0';
 800499e:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 80049a2:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 80049a6:	e7e8      	b.n	800497a <IntToUnicode+0x12>
    }
}
 80049a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <Get_SerialNum>:
static void Get_SerialNum(void) {
 80049b0:	b538      	push	{r3, r4, r5, lr}
    deviceserial0 = *(uint32_t*) DEVICE_ID1;
 80049b2:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <Get_SerialNum+0x30>)
 80049b4:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
    deviceserial1 = *(uint32_t*) DEVICE_ID2;
 80049b8:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
    deviceserial2 = *(uint32_t*) DEVICE_ID3;
 80049bc:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
    if (deviceserial0 != 0) {
 80049c0:	18c0      	adds	r0, r0, r3
 80049c2:	d100      	bne.n	80049c6 <Get_SerialNum+0x16>
}
 80049c4:	bd38      	pop	{r3, r4, r5, pc}
        IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80049c6:	4d07      	ldr	r5, [pc, #28]	@ (80049e4 <Get_SerialNum+0x34>)
 80049c8:	2208      	movs	r2, #8
 80049ca:	4629      	mov	r1, r5
 80049cc:	f7ff ffcc 	bl	8004968 <IntToUnicode>
        IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80049d0:	2204      	movs	r2, #4
 80049d2:	f105 0110 	add.w	r1, r5, #16
 80049d6:	4620      	mov	r0, r4
 80049d8:	f7ff ffc6 	bl	8004968 <IntToUnicode>
}
 80049dc:	e7f2      	b.n	80049c4 <Get_SerialNum+0x14>
 80049de:	bf00      	nop
 80049e0:	1fff7000 	.word	0x1fff7000
 80049e4:	2000007a 	.word	0x2000007a

080049e8 <USBD_FS_SerialStrDescriptor>:
uint8_t* USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 80049e8:	b508      	push	{r3, lr}
    *length = USB_SIZ_STRING_SERIAL;
 80049ea:	231a      	movs	r3, #26
 80049ec:	800b      	strh	r3, [r1, #0]
    Get_SerialNum();
 80049ee:	f7ff ffdf 	bl	80049b0 <Get_SerialNum>
}
 80049f2:	4801      	ldr	r0, [pc, #4]	@ (80049f8 <USBD_FS_SerialStrDescriptor+0x10>)
 80049f4:	bd08      	pop	{r3, pc}
 80049f6:	bf00      	nop
 80049f8:	20000078 	.word	0x20000078

080049fc <USBD_FS_ProductStrDescriptor>:
uint8_t* USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 80049fc:	b508      	push	{r3, lr}
 80049fe:	460a      	mov	r2, r1
    if (speed == 0) {
 8004a00:	b928      	cbnz	r0, 8004a0e <USBD_FS_ProductStrDescriptor+0x12>
        USBD_GetString((uint8_t*) USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004a02:	4905      	ldr	r1, [pc, #20]	@ (8004a18 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004a04:	4805      	ldr	r0, [pc, #20]	@ (8004a1c <USBD_FS_ProductStrDescriptor+0x20>)
 8004a06:	f7ff fae5 	bl	8003fd4 <USBD_GetString>
}
 8004a0a:	4803      	ldr	r0, [pc, #12]	@ (8004a18 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004a0c:	bd08      	pop	{r3, pc}
        USBD_GetString((uint8_t*) USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004a0e:	4902      	ldr	r1, [pc, #8]	@ (8004a18 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004a10:	4802      	ldr	r0, [pc, #8]	@ (8004a1c <USBD_FS_ProductStrDescriptor+0x20>)
 8004a12:	f7ff fadf 	bl	8003fd4 <USBD_GetString>
 8004a16:	e7f8      	b.n	8004a0a <USBD_FS_ProductStrDescriptor+0xe>
 8004a18:	200005b0 	.word	0x200005b0
 8004a1c:	08006158 	.word	0x08006158

08004a20 <USBD_FS_ManufacturerStrDescriptor>:
uint8_t* USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 8004a20:	b510      	push	{r4, lr}
 8004a22:	460a      	mov	r2, r1
    USBD_GetString((uint8_t*) USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004a24:	4c03      	ldr	r4, [pc, #12]	@ (8004a34 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004a26:	4621      	mov	r1, r4
 8004a28:	4803      	ldr	r0, [pc, #12]	@ (8004a38 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004a2a:	f7ff fad3 	bl	8003fd4 <USBD_GetString>
}
 8004a2e:	4620      	mov	r0, r4
 8004a30:	bd10      	pop	{r4, pc}
 8004a32:	bf00      	nop
 8004a34:	200005b0 	.word	0x200005b0
 8004a38:	08006178 	.word	0x08006178

08004a3c <USBD_FS_ConfigStrDescriptor>:
uint8_t* USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 8004a3c:	b508      	push	{r3, lr}
 8004a3e:	460a      	mov	r2, r1
    if (speed == USBD_SPEED_HIGH) {
 8004a40:	b928      	cbnz	r0, 8004a4e <USBD_FS_ConfigStrDescriptor+0x12>
        USBD_GetString((uint8_t*) USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004a42:	4905      	ldr	r1, [pc, #20]	@ (8004a58 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004a44:	4805      	ldr	r0, [pc, #20]	@ (8004a5c <USBD_FS_ConfigStrDescriptor+0x20>)
 8004a46:	f7ff fac5 	bl	8003fd4 <USBD_GetString>
}
 8004a4a:	4803      	ldr	r0, [pc, #12]	@ (8004a58 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004a4c:	bd08      	pop	{r3, pc}
        USBD_GetString((uint8_t*) USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004a4e:	4902      	ldr	r1, [pc, #8]	@ (8004a58 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004a50:	4802      	ldr	r0, [pc, #8]	@ (8004a5c <USBD_FS_ConfigStrDescriptor+0x20>)
 8004a52:	f7ff fabf 	bl	8003fd4 <USBD_GetString>
 8004a56:	e7f8      	b.n	8004a4a <USBD_FS_ConfigStrDescriptor+0xe>
 8004a58:	200005b0 	.word	0x200005b0
 8004a5c:	0800618c 	.word	0x0800618c

08004a60 <USBD_FS_InterfaceStrDescriptor>:
uint8_t* USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 8004a60:	b508      	push	{r3, lr}
 8004a62:	460a      	mov	r2, r1
    if (speed == 0) {
 8004a64:	b928      	cbnz	r0, 8004a72 <USBD_FS_InterfaceStrDescriptor+0x12>
        USBD_GetString((uint8_t*) USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004a66:	4905      	ldr	r1, [pc, #20]	@ (8004a7c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004a68:	4805      	ldr	r0, [pc, #20]	@ (8004a80 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004a6a:	f7ff fab3 	bl	8003fd4 <USBD_GetString>
}
 8004a6e:	4803      	ldr	r0, [pc, #12]	@ (8004a7c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004a70:	bd08      	pop	{r3, pc}
        USBD_GetString((uint8_t*) USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004a72:	4902      	ldr	r1, [pc, #8]	@ (8004a7c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004a74:	4802      	ldr	r0, [pc, #8]	@ (8004a80 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004a76:	f7ff faad 	bl	8003fd4 <USBD_GetString>
 8004a7a:	e7f8      	b.n	8004a6e <USBD_FS_InterfaceStrDescriptor+0xe>
 8004a7c:	200005b0 	.word	0x200005b0
 8004a80:	08006198 	.word	0x08006198

08004a84 <GetSector>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
static uint32_t GetSector(uint32_t Address) {
    uint32_t sector = 0;

    if ((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8004a84:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
 8004a88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a8c:	d329      	bcc.n	8004ae2 <GetSector+0x5e>
        sector = FLASH_SECTOR_0;
    else if ((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8004a8e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8004a92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a96:	d326      	bcc.n	8004ae6 <GetSector+0x62>
        sector = FLASH_SECTOR_1;
    else if ((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8004a98:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
 8004a9c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8004aa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004aa4:	d321      	bcc.n	8004aea <GetSector+0x66>
        sector = FLASH_SECTOR_2;
    else if ((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 8004aa6:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
 8004aaa:	f5a3 4340 	sub.w	r3, r3, #49152	@ 0xc000
 8004aae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ab2:	d31c      	bcc.n	8004aee <GetSector+0x6a>
        sector = FLASH_SECTOR_3;
    else if ((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8004ab4:	f100 4377 	add.w	r3, r0, #4143972352	@ 0xf7000000
 8004ab8:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8004abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ac0:	d317      	bcc.n	8004af2 <GetSector+0x6e>
        sector = FLASH_SECTOR_4;
    else if ((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8004ac2:	f100 4377 	add.w	r3, r0, #4143972352	@ 0xf7000000
 8004ac6:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 8004aca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ace:	d312      	bcc.n	8004af6 <GetSector+0x72>
        sector = FLASH_SECTOR_5;
    else if ((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8004ad0:	f100 4077 	add.w	r0, r0, #4143972352	@ 0xf7000000
 8004ad4:	f500 007c 	add.w	r0, r0, #16515072	@ 0xfc0000
 8004ad8:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8004adc:	d20d      	bcs.n	8004afa <GetSector+0x76>
        sector = FLASH_SECTOR_6;
 8004ade:	2006      	movs	r0, #6
 8004ae0:	4770      	bx	lr
        sector = FLASH_SECTOR_0;
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	4770      	bx	lr
        sector = FLASH_SECTOR_1;
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	4770      	bx	lr
        sector = FLASH_SECTOR_2;
 8004aea:	2002      	movs	r0, #2
 8004aec:	4770      	bx	lr
        sector = FLASH_SECTOR_3;
 8004aee:	2003      	movs	r0, #3
 8004af0:	4770      	bx	lr
        sector = FLASH_SECTOR_4;
 8004af2:	2004      	movs	r0, #4
 8004af4:	4770      	bx	lr
        sector = FLASH_SECTOR_5;
 8004af6:	2005      	movs	r0, #5
 8004af8:	4770      	bx	lr
    else
        sector = FLASH_SECTOR_7;
 8004afa:	2007      	movs	r0, #7
    return sector;
}
 8004afc:	4770      	bx	lr

08004afe <GetBank>:

static uint32_t GetBank(uint32_t Addr) {
    return FLASH_BANK_1;
}
 8004afe:	2001      	movs	r0, #1
 8004b00:	4770      	bx	lr

08004b02 <MEM_If_Read_FS>:
 * @param  src: Pointer to the source buffer. Address to be written to.
 * @param  dest: Pointer to the destination buffer.
 * @param  Len: Number of data to be read (in bytes).
 * @retval Pointer to the physical address where data should be read.
 */
uint8_t* MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len) {
 8004b02:	4603      	mov	r3, r0
 8004b04:	4608      	mov	r0, r1
    /* Return a valid address to avoid HardFault */
    /* USER CODE BEGIN 4 */
    uint32_t i = 0;
    uint8_t *psrc = src;

    for (i = 0; i < Len; i++) {
 8004b06:	f04f 0c00 	mov.w	ip, #0
 8004b0a:	4594      	cmp	ip, r2
 8004b0c:	d20a      	bcs.n	8004b24 <MEM_If_Read_FS+0x22>
uint8_t* MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len) {
 8004b0e:	b500      	push	{lr}
        dest[i] = *psrc++;
 8004b10:	f813 eb01 	ldrb.w	lr, [r3], #1
 8004b14:	f800 e00c 	strb.w	lr, [r0, ip]
    for (i = 0; i < Len; i++) {
 8004b18:	f10c 0c01 	add.w	ip, ip, #1
 8004b1c:	4594      	cmp	ip, r2
 8004b1e:	d3f7      	bcc.n	8004b10 <MEM_If_Read_FS+0xe>
    }
    /* Return a valid address to avoid HardFault */
    return (uint8_t*) (dest);
    /* USER CODE END 4 */
}
 8004b20:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <MEM_If_GetStatus_FS>:
 * @param  buffer: used for returning the time necessary for a program or an erase operation
 * @retval USBD_OK if operation is successful
 */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer) {
    /* USER CODE BEGIN 5 */
    switch (Cmd) {
 8004b26:	b141      	cbz	r1, 8004b3a <MEM_If_GetStatus_FS+0x14>
 8004b28:	2901      	cmp	r1, #1
 8004b2a:	d104      	bne.n	8004b36 <MEM_If_GetStatus_FS+0x10>
    case DFU_MEDIA_PROGRAM:
        buffer[1] = (uint8_t) FLASH_PROGRAM_TIME;
 8004b2c:	2332      	movs	r3, #50	@ 0x32
 8004b2e:	7053      	strb	r3, [r2, #1]
        buffer[2] = (uint8_t) (FLASH_PROGRAM_TIME << 8);
 8004b30:	2300      	movs	r3, #0
 8004b32:	7093      	strb	r3, [r2, #2]
        buffer[3] = 0;
 8004b34:	70d3      	strb	r3, [r2, #3]
        buffer[3] = 0;
        break;
    }
    return USBD_OK;
    /* USER CODE END 5 */
}
 8004b36:	2000      	movs	r0, #0
 8004b38:	4770      	bx	lr
        buffer[1] = (uint8_t) FLASH_ERASE_TIME;
 8004b3a:	2332      	movs	r3, #50	@ 0x32
 8004b3c:	7053      	strb	r3, [r2, #1]
        buffer[2] = (uint8_t) (FLASH_ERASE_TIME << 8);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	7093      	strb	r3, [r2, #2]
        buffer[3] = 0;
 8004b42:	70d3      	strb	r3, [r2, #3]
        break;
 8004b44:	e7f7      	b.n	8004b36 <MEM_If_GetStatus_FS+0x10>

08004b46 <MEM_If_Write_FS>:
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len) {
 8004b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (Add < USBD_DFU_APP_DEFAULT_ADD || Add > FLASH_END)
 8004b48:	f101 4378 	add.w	r3, r1, #4160749568	@ 0xf8000000
 8004b4c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8004b50:	f5b3 2ff0 	cmp.w	r3, #491520	@ 0x78000
 8004b54:	d214      	bcs.n	8004b80 <MEM_If_Write_FS+0x3a>
 8004b56:	4606      	mov	r6, r0
 8004b58:	460d      	mov	r5, r1
 8004b5a:	4617      	mov	r7, r2
    for (i = 0; i < Len; i += 4) {
 8004b5c:	2400      	movs	r4, #0
 8004b5e:	42bc      	cmp	r4, r7
 8004b60:	d20c      	bcs.n	8004b7c <MEM_If_Write_FS+0x36>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t) (dest + i), *(uint32_t*) (src + i)) == HAL_OK) {
 8004b62:	5932      	ldr	r2, [r6, r4]
 8004b64:	2300      	movs	r3, #0
 8004b66:	1929      	adds	r1, r5, r4
 8004b68:	2002      	movs	r0, #2
 8004b6a:	f7fc fa95 	bl	8001098 <HAL_FLASH_Program>
 8004b6e:	b948      	cbnz	r0, 8004b84 <MEM_If_Write_FS+0x3e>
            if (*(uint32_t*) (src + i) != *(uint32_t*) (dest + i)) {
 8004b70:	5931      	ldr	r1, [r6, r4]
 8004b72:	592b      	ldr	r3, [r5, r4]
 8004b74:	4299      	cmp	r1, r3
 8004b76:	d107      	bne.n	8004b88 <MEM_If_Write_FS+0x42>
    for (i = 0; i < Len; i += 4) {
 8004b78:	3404      	adds	r4, #4
 8004b7a:	e7f0      	b.n	8004b5e <MEM_If_Write_FS+0x18>
    return USBD_OK;
 8004b7c:	2000      	movs	r0, #0
}
 8004b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return USBD_FAIL;
 8004b80:	2003      	movs	r0, #3
 8004b82:	e7fc      	b.n	8004b7e <MEM_If_Write_FS+0x38>
            return USBD_FAIL;
 8004b84:	2003      	movs	r0, #3
 8004b86:	e7fa      	b.n	8004b7e <MEM_If_Write_FS+0x38>
                return 2 * USBD_FAIL;
 8004b88:	2006      	movs	r0, #6
 8004b8a:	e7f8      	b.n	8004b7e <MEM_If_Write_FS+0x38>

08004b8c <MEM_If_Erase_FS>:
    if (Add < USBD_DFU_APP_DEFAULT_ADD || Add > FLASH_END)
 8004b8c:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
 8004b90:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8004b94:	f5b3 2ff0 	cmp.w	r3, #491520	@ 0x78000
 8004b98:	d219      	bcs.n	8004bce <MEM_If_Erase_FS+0x42>
uint16_t MEM_If_Erase_FS(uint32_t Add) {
 8004b9a:	b570      	push	{r4, r5, r6, lr}
 8004b9c:	b086      	sub	sp, #24
 8004b9e:	4604      	mov	r4, r0
    uint32_t StartSector = 0, SectorError = 0;
 8004ba0:	2600      	movs	r6, #0
 8004ba2:	9600      	str	r6, [sp, #0]
    StartSector = GetSector(Add);
 8004ba4:	f7ff ff6e 	bl	8004a84 <GetSector>
 8004ba8:	4605      	mov	r5, r0
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8004baa:	9601      	str	r6, [sp, #4]
    EraseInitStruct.Banks = GetBank(Add);
 8004bac:	4620      	mov	r0, r4
 8004bae:	f7ff ffa6 	bl	8004afe <GetBank>
 8004bb2:	9002      	str	r0, [sp, #8]
    EraseInitStruct.Sector = StartSector;
 8004bb4:	9503      	str	r5, [sp, #12]
    EraseInitStruct.NbSectors = 1;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	9304      	str	r3, [sp, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8004bba:	2302      	movs	r3, #2
 8004bbc:	9305      	str	r3, [sp, #20]
    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8004bbe:	4669      	mov	r1, sp
 8004bc0:	a801      	add	r0, sp, #4
 8004bc2:	f7fc fb0f 	bl	80011e4 <HAL_FLASHEx_Erase>
 8004bc6:	b920      	cbnz	r0, 8004bd2 <MEM_If_Erase_FS+0x46>
    return USBD_OK;
 8004bc8:	4630      	mov	r0, r6
}
 8004bca:	b006      	add	sp, #24
 8004bcc:	bd70      	pop	{r4, r5, r6, pc}
        return USBD_FAIL;
 8004bce:	2003      	movs	r0, #3
}
 8004bd0:	4770      	bx	lr
        return USBD_FAIL;
 8004bd2:	2003      	movs	r0, #3
 8004bd4:	e7f9      	b.n	8004bca <MEM_If_Erase_FS+0x3e>

08004bd6 <MEM_If_DeInit_FS>:
uint16_t MEM_If_DeInit_FS(void) {
 8004bd6:	b508      	push	{r3, lr}
    return HAL_FLASH_Lock() == HAL_OK ? USBD_OK : USBD_FAIL;
 8004bd8:	f7fc fa24 	bl	8001024 <HAL_FLASH_Lock>
 8004bdc:	b900      	cbnz	r0, 8004be0 <MEM_If_DeInit_FS+0xa>
}
 8004bde:	bd08      	pop	{r3, pc}
    return HAL_FLASH_Lock() == HAL_OK ? USBD_OK : USBD_FAIL;
 8004be0:	2003      	movs	r0, #3
 8004be2:	e7fc      	b.n	8004bde <MEM_If_DeInit_FS+0x8>

08004be4 <MEM_If_Init_FS>:
uint16_t MEM_If_Init_FS(void) {
 8004be4:	b508      	push	{r3, lr}
    return HAL_FLASH_Unlock() == HAL_OK ? USBD_OK : USBD_FAIL;
 8004be6:	f7fc fa05 	bl	8000ff4 <HAL_FLASH_Unlock>
 8004bea:	b900      	cbnz	r0, 8004bee <MEM_If_Init_FS+0xa>
}
 8004bec:	bd08      	pop	{r3, pc}
    return HAL_FLASH_Unlock() == HAL_OK ? USBD_OK : USBD_FAIL;
 8004bee:	2003      	movs	r0, #3
 8004bf0:	e7fc      	b.n	8004bec <MEM_If_Init_FS+0x8>
	...

08004bf4 <HAL_PCD_MspInit>:
/*******************************************************************************
 LL Driver Callbacks (PCD -> USB Device Library)
 *******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef *pcdHandle) {
 8004bf4:	b530      	push	{r4, r5, lr}
 8004bf6:	b089      	sub	sp, #36	@ 0x24
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	9303      	str	r3, [sp, #12]
 8004bfc:	9304      	str	r3, [sp, #16]
 8004bfe:	9305      	str	r3, [sp, #20]
 8004c00:	9306      	str	r3, [sp, #24]
 8004c02:	9307      	str	r3, [sp, #28]
    if (pcdHandle->Instance == USB_OTG_FS) {
 8004c04:	6803      	ldr	r3, [r0, #0]
 8004c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c0a:	d001      	beq.n	8004c10 <HAL_PCD_MspInit+0x1c>
        HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
        /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

        /* USER CODE END USB_OTG_FS_MspInit 1 */
    }
}
 8004c0c:	b009      	add	sp, #36	@ 0x24
 8004c0e:	bd30      	pop	{r4, r5, pc}
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c10:	2500      	movs	r5, #0
 8004c12:	9501      	str	r5, [sp, #4]
 8004c14:	4c16      	ldr	r4, [pc, #88]	@ (8004c70 <HAL_PCD_MspInit+0x7c>)
 8004c16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	9301      	str	r3, [sp, #4]
 8004c26:	9b01      	ldr	r3, [sp, #4]
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8004c28:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004c2c:	9303      	str	r3, [sp, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	9304      	str	r3, [sp, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c32:	2303      	movs	r3, #3
 8004c34:	9306      	str	r3, [sp, #24]
        GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004c36:	230a      	movs	r3, #10
 8004c38:	9307      	str	r3, [sp, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c3a:	a903      	add	r1, sp, #12
 8004c3c:	480d      	ldr	r0, [pc, #52]	@ (8004c74 <HAL_PCD_MspInit+0x80>)
 8004c3e:	f7fc fb1b 	bl	8001278 <HAL_GPIO_Init>
        __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004c42:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c48:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c4a:	9502      	str	r5, [sp, #8]
 8004c4c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004c4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c52:	6463      	str	r3, [r4, #68]	@ 0x44
 8004c54:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c5a:	9302      	str	r3, [sp, #8]
 8004c5c:	9b02      	ldr	r3, [sp, #8]
        HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004c5e:	462a      	mov	r2, r5
 8004c60:	4629      	mov	r1, r5
 8004c62:	2043      	movs	r0, #67	@ 0x43
 8004c64:	f7fc f8fe 	bl	8000e64 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004c68:	2043      	movs	r0, #67	@ 0x43
 8004c6a:	f7fc f90b 	bl	8000e84 <HAL_NVIC_EnableIRQ>
}
 8004c6e:	e7cd      	b.n	8004c0c <HAL_PCD_MspInit+0x18>
 8004c70:	40023800 	.word	0x40023800
 8004c74:	40020000 	.word	0x40020000

08004c78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004c78:	b508      	push	{r3, lr}
    USBD_LL_SetupStage((USBD_HandleTypeDef*) hpcd->pData, (uint8_t*) hpcd->Setup);
 8004c7a:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8004c7e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004c82:	f7fe fc71 	bl	8003568 <USBD_LL_SetupStage>
}
 8004c86:	bd08      	pop	{r3, pc}

08004c88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004c88:	b508      	push	{r3, lr}
    USBD_LL_DataOutStage((USBD_HandleTypeDef*) hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004c8a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8004c8e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004c92:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8004c96:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004c9a:	f7fe fd38 	bl	800370e <USBD_LL_DataOutStage>
}
 8004c9e:	bd08      	pop	{r3, pc}

08004ca0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004ca0:	b508      	push	{r3, lr}
    USBD_LL_DataInStage((USBD_HandleTypeDef*) hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004ca2:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8004ca6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004caa:	6a1a      	ldr	r2, [r3, #32]
 8004cac:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004cb0:	f7fe fd92 	bl	80037d8 <USBD_LL_DataInStage>
}
 8004cb4:	bd08      	pop	{r3, pc}

08004cb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004cb6:	b508      	push	{r3, lr}
    USBD_LL_SOF((USBD_HandleTypeDef*) hpcd->pData);
 8004cb8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004cbc:	f7fe fcd2 	bl	8003664 <USBD_LL_SOF>
}
 8004cc0:	bd08      	pop	{r3, pc}

08004cc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004cc2:	b510      	push	{r4, lr}
 8004cc4:	4604      	mov	r4, r0
    USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

    if (hpcd->Init.speed != PCD_SPEED_FULL) {
 8004cc6:	79c3      	ldrb	r3, [r0, #7]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d109      	bne.n	8004ce0 <HAL_PCD_ResetCallback+0x1e>
        Error_Handler();
    }
    /* Set Speed. */
    USBD_LL_SetSpeed((USBD_HandleTypeDef*) hpcd->pData, speed);
 8004ccc:	2101      	movs	r1, #1
 8004cce:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8004cd2:	f7fe fca8 	bl	8003626 <USBD_LL_SetSpeed>

    /* Reset Device. */
    USBD_LL_Reset((USBD_HandleTypeDef*) hpcd->pData);
 8004cd6:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8004cda:	f7fe fc71 	bl	80035c0 <USBD_LL_Reset>
}
 8004cde:	bd10      	pop	{r4, pc}
        Error_Handler();
 8004ce0:	f7fb fdf4 	bl	80008cc <Error_Handler>
 8004ce4:	e7f2      	b.n	8004ccc <HAL_PCD_ResetCallback+0xa>
	...

08004ce8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004ce8:	b510      	push	{r4, lr}
 8004cea:	4604      	mov	r4, r0
    /* Inform USB library that core enters in suspend Mode. */
    USBD_LL_Suspend((USBD_HandleTypeDef*) hpcd->pData);
 8004cec:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004cf0:	f7fe fc9c 	bl	800362c <USBD_LL_Suspend>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004cf4:	6822      	ldr	r2, [r4, #0]
 8004cf6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
    /* Enter in STOP mode. */
    /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 8004d02:	7ae3      	ldrb	r3, [r4, #11]
 8004d04:	b123      	cbz	r3, 8004d10 <HAL_PCD_SuspendCallback+0x28>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t) ((uint32_t) (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004d06:	4a03      	ldr	r2, [pc, #12]	@ (8004d14 <HAL_PCD_SuspendCallback+0x2c>)
 8004d08:	6913      	ldr	r3, [r2, #16]
 8004d0a:	f043 0306 	orr.w	r3, r3, #6
 8004d0e:	6113      	str	r3, [r2, #16]
    }
    /* USER CODE END 2 */
}
 8004d10:	bd10      	pop	{r4, pc}
 8004d12:	bf00      	nop
 8004d14:	e000ed00 	.word	0xe000ed00

08004d18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004d18:	b508      	push	{r3, lr}
    /* USER CODE BEGIN 3 */

    /* USER CODE END 3 */
    USBD_LL_Resume((USBD_HandleTypeDef*) hpcd->pData);
 8004d1a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004d1e:	f7fe fc94 	bl	800364a <USBD_LL_Resume>
}
 8004d22:	bd08      	pop	{r3, pc}

08004d24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004d24:	b508      	push	{r3, lr}
    USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*) hpcd->pData, epnum);
 8004d26:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004d2a:	f7fe fcc3 	bl	80036b4 <USBD_LL_IsoOUTIncomplete>
}
 8004d2e:	bd08      	pop	{r3, pc}

08004d30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004d30:	b508      	push	{r3, lr}
    USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*) hpcd->pData, epnum);
 8004d32:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004d36:	f7fe fca6 	bl	8003686 <USBD_LL_IsoINIncomplete>
}
 8004d3a:	bd08      	pop	{r3, pc}

08004d3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004d3c:	b508      	push	{r3, lr}
    USBD_LL_DevConnected((USBD_HandleTypeDef*) hpcd->pData);
 8004d3e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004d42:	f7fe fcce 	bl	80036e2 <USBD_LL_DevConnected>
}
 8004d46:	bd08      	pop	{r3, pc}

08004d48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004d48:	b508      	push	{r3, lr}
    USBD_LL_DevDisconnected((USBD_HandleTypeDef*) hpcd->pData);
 8004d4a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004d4e:	f7fe fcca 	bl	80036e6 <USBD_LL_DevDisconnected>
}
 8004d52:	bd08      	pop	{r3, pc}

08004d54 <USBD_LL_Init>:
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev) {
    /* Init USB Ip. */
    if (pdev->id == DEVICE_FS) {
 8004d54:	7802      	ldrb	r2, [r0, #0]
 8004d56:	b10a      	cbz	r2, 8004d5c <USBD_LL_Init+0x8>
        HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
    }
    return USBD_OK;
}
 8004d58:	2000      	movs	r0, #0
 8004d5a:	4770      	bx	lr
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev) {
 8004d5c:	b510      	push	{r4, lr}
 8004d5e:	4603      	mov	r3, r0
        hpcd_USB_OTG_FS.pData = pdev;
 8004d60:	4815      	ldr	r0, [pc, #84]	@ (8004db8 <USBD_LL_Init+0x64>)
 8004d62:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
        pdev->pData = &hpcd_USB_OTG_FS;
 8004d66:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
        hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004d6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004d6e:	6003      	str	r3, [r0, #0]
        hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8004d70:	2304      	movs	r3, #4
 8004d72:	7103      	strb	r3, [r0, #4]
        hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004d74:	2202      	movs	r2, #2
 8004d76:	71c2      	strb	r2, [r0, #7]
        hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	7183      	strb	r3, [r0, #6]
        hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004d7c:	7242      	strb	r2, [r0, #9]
        hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004d7e:	7283      	strb	r3, [r0, #10]
        hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004d80:	72c3      	strb	r3, [r0, #11]
        hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004d82:	7303      	strb	r3, [r0, #12]
        hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8004d84:	7383      	strb	r3, [r0, #14]
        hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004d86:	73c3      	strb	r3, [r0, #15]
        if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8004d88:	f7fc fbd8 	bl	800153c <HAL_PCD_Init>
 8004d8c:	b980      	cbnz	r0, 8004db0 <USBD_LL_Init+0x5c>
        HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8004d8e:	4c0a      	ldr	r4, [pc, #40]	@ (8004db8 <USBD_LL_Init+0x64>)
 8004d90:	2180      	movs	r1, #128	@ 0x80
 8004d92:	4620      	mov	r0, r4
 8004d94:	f7fd f985 	bl	80020a2 <HAL_PCDEx_SetRxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8004d98:	2240      	movs	r2, #64	@ 0x40
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f7fd f95a 	bl	8002056 <HAL_PCDEx_SetTxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8004da2:	2280      	movs	r2, #128	@ 0x80
 8004da4:	2101      	movs	r1, #1
 8004da6:	4620      	mov	r0, r4
 8004da8:	f7fd f955 	bl	8002056 <HAL_PCDEx_SetTxFiFo>
}
 8004dac:	2000      	movs	r0, #0
 8004dae:	bd10      	pop	{r4, pc}
            Error_Handler();
 8004db0:	f7fb fd8c 	bl	80008cc <Error_Handler>
 8004db4:	e7eb      	b.n	8004d8e <USBD_LL_Init+0x3a>
 8004db6:	bf00      	nop
 8004db8:	20000bd4 	.word	0x20000bd4

08004dbc <USBD_LL_IsStallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr) {
    PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004dbc:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

    if ((ep_addr & 0x80) == 0x80) {
 8004dc0:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004dc4:	d108      	bne.n	8004dd8 <USBD_LL_IsStallEP+0x1c>
        return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
    } else {
        return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004dc6:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8004dca:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004dce:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004dd2:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
    }
}
 8004dd6:	4770      	bx	lr
        return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004dd8:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8004ddc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004de0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004de4:	7d98      	ldrb	r0, [r3, #22]
 8004de6:	4770      	bx	lr

08004de8 <USBD_static_malloc>:
 * @retval None
 */
void* USBD_static_malloc(uint32_t size) {
    static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef) / 4) + 1];/* On 32-bit boundary */
    return mem;
}
 8004de8:	4800      	ldr	r0, [pc, #0]	@ (8004dec <USBD_static_malloc+0x4>)
 8004dea:	4770      	bx	lr
 8004dec:	200007b0 	.word	0x200007b0

08004df0 <USBD_static_free>:
 * @param  p: Pointer to allocated  memory address
 * @retval None
 */
void USBD_static_free(void *p) {

}
 8004df0:	4770      	bx	lr

08004df2 <USBD_Get_USB_Status>:
 * @retval USB status
 */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status) {
    USBD_StatusTypeDef usb_status = USBD_OK;

    switch (hal_status) {
 8004df2:	2803      	cmp	r0, #3
 8004df4:	d805      	bhi.n	8004e02 <USBD_Get_USB_Status+0x10>
 8004df6:	e8df f000 	tbb	[pc, r0]
 8004dfa:	0405      	.short	0x0405
 8004dfc:	0502      	.short	0x0502
        break;
    case HAL_ERROR:
        usb_status = USBD_FAIL;
        break;
    case HAL_BUSY:
        usb_status = USBD_BUSY;
 8004dfe:	2001      	movs	r0, #1
        break;
 8004e00:	4770      	bx	lr
        usb_status = USBD_FAIL;
 8004e02:	2003      	movs	r0, #3
    default:
        usb_status = USBD_FAIL;
        break;
    }
    return usb_status;
}
 8004e04:	4770      	bx	lr

08004e06 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev) {
 8004e06:	b508      	push	{r3, lr}
    hal_status = HAL_PCD_Start(pdev->pData);
 8004e08:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8004e0c:	f7fc fc17 	bl	800163e <HAL_PCD_Start>
    usb_status = USBD_Get_USB_Status(hal_status);
 8004e10:	f7ff ffef 	bl	8004df2 <USBD_Get_USB_Status>
}
 8004e14:	bd08      	pop	{r3, pc}

08004e16 <USBD_LL_Stop>:
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev) {
 8004e16:	b508      	push	{r3, lr}
    hal_status = HAL_PCD_Stop(pdev->pData);
 8004e18:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8004e1c:	f7fc fc31 	bl	8001682 <HAL_PCD_Stop>
    usb_status = USBD_Get_USB_Status(hal_status);
 8004e20:	f7ff ffe7 	bl	8004df2 <USBD_Get_USB_Status>
}
 8004e24:	bd08      	pop	{r3, pc}

08004e26 <USBD_LL_OpenEP>:
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps) {
 8004e26:	b508      	push	{r3, lr}
 8004e28:	4694      	mov	ip, r2
 8004e2a:	461a      	mov	r2, r3
    hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004e2c:	4663      	mov	r3, ip
 8004e2e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8004e32:	f7fc fd0a 	bl	800184a <HAL_PCD_EP_Open>
    usb_status = USBD_Get_USB_Status(hal_status);
 8004e36:	f7ff ffdc 	bl	8004df2 <USBD_Get_USB_Status>
}
 8004e3a:	bd08      	pop	{r3, pc}

08004e3c <USBD_LL_StallEP>:
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr) {
 8004e3c:	b508      	push	{r3, lr}
    hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004e3e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8004e42:	f7fc fd92 	bl	800196a <HAL_PCD_EP_SetStall>
    usb_status = USBD_Get_USB_Status(hal_status);
 8004e46:	f7ff ffd4 	bl	8004df2 <USBD_Get_USB_Status>
}
 8004e4a:	bd08      	pop	{r3, pc}

08004e4c <USBD_LL_ClearStallEP>:
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr) {
 8004e4c:	b508      	push	{r3, lr}
    hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004e4e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8004e52:	f7fc fdcd 	bl	80019f0 <HAL_PCD_EP_ClrStall>
    usb_status = USBD_Get_USB_Status(hal_status);
 8004e56:	f7ff ffcc 	bl	8004df2 <USBD_Get_USB_Status>
}
 8004e5a:	bd08      	pop	{r3, pc}

08004e5c <USBD_LL_SetUSBAddress>:
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr) {
 8004e5c:	b508      	push	{r3, lr}
    hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004e5e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8004e62:	f7fc fcdf 	bl	8001824 <HAL_PCD_SetAddress>
    usb_status = USBD_Get_USB_Status(hal_status);
 8004e66:	f7ff ffc4 	bl	8004df2 <USBD_Get_USB_Status>
}
 8004e6a:	bd08      	pop	{r3, pc}

08004e6c <USBD_LL_Transmit>:
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size) {
 8004e6c:	b508      	push	{r3, lr}
    hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004e6e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8004e72:	f7fc fd55 	bl	8001920 <HAL_PCD_EP_Transmit>
    usb_status = USBD_Get_USB_Status(hal_status);
 8004e76:	f7ff ffbc 	bl	8004df2 <USBD_Get_USB_Status>
}
 8004e7a:	bd08      	pop	{r3, pc}

08004e7c <USBD_LL_PrepareReceive>:
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size) {
 8004e7c:	b508      	push	{r3, lr}
    hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004e7e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8004e82:	f7fc fd28 	bl	80018d6 <HAL_PCD_EP_Receive>
    usb_status = USBD_Get_USB_Status(hal_status);
 8004e86:	f7ff ffb4 	bl	8004df2 <USBD_Get_USB_Status>
}
 8004e8a:	bd08      	pop	{r3, pc}

08004e8c <std>:
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	b510      	push	{r4, lr}
 8004e90:	4604      	mov	r4, r0
 8004e92:	e9c0 3300 	strd	r3, r3, [r0]
 8004e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e9a:	6083      	str	r3, [r0, #8]
 8004e9c:	8181      	strh	r1, [r0, #12]
 8004e9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ea0:	81c2      	strh	r2, [r0, #14]
 8004ea2:	6183      	str	r3, [r0, #24]
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	2208      	movs	r2, #8
 8004ea8:	305c      	adds	r0, #92	@ 0x5c
 8004eaa:	f000 f9f9 	bl	80052a0 <memset>
 8004eae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee4 <std+0x58>)
 8004eb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8004eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee8 <std+0x5c>)
 8004eb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004eec <std+0x60>)
 8004eb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004eba:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef0 <std+0x64>)
 8004ebc:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef4 <std+0x68>)
 8004ec0:	6224      	str	r4, [r4, #32]
 8004ec2:	429c      	cmp	r4, r3
 8004ec4:	d006      	beq.n	8004ed4 <std+0x48>
 8004ec6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004eca:	4294      	cmp	r4, r2
 8004ecc:	d002      	beq.n	8004ed4 <std+0x48>
 8004ece:	33d0      	adds	r3, #208	@ 0xd0
 8004ed0:	429c      	cmp	r4, r3
 8004ed2:	d105      	bne.n	8004ee0 <std+0x54>
 8004ed4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004edc:	f000 ba58 	b.w	8005390 <__retarget_lock_init_recursive>
 8004ee0:	bd10      	pop	{r4, pc}
 8004ee2:	bf00      	nop
 8004ee4:	080050f1 	.word	0x080050f1
 8004ee8:	08005113 	.word	0x08005113
 8004eec:	0800514b 	.word	0x0800514b
 8004ef0:	0800516f 	.word	0x0800516f
 8004ef4:	200010b8 	.word	0x200010b8

08004ef8 <stdio_exit_handler>:
 8004ef8:	4a02      	ldr	r2, [pc, #8]	@ (8004f04 <stdio_exit_handler+0xc>)
 8004efa:	4903      	ldr	r1, [pc, #12]	@ (8004f08 <stdio_exit_handler+0x10>)
 8004efc:	4803      	ldr	r0, [pc, #12]	@ (8004f0c <stdio_exit_handler+0x14>)
 8004efe:	f000 b869 	b.w	8004fd4 <_fwalk_sglue>
 8004f02:	bf00      	nop
 8004f04:	200000e4 	.word	0x200000e4
 8004f08:	08005c2d 	.word	0x08005c2d
 8004f0c:	200000f4 	.word	0x200000f4

08004f10 <cleanup_stdio>:
 8004f10:	6841      	ldr	r1, [r0, #4]
 8004f12:	4b0c      	ldr	r3, [pc, #48]	@ (8004f44 <cleanup_stdio+0x34>)
 8004f14:	4299      	cmp	r1, r3
 8004f16:	b510      	push	{r4, lr}
 8004f18:	4604      	mov	r4, r0
 8004f1a:	d001      	beq.n	8004f20 <cleanup_stdio+0x10>
 8004f1c:	f000 fe86 	bl	8005c2c <_fflush_r>
 8004f20:	68a1      	ldr	r1, [r4, #8]
 8004f22:	4b09      	ldr	r3, [pc, #36]	@ (8004f48 <cleanup_stdio+0x38>)
 8004f24:	4299      	cmp	r1, r3
 8004f26:	d002      	beq.n	8004f2e <cleanup_stdio+0x1e>
 8004f28:	4620      	mov	r0, r4
 8004f2a:	f000 fe7f 	bl	8005c2c <_fflush_r>
 8004f2e:	68e1      	ldr	r1, [r4, #12]
 8004f30:	4b06      	ldr	r3, [pc, #24]	@ (8004f4c <cleanup_stdio+0x3c>)
 8004f32:	4299      	cmp	r1, r3
 8004f34:	d004      	beq.n	8004f40 <cleanup_stdio+0x30>
 8004f36:	4620      	mov	r0, r4
 8004f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f3c:	f000 be76 	b.w	8005c2c <_fflush_r>
 8004f40:	bd10      	pop	{r4, pc}
 8004f42:	bf00      	nop
 8004f44:	200010b8 	.word	0x200010b8
 8004f48:	20001120 	.word	0x20001120
 8004f4c:	20001188 	.word	0x20001188

08004f50 <global_stdio_init.part.0>:
 8004f50:	b510      	push	{r4, lr}
 8004f52:	4b0b      	ldr	r3, [pc, #44]	@ (8004f80 <global_stdio_init.part.0+0x30>)
 8004f54:	4c0b      	ldr	r4, [pc, #44]	@ (8004f84 <global_stdio_init.part.0+0x34>)
 8004f56:	4a0c      	ldr	r2, [pc, #48]	@ (8004f88 <global_stdio_init.part.0+0x38>)
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2104      	movs	r1, #4
 8004f60:	f7ff ff94 	bl	8004e8c <std>
 8004f64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f68:	2201      	movs	r2, #1
 8004f6a:	2109      	movs	r1, #9
 8004f6c:	f7ff ff8e 	bl	8004e8c <std>
 8004f70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f74:	2202      	movs	r2, #2
 8004f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f7a:	2112      	movs	r1, #18
 8004f7c:	f7ff bf86 	b.w	8004e8c <std>
 8004f80:	200011f0 	.word	0x200011f0
 8004f84:	200010b8 	.word	0x200010b8
 8004f88:	08004ef9 	.word	0x08004ef9

08004f8c <__sfp_lock_acquire>:
 8004f8c:	4801      	ldr	r0, [pc, #4]	@ (8004f94 <__sfp_lock_acquire+0x8>)
 8004f8e:	f000 ba00 	b.w	8005392 <__retarget_lock_acquire_recursive>
 8004f92:	bf00      	nop
 8004f94:	200011f9 	.word	0x200011f9

08004f98 <__sfp_lock_release>:
 8004f98:	4801      	ldr	r0, [pc, #4]	@ (8004fa0 <__sfp_lock_release+0x8>)
 8004f9a:	f000 b9fb 	b.w	8005394 <__retarget_lock_release_recursive>
 8004f9e:	bf00      	nop
 8004fa0:	200011f9 	.word	0x200011f9

08004fa4 <__sinit>:
 8004fa4:	b510      	push	{r4, lr}
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	f7ff fff0 	bl	8004f8c <__sfp_lock_acquire>
 8004fac:	6a23      	ldr	r3, [r4, #32]
 8004fae:	b11b      	cbz	r3, 8004fb8 <__sinit+0x14>
 8004fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fb4:	f7ff bff0 	b.w	8004f98 <__sfp_lock_release>
 8004fb8:	4b04      	ldr	r3, [pc, #16]	@ (8004fcc <__sinit+0x28>)
 8004fba:	6223      	str	r3, [r4, #32]
 8004fbc:	4b04      	ldr	r3, [pc, #16]	@ (8004fd0 <__sinit+0x2c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1f5      	bne.n	8004fb0 <__sinit+0xc>
 8004fc4:	f7ff ffc4 	bl	8004f50 <global_stdio_init.part.0>
 8004fc8:	e7f2      	b.n	8004fb0 <__sinit+0xc>
 8004fca:	bf00      	nop
 8004fcc:	08004f11 	.word	0x08004f11
 8004fd0:	200011f0 	.word	0x200011f0

08004fd4 <_fwalk_sglue>:
 8004fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fd8:	4607      	mov	r7, r0
 8004fda:	4688      	mov	r8, r1
 8004fdc:	4614      	mov	r4, r2
 8004fde:	2600      	movs	r6, #0
 8004fe0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fe4:	f1b9 0901 	subs.w	r9, r9, #1
 8004fe8:	d505      	bpl.n	8004ff6 <_fwalk_sglue+0x22>
 8004fea:	6824      	ldr	r4, [r4, #0]
 8004fec:	2c00      	cmp	r4, #0
 8004fee:	d1f7      	bne.n	8004fe0 <_fwalk_sglue+0xc>
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ff6:	89ab      	ldrh	r3, [r5, #12]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d907      	bls.n	800500c <_fwalk_sglue+0x38>
 8004ffc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005000:	3301      	adds	r3, #1
 8005002:	d003      	beq.n	800500c <_fwalk_sglue+0x38>
 8005004:	4629      	mov	r1, r5
 8005006:	4638      	mov	r0, r7
 8005008:	47c0      	blx	r8
 800500a:	4306      	orrs	r6, r0
 800500c:	3568      	adds	r5, #104	@ 0x68
 800500e:	e7e9      	b.n	8004fe4 <_fwalk_sglue+0x10>

08005010 <iprintf>:
 8005010:	b40f      	push	{r0, r1, r2, r3}
 8005012:	b507      	push	{r0, r1, r2, lr}
 8005014:	4906      	ldr	r1, [pc, #24]	@ (8005030 <iprintf+0x20>)
 8005016:	ab04      	add	r3, sp, #16
 8005018:	6808      	ldr	r0, [r1, #0]
 800501a:	f853 2b04 	ldr.w	r2, [r3], #4
 800501e:	6881      	ldr	r1, [r0, #8]
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	f000 fadb 	bl	80055dc <_vfiprintf_r>
 8005026:	b003      	add	sp, #12
 8005028:	f85d eb04 	ldr.w	lr, [sp], #4
 800502c:	b004      	add	sp, #16
 800502e:	4770      	bx	lr
 8005030:	200000f0 	.word	0x200000f0

08005034 <_puts_r>:
 8005034:	6a03      	ldr	r3, [r0, #32]
 8005036:	b570      	push	{r4, r5, r6, lr}
 8005038:	6884      	ldr	r4, [r0, #8]
 800503a:	4605      	mov	r5, r0
 800503c:	460e      	mov	r6, r1
 800503e:	b90b      	cbnz	r3, 8005044 <_puts_r+0x10>
 8005040:	f7ff ffb0 	bl	8004fa4 <__sinit>
 8005044:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005046:	07db      	lsls	r3, r3, #31
 8005048:	d405      	bmi.n	8005056 <_puts_r+0x22>
 800504a:	89a3      	ldrh	r3, [r4, #12]
 800504c:	0598      	lsls	r0, r3, #22
 800504e:	d402      	bmi.n	8005056 <_puts_r+0x22>
 8005050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005052:	f000 f99e 	bl	8005392 <__retarget_lock_acquire_recursive>
 8005056:	89a3      	ldrh	r3, [r4, #12]
 8005058:	0719      	lsls	r1, r3, #28
 800505a:	d502      	bpl.n	8005062 <_puts_r+0x2e>
 800505c:	6923      	ldr	r3, [r4, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d135      	bne.n	80050ce <_puts_r+0x9a>
 8005062:	4621      	mov	r1, r4
 8005064:	4628      	mov	r0, r5
 8005066:	f000 f8c5 	bl	80051f4 <__swsetup_r>
 800506a:	b380      	cbz	r0, 80050ce <_puts_r+0x9a>
 800506c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005070:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005072:	07da      	lsls	r2, r3, #31
 8005074:	d405      	bmi.n	8005082 <_puts_r+0x4e>
 8005076:	89a3      	ldrh	r3, [r4, #12]
 8005078:	059b      	lsls	r3, r3, #22
 800507a:	d402      	bmi.n	8005082 <_puts_r+0x4e>
 800507c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800507e:	f000 f989 	bl	8005394 <__retarget_lock_release_recursive>
 8005082:	4628      	mov	r0, r5
 8005084:	bd70      	pop	{r4, r5, r6, pc}
 8005086:	2b00      	cmp	r3, #0
 8005088:	da04      	bge.n	8005094 <_puts_r+0x60>
 800508a:	69a2      	ldr	r2, [r4, #24]
 800508c:	429a      	cmp	r2, r3
 800508e:	dc17      	bgt.n	80050c0 <_puts_r+0x8c>
 8005090:	290a      	cmp	r1, #10
 8005092:	d015      	beq.n	80050c0 <_puts_r+0x8c>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	6022      	str	r2, [r4, #0]
 800509a:	7019      	strb	r1, [r3, #0]
 800509c:	68a3      	ldr	r3, [r4, #8]
 800509e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80050a2:	3b01      	subs	r3, #1
 80050a4:	60a3      	str	r3, [r4, #8]
 80050a6:	2900      	cmp	r1, #0
 80050a8:	d1ed      	bne.n	8005086 <_puts_r+0x52>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	da11      	bge.n	80050d2 <_puts_r+0x9e>
 80050ae:	4622      	mov	r2, r4
 80050b0:	210a      	movs	r1, #10
 80050b2:	4628      	mov	r0, r5
 80050b4:	f000 f85f 	bl	8005176 <__swbuf_r>
 80050b8:	3001      	adds	r0, #1
 80050ba:	d0d7      	beq.n	800506c <_puts_r+0x38>
 80050bc:	250a      	movs	r5, #10
 80050be:	e7d7      	b.n	8005070 <_puts_r+0x3c>
 80050c0:	4622      	mov	r2, r4
 80050c2:	4628      	mov	r0, r5
 80050c4:	f000 f857 	bl	8005176 <__swbuf_r>
 80050c8:	3001      	adds	r0, #1
 80050ca:	d1e7      	bne.n	800509c <_puts_r+0x68>
 80050cc:	e7ce      	b.n	800506c <_puts_r+0x38>
 80050ce:	3e01      	subs	r6, #1
 80050d0:	e7e4      	b.n	800509c <_puts_r+0x68>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	6022      	str	r2, [r4, #0]
 80050d8:	220a      	movs	r2, #10
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	e7ee      	b.n	80050bc <_puts_r+0x88>
	...

080050e0 <puts>:
 80050e0:	4b02      	ldr	r3, [pc, #8]	@ (80050ec <puts+0xc>)
 80050e2:	4601      	mov	r1, r0
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	f7ff bfa5 	b.w	8005034 <_puts_r>
 80050ea:	bf00      	nop
 80050ec:	200000f0 	.word	0x200000f0

080050f0 <__sread>:
 80050f0:	b510      	push	{r4, lr}
 80050f2:	460c      	mov	r4, r1
 80050f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f8:	f000 f8fc 	bl	80052f4 <_read_r>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	bfab      	itete	ge
 8005100:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005102:	89a3      	ldrhlt	r3, [r4, #12]
 8005104:	181b      	addge	r3, r3, r0
 8005106:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800510a:	bfac      	ite	ge
 800510c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800510e:	81a3      	strhlt	r3, [r4, #12]
 8005110:	bd10      	pop	{r4, pc}

08005112 <__swrite>:
 8005112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005116:	461f      	mov	r7, r3
 8005118:	898b      	ldrh	r3, [r1, #12]
 800511a:	05db      	lsls	r3, r3, #23
 800511c:	4605      	mov	r5, r0
 800511e:	460c      	mov	r4, r1
 8005120:	4616      	mov	r6, r2
 8005122:	d505      	bpl.n	8005130 <__swrite+0x1e>
 8005124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005128:	2302      	movs	r3, #2
 800512a:	2200      	movs	r2, #0
 800512c:	f000 f8d0 	bl	80052d0 <_lseek_r>
 8005130:	89a3      	ldrh	r3, [r4, #12]
 8005132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005136:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800513a:	81a3      	strh	r3, [r4, #12]
 800513c:	4632      	mov	r2, r6
 800513e:	463b      	mov	r3, r7
 8005140:	4628      	mov	r0, r5
 8005142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005146:	f000 b8e7 	b.w	8005318 <_write_r>

0800514a <__sseek>:
 800514a:	b510      	push	{r4, lr}
 800514c:	460c      	mov	r4, r1
 800514e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005152:	f000 f8bd 	bl	80052d0 <_lseek_r>
 8005156:	1c43      	adds	r3, r0, #1
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	bf15      	itete	ne
 800515c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800515e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005162:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005166:	81a3      	strheq	r3, [r4, #12]
 8005168:	bf18      	it	ne
 800516a:	81a3      	strhne	r3, [r4, #12]
 800516c:	bd10      	pop	{r4, pc}

0800516e <__sclose>:
 800516e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005172:	f000 b89d 	b.w	80052b0 <_close_r>

08005176 <__swbuf_r>:
 8005176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005178:	460e      	mov	r6, r1
 800517a:	4614      	mov	r4, r2
 800517c:	4605      	mov	r5, r0
 800517e:	b118      	cbz	r0, 8005188 <__swbuf_r+0x12>
 8005180:	6a03      	ldr	r3, [r0, #32]
 8005182:	b90b      	cbnz	r3, 8005188 <__swbuf_r+0x12>
 8005184:	f7ff ff0e 	bl	8004fa4 <__sinit>
 8005188:	69a3      	ldr	r3, [r4, #24]
 800518a:	60a3      	str	r3, [r4, #8]
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	071a      	lsls	r2, r3, #28
 8005190:	d501      	bpl.n	8005196 <__swbuf_r+0x20>
 8005192:	6923      	ldr	r3, [r4, #16]
 8005194:	b943      	cbnz	r3, 80051a8 <__swbuf_r+0x32>
 8005196:	4621      	mov	r1, r4
 8005198:	4628      	mov	r0, r5
 800519a:	f000 f82b 	bl	80051f4 <__swsetup_r>
 800519e:	b118      	cbz	r0, 80051a8 <__swbuf_r+0x32>
 80051a0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80051a4:	4638      	mov	r0, r7
 80051a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	6922      	ldr	r2, [r4, #16]
 80051ac:	1a98      	subs	r0, r3, r2
 80051ae:	6963      	ldr	r3, [r4, #20]
 80051b0:	b2f6      	uxtb	r6, r6
 80051b2:	4283      	cmp	r3, r0
 80051b4:	4637      	mov	r7, r6
 80051b6:	dc05      	bgt.n	80051c4 <__swbuf_r+0x4e>
 80051b8:	4621      	mov	r1, r4
 80051ba:	4628      	mov	r0, r5
 80051bc:	f000 fd36 	bl	8005c2c <_fflush_r>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d1ed      	bne.n	80051a0 <__swbuf_r+0x2a>
 80051c4:	68a3      	ldr	r3, [r4, #8]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	60a3      	str	r3, [r4, #8]
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	6022      	str	r2, [r4, #0]
 80051d0:	701e      	strb	r6, [r3, #0]
 80051d2:	6962      	ldr	r2, [r4, #20]
 80051d4:	1c43      	adds	r3, r0, #1
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d004      	beq.n	80051e4 <__swbuf_r+0x6e>
 80051da:	89a3      	ldrh	r3, [r4, #12]
 80051dc:	07db      	lsls	r3, r3, #31
 80051de:	d5e1      	bpl.n	80051a4 <__swbuf_r+0x2e>
 80051e0:	2e0a      	cmp	r6, #10
 80051e2:	d1df      	bne.n	80051a4 <__swbuf_r+0x2e>
 80051e4:	4621      	mov	r1, r4
 80051e6:	4628      	mov	r0, r5
 80051e8:	f000 fd20 	bl	8005c2c <_fflush_r>
 80051ec:	2800      	cmp	r0, #0
 80051ee:	d0d9      	beq.n	80051a4 <__swbuf_r+0x2e>
 80051f0:	e7d6      	b.n	80051a0 <__swbuf_r+0x2a>
	...

080051f4 <__swsetup_r>:
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	4b29      	ldr	r3, [pc, #164]	@ (800529c <__swsetup_r+0xa8>)
 80051f8:	4605      	mov	r5, r0
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	460c      	mov	r4, r1
 80051fe:	b118      	cbz	r0, 8005208 <__swsetup_r+0x14>
 8005200:	6a03      	ldr	r3, [r0, #32]
 8005202:	b90b      	cbnz	r3, 8005208 <__swsetup_r+0x14>
 8005204:	f7ff fece 	bl	8004fa4 <__sinit>
 8005208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800520c:	0719      	lsls	r1, r3, #28
 800520e:	d422      	bmi.n	8005256 <__swsetup_r+0x62>
 8005210:	06da      	lsls	r2, r3, #27
 8005212:	d407      	bmi.n	8005224 <__swsetup_r+0x30>
 8005214:	2209      	movs	r2, #9
 8005216:	602a      	str	r2, [r5, #0]
 8005218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800521c:	81a3      	strh	r3, [r4, #12]
 800521e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005222:	e033      	b.n	800528c <__swsetup_r+0x98>
 8005224:	0758      	lsls	r0, r3, #29
 8005226:	d512      	bpl.n	800524e <__swsetup_r+0x5a>
 8005228:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800522a:	b141      	cbz	r1, 800523e <__swsetup_r+0x4a>
 800522c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005230:	4299      	cmp	r1, r3
 8005232:	d002      	beq.n	800523a <__swsetup_r+0x46>
 8005234:	4628      	mov	r0, r5
 8005236:	f000 f8af 	bl	8005398 <_free_r>
 800523a:	2300      	movs	r3, #0
 800523c:	6363      	str	r3, [r4, #52]	@ 0x34
 800523e:	89a3      	ldrh	r3, [r4, #12]
 8005240:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005244:	81a3      	strh	r3, [r4, #12]
 8005246:	2300      	movs	r3, #0
 8005248:	6063      	str	r3, [r4, #4]
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	f043 0308 	orr.w	r3, r3, #8
 8005254:	81a3      	strh	r3, [r4, #12]
 8005256:	6923      	ldr	r3, [r4, #16]
 8005258:	b94b      	cbnz	r3, 800526e <__swsetup_r+0x7a>
 800525a:	89a3      	ldrh	r3, [r4, #12]
 800525c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005264:	d003      	beq.n	800526e <__swsetup_r+0x7a>
 8005266:	4621      	mov	r1, r4
 8005268:	4628      	mov	r0, r5
 800526a:	f000 fd2d 	bl	8005cc8 <__smakebuf_r>
 800526e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005272:	f013 0201 	ands.w	r2, r3, #1
 8005276:	d00a      	beq.n	800528e <__swsetup_r+0x9a>
 8005278:	2200      	movs	r2, #0
 800527a:	60a2      	str	r2, [r4, #8]
 800527c:	6962      	ldr	r2, [r4, #20]
 800527e:	4252      	negs	r2, r2
 8005280:	61a2      	str	r2, [r4, #24]
 8005282:	6922      	ldr	r2, [r4, #16]
 8005284:	b942      	cbnz	r2, 8005298 <__swsetup_r+0xa4>
 8005286:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800528a:	d1c5      	bne.n	8005218 <__swsetup_r+0x24>
 800528c:	bd38      	pop	{r3, r4, r5, pc}
 800528e:	0799      	lsls	r1, r3, #30
 8005290:	bf58      	it	pl
 8005292:	6962      	ldrpl	r2, [r4, #20]
 8005294:	60a2      	str	r2, [r4, #8]
 8005296:	e7f4      	b.n	8005282 <__swsetup_r+0x8e>
 8005298:	2000      	movs	r0, #0
 800529a:	e7f7      	b.n	800528c <__swsetup_r+0x98>
 800529c:	200000f0 	.word	0x200000f0

080052a0 <memset>:
 80052a0:	4402      	add	r2, r0
 80052a2:	4603      	mov	r3, r0
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d100      	bne.n	80052aa <memset+0xa>
 80052a8:	4770      	bx	lr
 80052aa:	f803 1b01 	strb.w	r1, [r3], #1
 80052ae:	e7f9      	b.n	80052a4 <memset+0x4>

080052b0 <_close_r>:
 80052b0:	b538      	push	{r3, r4, r5, lr}
 80052b2:	4d06      	ldr	r5, [pc, #24]	@ (80052cc <_close_r+0x1c>)
 80052b4:	2300      	movs	r3, #0
 80052b6:	4604      	mov	r4, r0
 80052b8:	4608      	mov	r0, r1
 80052ba:	602b      	str	r3, [r5, #0]
 80052bc:	f7fb fc4a 	bl	8000b54 <_close>
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	d102      	bne.n	80052ca <_close_r+0x1a>
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	b103      	cbz	r3, 80052ca <_close_r+0x1a>
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	bd38      	pop	{r3, r4, r5, pc}
 80052cc:	200011f4 	.word	0x200011f4

080052d0 <_lseek_r>:
 80052d0:	b538      	push	{r3, r4, r5, lr}
 80052d2:	4d07      	ldr	r5, [pc, #28]	@ (80052f0 <_lseek_r+0x20>)
 80052d4:	4604      	mov	r4, r0
 80052d6:	4608      	mov	r0, r1
 80052d8:	4611      	mov	r1, r2
 80052da:	2200      	movs	r2, #0
 80052dc:	602a      	str	r2, [r5, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	f7fb fc42 	bl	8000b68 <_lseek>
 80052e4:	1c43      	adds	r3, r0, #1
 80052e6:	d102      	bne.n	80052ee <_lseek_r+0x1e>
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	b103      	cbz	r3, 80052ee <_lseek_r+0x1e>
 80052ec:	6023      	str	r3, [r4, #0]
 80052ee:	bd38      	pop	{r3, r4, r5, pc}
 80052f0:	200011f4 	.word	0x200011f4

080052f4 <_read_r>:
 80052f4:	b538      	push	{r3, r4, r5, lr}
 80052f6:	4d07      	ldr	r5, [pc, #28]	@ (8005314 <_read_r+0x20>)
 80052f8:	4604      	mov	r4, r0
 80052fa:	4608      	mov	r0, r1
 80052fc:	4611      	mov	r1, r2
 80052fe:	2200      	movs	r2, #0
 8005300:	602a      	str	r2, [r5, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	f7fb fc16 	bl	8000b34 <_read>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d102      	bne.n	8005312 <_read_r+0x1e>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	b103      	cbz	r3, 8005312 <_read_r+0x1e>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	bd38      	pop	{r3, r4, r5, pc}
 8005314:	200011f4 	.word	0x200011f4

08005318 <_write_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4d07      	ldr	r5, [pc, #28]	@ (8005338 <_write_r+0x20>)
 800531c:	4604      	mov	r4, r0
 800531e:	4608      	mov	r0, r1
 8005320:	4611      	mov	r1, r2
 8005322:	2200      	movs	r2, #0
 8005324:	602a      	str	r2, [r5, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	f7fb fc4e 	bl	8000bc8 <_write>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d102      	bne.n	8005336 <_write_r+0x1e>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	b103      	cbz	r3, 8005336 <_write_r+0x1e>
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	200011f4 	.word	0x200011f4

0800533c <__errno>:
 800533c:	4b01      	ldr	r3, [pc, #4]	@ (8005344 <__errno+0x8>)
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	200000f0 	.word	0x200000f0

08005348 <__libc_init_array>:
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	4d0d      	ldr	r5, [pc, #52]	@ (8005380 <__libc_init_array+0x38>)
 800534c:	4c0d      	ldr	r4, [pc, #52]	@ (8005384 <__libc_init_array+0x3c>)
 800534e:	1b64      	subs	r4, r4, r5
 8005350:	10a4      	asrs	r4, r4, #2
 8005352:	2600      	movs	r6, #0
 8005354:	42a6      	cmp	r6, r4
 8005356:	d109      	bne.n	800536c <__libc_init_array+0x24>
 8005358:	4d0b      	ldr	r5, [pc, #44]	@ (8005388 <__libc_init_array+0x40>)
 800535a:	4c0c      	ldr	r4, [pc, #48]	@ (800538c <__libc_init_array+0x44>)
 800535c:	f000 fd22 	bl	8005da4 <_init>
 8005360:	1b64      	subs	r4, r4, r5
 8005362:	10a4      	asrs	r4, r4, #2
 8005364:	2600      	movs	r6, #0
 8005366:	42a6      	cmp	r6, r4
 8005368:	d105      	bne.n	8005376 <__libc_init_array+0x2e>
 800536a:	bd70      	pop	{r4, r5, r6, pc}
 800536c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005370:	4798      	blx	r3
 8005372:	3601      	adds	r6, #1
 8005374:	e7ee      	b.n	8005354 <__libc_init_array+0xc>
 8005376:	f855 3b04 	ldr.w	r3, [r5], #4
 800537a:	4798      	blx	r3
 800537c:	3601      	adds	r6, #1
 800537e:	e7f2      	b.n	8005366 <__libc_init_array+0x1e>
 8005380:	08006240 	.word	0x08006240
 8005384:	08006240 	.word	0x08006240
 8005388:	08006240 	.word	0x08006240
 800538c:	08006244 	.word	0x08006244

08005390 <__retarget_lock_init_recursive>:
 8005390:	4770      	bx	lr

08005392 <__retarget_lock_acquire_recursive>:
 8005392:	4770      	bx	lr

08005394 <__retarget_lock_release_recursive>:
 8005394:	4770      	bx	lr
	...

08005398 <_free_r>:
 8005398:	b538      	push	{r3, r4, r5, lr}
 800539a:	4605      	mov	r5, r0
 800539c:	2900      	cmp	r1, #0
 800539e:	d041      	beq.n	8005424 <_free_r+0x8c>
 80053a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053a4:	1f0c      	subs	r4, r1, #4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	bfb8      	it	lt
 80053aa:	18e4      	addlt	r4, r4, r3
 80053ac:	f000 f8e0 	bl	8005570 <__malloc_lock>
 80053b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005428 <_free_r+0x90>)
 80053b2:	6813      	ldr	r3, [r2, #0]
 80053b4:	b933      	cbnz	r3, 80053c4 <_free_r+0x2c>
 80053b6:	6063      	str	r3, [r4, #4]
 80053b8:	6014      	str	r4, [r2, #0]
 80053ba:	4628      	mov	r0, r5
 80053bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053c0:	f000 b8dc 	b.w	800557c <__malloc_unlock>
 80053c4:	42a3      	cmp	r3, r4
 80053c6:	d908      	bls.n	80053da <_free_r+0x42>
 80053c8:	6820      	ldr	r0, [r4, #0]
 80053ca:	1821      	adds	r1, r4, r0
 80053cc:	428b      	cmp	r3, r1
 80053ce:	bf01      	itttt	eq
 80053d0:	6819      	ldreq	r1, [r3, #0]
 80053d2:	685b      	ldreq	r3, [r3, #4]
 80053d4:	1809      	addeq	r1, r1, r0
 80053d6:	6021      	streq	r1, [r4, #0]
 80053d8:	e7ed      	b.n	80053b6 <_free_r+0x1e>
 80053da:	461a      	mov	r2, r3
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	b10b      	cbz	r3, 80053e4 <_free_r+0x4c>
 80053e0:	42a3      	cmp	r3, r4
 80053e2:	d9fa      	bls.n	80053da <_free_r+0x42>
 80053e4:	6811      	ldr	r1, [r2, #0]
 80053e6:	1850      	adds	r0, r2, r1
 80053e8:	42a0      	cmp	r0, r4
 80053ea:	d10b      	bne.n	8005404 <_free_r+0x6c>
 80053ec:	6820      	ldr	r0, [r4, #0]
 80053ee:	4401      	add	r1, r0
 80053f0:	1850      	adds	r0, r2, r1
 80053f2:	4283      	cmp	r3, r0
 80053f4:	6011      	str	r1, [r2, #0]
 80053f6:	d1e0      	bne.n	80053ba <_free_r+0x22>
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	6053      	str	r3, [r2, #4]
 80053fe:	4408      	add	r0, r1
 8005400:	6010      	str	r0, [r2, #0]
 8005402:	e7da      	b.n	80053ba <_free_r+0x22>
 8005404:	d902      	bls.n	800540c <_free_r+0x74>
 8005406:	230c      	movs	r3, #12
 8005408:	602b      	str	r3, [r5, #0]
 800540a:	e7d6      	b.n	80053ba <_free_r+0x22>
 800540c:	6820      	ldr	r0, [r4, #0]
 800540e:	1821      	adds	r1, r4, r0
 8005410:	428b      	cmp	r3, r1
 8005412:	bf04      	itt	eq
 8005414:	6819      	ldreq	r1, [r3, #0]
 8005416:	685b      	ldreq	r3, [r3, #4]
 8005418:	6063      	str	r3, [r4, #4]
 800541a:	bf04      	itt	eq
 800541c:	1809      	addeq	r1, r1, r0
 800541e:	6021      	streq	r1, [r4, #0]
 8005420:	6054      	str	r4, [r2, #4]
 8005422:	e7ca      	b.n	80053ba <_free_r+0x22>
 8005424:	bd38      	pop	{r3, r4, r5, pc}
 8005426:	bf00      	nop
 8005428:	20001200 	.word	0x20001200

0800542c <sbrk_aligned>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	4e0f      	ldr	r6, [pc, #60]	@ (800546c <sbrk_aligned+0x40>)
 8005430:	460c      	mov	r4, r1
 8005432:	6831      	ldr	r1, [r6, #0]
 8005434:	4605      	mov	r5, r0
 8005436:	b911      	cbnz	r1, 800543e <sbrk_aligned+0x12>
 8005438:	f000 fca4 	bl	8005d84 <_sbrk_r>
 800543c:	6030      	str	r0, [r6, #0]
 800543e:	4621      	mov	r1, r4
 8005440:	4628      	mov	r0, r5
 8005442:	f000 fc9f 	bl	8005d84 <_sbrk_r>
 8005446:	1c43      	adds	r3, r0, #1
 8005448:	d103      	bne.n	8005452 <sbrk_aligned+0x26>
 800544a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800544e:	4620      	mov	r0, r4
 8005450:	bd70      	pop	{r4, r5, r6, pc}
 8005452:	1cc4      	adds	r4, r0, #3
 8005454:	f024 0403 	bic.w	r4, r4, #3
 8005458:	42a0      	cmp	r0, r4
 800545a:	d0f8      	beq.n	800544e <sbrk_aligned+0x22>
 800545c:	1a21      	subs	r1, r4, r0
 800545e:	4628      	mov	r0, r5
 8005460:	f000 fc90 	bl	8005d84 <_sbrk_r>
 8005464:	3001      	adds	r0, #1
 8005466:	d1f2      	bne.n	800544e <sbrk_aligned+0x22>
 8005468:	e7ef      	b.n	800544a <sbrk_aligned+0x1e>
 800546a:	bf00      	nop
 800546c:	200011fc 	.word	0x200011fc

08005470 <_malloc_r>:
 8005470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005474:	1ccd      	adds	r5, r1, #3
 8005476:	f025 0503 	bic.w	r5, r5, #3
 800547a:	3508      	adds	r5, #8
 800547c:	2d0c      	cmp	r5, #12
 800547e:	bf38      	it	cc
 8005480:	250c      	movcc	r5, #12
 8005482:	2d00      	cmp	r5, #0
 8005484:	4606      	mov	r6, r0
 8005486:	db01      	blt.n	800548c <_malloc_r+0x1c>
 8005488:	42a9      	cmp	r1, r5
 800548a:	d904      	bls.n	8005496 <_malloc_r+0x26>
 800548c:	230c      	movs	r3, #12
 800548e:	6033      	str	r3, [r6, #0]
 8005490:	2000      	movs	r0, #0
 8005492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005496:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800556c <_malloc_r+0xfc>
 800549a:	f000 f869 	bl	8005570 <__malloc_lock>
 800549e:	f8d8 3000 	ldr.w	r3, [r8]
 80054a2:	461c      	mov	r4, r3
 80054a4:	bb44      	cbnz	r4, 80054f8 <_malloc_r+0x88>
 80054a6:	4629      	mov	r1, r5
 80054a8:	4630      	mov	r0, r6
 80054aa:	f7ff ffbf 	bl	800542c <sbrk_aligned>
 80054ae:	1c43      	adds	r3, r0, #1
 80054b0:	4604      	mov	r4, r0
 80054b2:	d158      	bne.n	8005566 <_malloc_r+0xf6>
 80054b4:	f8d8 4000 	ldr.w	r4, [r8]
 80054b8:	4627      	mov	r7, r4
 80054ba:	2f00      	cmp	r7, #0
 80054bc:	d143      	bne.n	8005546 <_malloc_r+0xd6>
 80054be:	2c00      	cmp	r4, #0
 80054c0:	d04b      	beq.n	800555a <_malloc_r+0xea>
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	4639      	mov	r1, r7
 80054c6:	4630      	mov	r0, r6
 80054c8:	eb04 0903 	add.w	r9, r4, r3
 80054cc:	f000 fc5a 	bl	8005d84 <_sbrk_r>
 80054d0:	4581      	cmp	r9, r0
 80054d2:	d142      	bne.n	800555a <_malloc_r+0xea>
 80054d4:	6821      	ldr	r1, [r4, #0]
 80054d6:	1a6d      	subs	r5, r5, r1
 80054d8:	4629      	mov	r1, r5
 80054da:	4630      	mov	r0, r6
 80054dc:	f7ff ffa6 	bl	800542c <sbrk_aligned>
 80054e0:	3001      	adds	r0, #1
 80054e2:	d03a      	beq.n	800555a <_malloc_r+0xea>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	442b      	add	r3, r5
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	f8d8 3000 	ldr.w	r3, [r8]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	bb62      	cbnz	r2, 800554c <_malloc_r+0xdc>
 80054f2:	f8c8 7000 	str.w	r7, [r8]
 80054f6:	e00f      	b.n	8005518 <_malloc_r+0xa8>
 80054f8:	6822      	ldr	r2, [r4, #0]
 80054fa:	1b52      	subs	r2, r2, r5
 80054fc:	d420      	bmi.n	8005540 <_malloc_r+0xd0>
 80054fe:	2a0b      	cmp	r2, #11
 8005500:	d917      	bls.n	8005532 <_malloc_r+0xc2>
 8005502:	1961      	adds	r1, r4, r5
 8005504:	42a3      	cmp	r3, r4
 8005506:	6025      	str	r5, [r4, #0]
 8005508:	bf18      	it	ne
 800550a:	6059      	strne	r1, [r3, #4]
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	bf08      	it	eq
 8005510:	f8c8 1000 	streq.w	r1, [r8]
 8005514:	5162      	str	r2, [r4, r5]
 8005516:	604b      	str	r3, [r1, #4]
 8005518:	4630      	mov	r0, r6
 800551a:	f000 f82f 	bl	800557c <__malloc_unlock>
 800551e:	f104 000b 	add.w	r0, r4, #11
 8005522:	1d23      	adds	r3, r4, #4
 8005524:	f020 0007 	bic.w	r0, r0, #7
 8005528:	1ac2      	subs	r2, r0, r3
 800552a:	bf1c      	itt	ne
 800552c:	1a1b      	subne	r3, r3, r0
 800552e:	50a3      	strne	r3, [r4, r2]
 8005530:	e7af      	b.n	8005492 <_malloc_r+0x22>
 8005532:	6862      	ldr	r2, [r4, #4]
 8005534:	42a3      	cmp	r3, r4
 8005536:	bf0c      	ite	eq
 8005538:	f8c8 2000 	streq.w	r2, [r8]
 800553c:	605a      	strne	r2, [r3, #4]
 800553e:	e7eb      	b.n	8005518 <_malloc_r+0xa8>
 8005540:	4623      	mov	r3, r4
 8005542:	6864      	ldr	r4, [r4, #4]
 8005544:	e7ae      	b.n	80054a4 <_malloc_r+0x34>
 8005546:	463c      	mov	r4, r7
 8005548:	687f      	ldr	r7, [r7, #4]
 800554a:	e7b6      	b.n	80054ba <_malloc_r+0x4a>
 800554c:	461a      	mov	r2, r3
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	42a3      	cmp	r3, r4
 8005552:	d1fb      	bne.n	800554c <_malloc_r+0xdc>
 8005554:	2300      	movs	r3, #0
 8005556:	6053      	str	r3, [r2, #4]
 8005558:	e7de      	b.n	8005518 <_malloc_r+0xa8>
 800555a:	230c      	movs	r3, #12
 800555c:	6033      	str	r3, [r6, #0]
 800555e:	4630      	mov	r0, r6
 8005560:	f000 f80c 	bl	800557c <__malloc_unlock>
 8005564:	e794      	b.n	8005490 <_malloc_r+0x20>
 8005566:	6005      	str	r5, [r0, #0]
 8005568:	e7d6      	b.n	8005518 <_malloc_r+0xa8>
 800556a:	bf00      	nop
 800556c:	20001200 	.word	0x20001200

08005570 <__malloc_lock>:
 8005570:	4801      	ldr	r0, [pc, #4]	@ (8005578 <__malloc_lock+0x8>)
 8005572:	f7ff bf0e 	b.w	8005392 <__retarget_lock_acquire_recursive>
 8005576:	bf00      	nop
 8005578:	200011f8 	.word	0x200011f8

0800557c <__malloc_unlock>:
 800557c:	4801      	ldr	r0, [pc, #4]	@ (8005584 <__malloc_unlock+0x8>)
 800557e:	f7ff bf09 	b.w	8005394 <__retarget_lock_release_recursive>
 8005582:	bf00      	nop
 8005584:	200011f8 	.word	0x200011f8

08005588 <__sfputc_r>:
 8005588:	6893      	ldr	r3, [r2, #8]
 800558a:	3b01      	subs	r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	b410      	push	{r4}
 8005590:	6093      	str	r3, [r2, #8]
 8005592:	da08      	bge.n	80055a6 <__sfputc_r+0x1e>
 8005594:	6994      	ldr	r4, [r2, #24]
 8005596:	42a3      	cmp	r3, r4
 8005598:	db01      	blt.n	800559e <__sfputc_r+0x16>
 800559a:	290a      	cmp	r1, #10
 800559c:	d103      	bne.n	80055a6 <__sfputc_r+0x1e>
 800559e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055a2:	f7ff bde8 	b.w	8005176 <__swbuf_r>
 80055a6:	6813      	ldr	r3, [r2, #0]
 80055a8:	1c58      	adds	r0, r3, #1
 80055aa:	6010      	str	r0, [r2, #0]
 80055ac:	7019      	strb	r1, [r3, #0]
 80055ae:	4608      	mov	r0, r1
 80055b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <__sfputs_r>:
 80055b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b8:	4606      	mov	r6, r0
 80055ba:	460f      	mov	r7, r1
 80055bc:	4614      	mov	r4, r2
 80055be:	18d5      	adds	r5, r2, r3
 80055c0:	42ac      	cmp	r4, r5
 80055c2:	d101      	bne.n	80055c8 <__sfputs_r+0x12>
 80055c4:	2000      	movs	r0, #0
 80055c6:	e007      	b.n	80055d8 <__sfputs_r+0x22>
 80055c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055cc:	463a      	mov	r2, r7
 80055ce:	4630      	mov	r0, r6
 80055d0:	f7ff ffda 	bl	8005588 <__sfputc_r>
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d1f3      	bne.n	80055c0 <__sfputs_r+0xa>
 80055d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055dc <_vfiprintf_r>:
 80055dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e0:	460d      	mov	r5, r1
 80055e2:	b09d      	sub	sp, #116	@ 0x74
 80055e4:	4614      	mov	r4, r2
 80055e6:	4698      	mov	r8, r3
 80055e8:	4606      	mov	r6, r0
 80055ea:	b118      	cbz	r0, 80055f4 <_vfiprintf_r+0x18>
 80055ec:	6a03      	ldr	r3, [r0, #32]
 80055ee:	b90b      	cbnz	r3, 80055f4 <_vfiprintf_r+0x18>
 80055f0:	f7ff fcd8 	bl	8004fa4 <__sinit>
 80055f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80055f6:	07d9      	lsls	r1, r3, #31
 80055f8:	d405      	bmi.n	8005606 <_vfiprintf_r+0x2a>
 80055fa:	89ab      	ldrh	r3, [r5, #12]
 80055fc:	059a      	lsls	r2, r3, #22
 80055fe:	d402      	bmi.n	8005606 <_vfiprintf_r+0x2a>
 8005600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005602:	f7ff fec6 	bl	8005392 <__retarget_lock_acquire_recursive>
 8005606:	89ab      	ldrh	r3, [r5, #12]
 8005608:	071b      	lsls	r3, r3, #28
 800560a:	d501      	bpl.n	8005610 <_vfiprintf_r+0x34>
 800560c:	692b      	ldr	r3, [r5, #16]
 800560e:	b99b      	cbnz	r3, 8005638 <_vfiprintf_r+0x5c>
 8005610:	4629      	mov	r1, r5
 8005612:	4630      	mov	r0, r6
 8005614:	f7ff fdee 	bl	80051f4 <__swsetup_r>
 8005618:	b170      	cbz	r0, 8005638 <_vfiprintf_r+0x5c>
 800561a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800561c:	07dc      	lsls	r4, r3, #31
 800561e:	d504      	bpl.n	800562a <_vfiprintf_r+0x4e>
 8005620:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005624:	b01d      	add	sp, #116	@ 0x74
 8005626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800562a:	89ab      	ldrh	r3, [r5, #12]
 800562c:	0598      	lsls	r0, r3, #22
 800562e:	d4f7      	bmi.n	8005620 <_vfiprintf_r+0x44>
 8005630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005632:	f7ff feaf 	bl	8005394 <__retarget_lock_release_recursive>
 8005636:	e7f3      	b.n	8005620 <_vfiprintf_r+0x44>
 8005638:	2300      	movs	r3, #0
 800563a:	9309      	str	r3, [sp, #36]	@ 0x24
 800563c:	2320      	movs	r3, #32
 800563e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005642:	f8cd 800c 	str.w	r8, [sp, #12]
 8005646:	2330      	movs	r3, #48	@ 0x30
 8005648:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80057f8 <_vfiprintf_r+0x21c>
 800564c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005650:	f04f 0901 	mov.w	r9, #1
 8005654:	4623      	mov	r3, r4
 8005656:	469a      	mov	sl, r3
 8005658:	f813 2b01 	ldrb.w	r2, [r3], #1
 800565c:	b10a      	cbz	r2, 8005662 <_vfiprintf_r+0x86>
 800565e:	2a25      	cmp	r2, #37	@ 0x25
 8005660:	d1f9      	bne.n	8005656 <_vfiprintf_r+0x7a>
 8005662:	ebba 0b04 	subs.w	fp, sl, r4
 8005666:	d00b      	beq.n	8005680 <_vfiprintf_r+0xa4>
 8005668:	465b      	mov	r3, fp
 800566a:	4622      	mov	r2, r4
 800566c:	4629      	mov	r1, r5
 800566e:	4630      	mov	r0, r6
 8005670:	f7ff ffa1 	bl	80055b6 <__sfputs_r>
 8005674:	3001      	adds	r0, #1
 8005676:	f000 80a7 	beq.w	80057c8 <_vfiprintf_r+0x1ec>
 800567a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800567c:	445a      	add	r2, fp
 800567e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005680:	f89a 3000 	ldrb.w	r3, [sl]
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 809f 	beq.w	80057c8 <_vfiprintf_r+0x1ec>
 800568a:	2300      	movs	r3, #0
 800568c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005694:	f10a 0a01 	add.w	sl, sl, #1
 8005698:	9304      	str	r3, [sp, #16]
 800569a:	9307      	str	r3, [sp, #28]
 800569c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80056a2:	4654      	mov	r4, sl
 80056a4:	2205      	movs	r2, #5
 80056a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056aa:	4853      	ldr	r0, [pc, #332]	@ (80057f8 <_vfiprintf_r+0x21c>)
 80056ac:	f7fa fd98 	bl	80001e0 <memchr>
 80056b0:	9a04      	ldr	r2, [sp, #16]
 80056b2:	b9d8      	cbnz	r0, 80056ec <_vfiprintf_r+0x110>
 80056b4:	06d1      	lsls	r1, r2, #27
 80056b6:	bf44      	itt	mi
 80056b8:	2320      	movmi	r3, #32
 80056ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056be:	0713      	lsls	r3, r2, #28
 80056c0:	bf44      	itt	mi
 80056c2:	232b      	movmi	r3, #43	@ 0x2b
 80056c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056c8:	f89a 3000 	ldrb.w	r3, [sl]
 80056cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80056ce:	d015      	beq.n	80056fc <_vfiprintf_r+0x120>
 80056d0:	9a07      	ldr	r2, [sp, #28]
 80056d2:	4654      	mov	r4, sl
 80056d4:	2000      	movs	r0, #0
 80056d6:	f04f 0c0a 	mov.w	ip, #10
 80056da:	4621      	mov	r1, r4
 80056dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056e0:	3b30      	subs	r3, #48	@ 0x30
 80056e2:	2b09      	cmp	r3, #9
 80056e4:	d94b      	bls.n	800577e <_vfiprintf_r+0x1a2>
 80056e6:	b1b0      	cbz	r0, 8005716 <_vfiprintf_r+0x13a>
 80056e8:	9207      	str	r2, [sp, #28]
 80056ea:	e014      	b.n	8005716 <_vfiprintf_r+0x13a>
 80056ec:	eba0 0308 	sub.w	r3, r0, r8
 80056f0:	fa09 f303 	lsl.w	r3, r9, r3
 80056f4:	4313      	orrs	r3, r2
 80056f6:	9304      	str	r3, [sp, #16]
 80056f8:	46a2      	mov	sl, r4
 80056fa:	e7d2      	b.n	80056a2 <_vfiprintf_r+0xc6>
 80056fc:	9b03      	ldr	r3, [sp, #12]
 80056fe:	1d19      	adds	r1, r3, #4
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	9103      	str	r1, [sp, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	bfbb      	ittet	lt
 8005708:	425b      	neglt	r3, r3
 800570a:	f042 0202 	orrlt.w	r2, r2, #2
 800570e:	9307      	strge	r3, [sp, #28]
 8005710:	9307      	strlt	r3, [sp, #28]
 8005712:	bfb8      	it	lt
 8005714:	9204      	strlt	r2, [sp, #16]
 8005716:	7823      	ldrb	r3, [r4, #0]
 8005718:	2b2e      	cmp	r3, #46	@ 0x2e
 800571a:	d10a      	bne.n	8005732 <_vfiprintf_r+0x156>
 800571c:	7863      	ldrb	r3, [r4, #1]
 800571e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005720:	d132      	bne.n	8005788 <_vfiprintf_r+0x1ac>
 8005722:	9b03      	ldr	r3, [sp, #12]
 8005724:	1d1a      	adds	r2, r3, #4
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	9203      	str	r2, [sp, #12]
 800572a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800572e:	3402      	adds	r4, #2
 8005730:	9305      	str	r3, [sp, #20]
 8005732:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005808 <_vfiprintf_r+0x22c>
 8005736:	7821      	ldrb	r1, [r4, #0]
 8005738:	2203      	movs	r2, #3
 800573a:	4650      	mov	r0, sl
 800573c:	f7fa fd50 	bl	80001e0 <memchr>
 8005740:	b138      	cbz	r0, 8005752 <_vfiprintf_r+0x176>
 8005742:	9b04      	ldr	r3, [sp, #16]
 8005744:	eba0 000a 	sub.w	r0, r0, sl
 8005748:	2240      	movs	r2, #64	@ 0x40
 800574a:	4082      	lsls	r2, r0
 800574c:	4313      	orrs	r3, r2
 800574e:	3401      	adds	r4, #1
 8005750:	9304      	str	r3, [sp, #16]
 8005752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005756:	4829      	ldr	r0, [pc, #164]	@ (80057fc <_vfiprintf_r+0x220>)
 8005758:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800575c:	2206      	movs	r2, #6
 800575e:	f7fa fd3f 	bl	80001e0 <memchr>
 8005762:	2800      	cmp	r0, #0
 8005764:	d03f      	beq.n	80057e6 <_vfiprintf_r+0x20a>
 8005766:	4b26      	ldr	r3, [pc, #152]	@ (8005800 <_vfiprintf_r+0x224>)
 8005768:	bb1b      	cbnz	r3, 80057b2 <_vfiprintf_r+0x1d6>
 800576a:	9b03      	ldr	r3, [sp, #12]
 800576c:	3307      	adds	r3, #7
 800576e:	f023 0307 	bic.w	r3, r3, #7
 8005772:	3308      	adds	r3, #8
 8005774:	9303      	str	r3, [sp, #12]
 8005776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005778:	443b      	add	r3, r7
 800577a:	9309      	str	r3, [sp, #36]	@ 0x24
 800577c:	e76a      	b.n	8005654 <_vfiprintf_r+0x78>
 800577e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005782:	460c      	mov	r4, r1
 8005784:	2001      	movs	r0, #1
 8005786:	e7a8      	b.n	80056da <_vfiprintf_r+0xfe>
 8005788:	2300      	movs	r3, #0
 800578a:	3401      	adds	r4, #1
 800578c:	9305      	str	r3, [sp, #20]
 800578e:	4619      	mov	r1, r3
 8005790:	f04f 0c0a 	mov.w	ip, #10
 8005794:	4620      	mov	r0, r4
 8005796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800579a:	3a30      	subs	r2, #48	@ 0x30
 800579c:	2a09      	cmp	r2, #9
 800579e:	d903      	bls.n	80057a8 <_vfiprintf_r+0x1cc>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0c6      	beq.n	8005732 <_vfiprintf_r+0x156>
 80057a4:	9105      	str	r1, [sp, #20]
 80057a6:	e7c4      	b.n	8005732 <_vfiprintf_r+0x156>
 80057a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80057ac:	4604      	mov	r4, r0
 80057ae:	2301      	movs	r3, #1
 80057b0:	e7f0      	b.n	8005794 <_vfiprintf_r+0x1b8>
 80057b2:	ab03      	add	r3, sp, #12
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	462a      	mov	r2, r5
 80057b8:	4b12      	ldr	r3, [pc, #72]	@ (8005804 <_vfiprintf_r+0x228>)
 80057ba:	a904      	add	r1, sp, #16
 80057bc:	4630      	mov	r0, r6
 80057be:	f3af 8000 	nop.w
 80057c2:	4607      	mov	r7, r0
 80057c4:	1c78      	adds	r0, r7, #1
 80057c6:	d1d6      	bne.n	8005776 <_vfiprintf_r+0x19a>
 80057c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057ca:	07d9      	lsls	r1, r3, #31
 80057cc:	d405      	bmi.n	80057da <_vfiprintf_r+0x1fe>
 80057ce:	89ab      	ldrh	r3, [r5, #12]
 80057d0:	059a      	lsls	r2, r3, #22
 80057d2:	d402      	bmi.n	80057da <_vfiprintf_r+0x1fe>
 80057d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057d6:	f7ff fddd 	bl	8005394 <__retarget_lock_release_recursive>
 80057da:	89ab      	ldrh	r3, [r5, #12]
 80057dc:	065b      	lsls	r3, r3, #25
 80057de:	f53f af1f 	bmi.w	8005620 <_vfiprintf_r+0x44>
 80057e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057e4:	e71e      	b.n	8005624 <_vfiprintf_r+0x48>
 80057e6:	ab03      	add	r3, sp, #12
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	462a      	mov	r2, r5
 80057ec:	4b05      	ldr	r3, [pc, #20]	@ (8005804 <_vfiprintf_r+0x228>)
 80057ee:	a904      	add	r1, sp, #16
 80057f0:	4630      	mov	r0, r6
 80057f2:	f000 f879 	bl	80058e8 <_printf_i>
 80057f6:	e7e4      	b.n	80057c2 <_vfiprintf_r+0x1e6>
 80057f8:	08006204 	.word	0x08006204
 80057fc:	0800620e 	.word	0x0800620e
 8005800:	00000000 	.word	0x00000000
 8005804:	080055b7 	.word	0x080055b7
 8005808:	0800620a 	.word	0x0800620a

0800580c <_printf_common>:
 800580c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005810:	4616      	mov	r6, r2
 8005812:	4698      	mov	r8, r3
 8005814:	688a      	ldr	r2, [r1, #8]
 8005816:	690b      	ldr	r3, [r1, #16]
 8005818:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800581c:	4293      	cmp	r3, r2
 800581e:	bfb8      	it	lt
 8005820:	4613      	movlt	r3, r2
 8005822:	6033      	str	r3, [r6, #0]
 8005824:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005828:	4607      	mov	r7, r0
 800582a:	460c      	mov	r4, r1
 800582c:	b10a      	cbz	r2, 8005832 <_printf_common+0x26>
 800582e:	3301      	adds	r3, #1
 8005830:	6033      	str	r3, [r6, #0]
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	0699      	lsls	r1, r3, #26
 8005836:	bf42      	ittt	mi
 8005838:	6833      	ldrmi	r3, [r6, #0]
 800583a:	3302      	addmi	r3, #2
 800583c:	6033      	strmi	r3, [r6, #0]
 800583e:	6825      	ldr	r5, [r4, #0]
 8005840:	f015 0506 	ands.w	r5, r5, #6
 8005844:	d106      	bne.n	8005854 <_printf_common+0x48>
 8005846:	f104 0a19 	add.w	sl, r4, #25
 800584a:	68e3      	ldr	r3, [r4, #12]
 800584c:	6832      	ldr	r2, [r6, #0]
 800584e:	1a9b      	subs	r3, r3, r2
 8005850:	42ab      	cmp	r3, r5
 8005852:	dc26      	bgt.n	80058a2 <_printf_common+0x96>
 8005854:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005858:	6822      	ldr	r2, [r4, #0]
 800585a:	3b00      	subs	r3, #0
 800585c:	bf18      	it	ne
 800585e:	2301      	movne	r3, #1
 8005860:	0692      	lsls	r2, r2, #26
 8005862:	d42b      	bmi.n	80058bc <_printf_common+0xb0>
 8005864:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005868:	4641      	mov	r1, r8
 800586a:	4638      	mov	r0, r7
 800586c:	47c8      	blx	r9
 800586e:	3001      	adds	r0, #1
 8005870:	d01e      	beq.n	80058b0 <_printf_common+0xa4>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	6922      	ldr	r2, [r4, #16]
 8005876:	f003 0306 	and.w	r3, r3, #6
 800587a:	2b04      	cmp	r3, #4
 800587c:	bf02      	ittt	eq
 800587e:	68e5      	ldreq	r5, [r4, #12]
 8005880:	6833      	ldreq	r3, [r6, #0]
 8005882:	1aed      	subeq	r5, r5, r3
 8005884:	68a3      	ldr	r3, [r4, #8]
 8005886:	bf0c      	ite	eq
 8005888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800588c:	2500      	movne	r5, #0
 800588e:	4293      	cmp	r3, r2
 8005890:	bfc4      	itt	gt
 8005892:	1a9b      	subgt	r3, r3, r2
 8005894:	18ed      	addgt	r5, r5, r3
 8005896:	2600      	movs	r6, #0
 8005898:	341a      	adds	r4, #26
 800589a:	42b5      	cmp	r5, r6
 800589c:	d11a      	bne.n	80058d4 <_printf_common+0xc8>
 800589e:	2000      	movs	r0, #0
 80058a0:	e008      	b.n	80058b4 <_printf_common+0xa8>
 80058a2:	2301      	movs	r3, #1
 80058a4:	4652      	mov	r2, sl
 80058a6:	4641      	mov	r1, r8
 80058a8:	4638      	mov	r0, r7
 80058aa:	47c8      	blx	r9
 80058ac:	3001      	adds	r0, #1
 80058ae:	d103      	bne.n	80058b8 <_printf_common+0xac>
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b8:	3501      	adds	r5, #1
 80058ba:	e7c6      	b.n	800584a <_printf_common+0x3e>
 80058bc:	18e1      	adds	r1, r4, r3
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	2030      	movs	r0, #48	@ 0x30
 80058c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058c6:	4422      	add	r2, r4
 80058c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058d0:	3302      	adds	r3, #2
 80058d2:	e7c7      	b.n	8005864 <_printf_common+0x58>
 80058d4:	2301      	movs	r3, #1
 80058d6:	4622      	mov	r2, r4
 80058d8:	4641      	mov	r1, r8
 80058da:	4638      	mov	r0, r7
 80058dc:	47c8      	blx	r9
 80058de:	3001      	adds	r0, #1
 80058e0:	d0e6      	beq.n	80058b0 <_printf_common+0xa4>
 80058e2:	3601      	adds	r6, #1
 80058e4:	e7d9      	b.n	800589a <_printf_common+0x8e>
	...

080058e8 <_printf_i>:
 80058e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058ec:	7e0f      	ldrb	r7, [r1, #24]
 80058ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058f0:	2f78      	cmp	r7, #120	@ 0x78
 80058f2:	4691      	mov	r9, r2
 80058f4:	4680      	mov	r8, r0
 80058f6:	460c      	mov	r4, r1
 80058f8:	469a      	mov	sl, r3
 80058fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058fe:	d807      	bhi.n	8005910 <_printf_i+0x28>
 8005900:	2f62      	cmp	r7, #98	@ 0x62
 8005902:	d80a      	bhi.n	800591a <_printf_i+0x32>
 8005904:	2f00      	cmp	r7, #0
 8005906:	f000 80d1 	beq.w	8005aac <_printf_i+0x1c4>
 800590a:	2f58      	cmp	r7, #88	@ 0x58
 800590c:	f000 80b8 	beq.w	8005a80 <_printf_i+0x198>
 8005910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005914:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005918:	e03a      	b.n	8005990 <_printf_i+0xa8>
 800591a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800591e:	2b15      	cmp	r3, #21
 8005920:	d8f6      	bhi.n	8005910 <_printf_i+0x28>
 8005922:	a101      	add	r1, pc, #4	@ (adr r1, 8005928 <_printf_i+0x40>)
 8005924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005928:	08005981 	.word	0x08005981
 800592c:	08005995 	.word	0x08005995
 8005930:	08005911 	.word	0x08005911
 8005934:	08005911 	.word	0x08005911
 8005938:	08005911 	.word	0x08005911
 800593c:	08005911 	.word	0x08005911
 8005940:	08005995 	.word	0x08005995
 8005944:	08005911 	.word	0x08005911
 8005948:	08005911 	.word	0x08005911
 800594c:	08005911 	.word	0x08005911
 8005950:	08005911 	.word	0x08005911
 8005954:	08005a93 	.word	0x08005a93
 8005958:	080059bf 	.word	0x080059bf
 800595c:	08005a4d 	.word	0x08005a4d
 8005960:	08005911 	.word	0x08005911
 8005964:	08005911 	.word	0x08005911
 8005968:	08005ab5 	.word	0x08005ab5
 800596c:	08005911 	.word	0x08005911
 8005970:	080059bf 	.word	0x080059bf
 8005974:	08005911 	.word	0x08005911
 8005978:	08005911 	.word	0x08005911
 800597c:	08005a55 	.word	0x08005a55
 8005980:	6833      	ldr	r3, [r6, #0]
 8005982:	1d1a      	adds	r2, r3, #4
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6032      	str	r2, [r6, #0]
 8005988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800598c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005990:	2301      	movs	r3, #1
 8005992:	e09c      	b.n	8005ace <_printf_i+0x1e6>
 8005994:	6833      	ldr	r3, [r6, #0]
 8005996:	6820      	ldr	r0, [r4, #0]
 8005998:	1d19      	adds	r1, r3, #4
 800599a:	6031      	str	r1, [r6, #0]
 800599c:	0606      	lsls	r6, r0, #24
 800599e:	d501      	bpl.n	80059a4 <_printf_i+0xbc>
 80059a0:	681d      	ldr	r5, [r3, #0]
 80059a2:	e003      	b.n	80059ac <_printf_i+0xc4>
 80059a4:	0645      	lsls	r5, r0, #25
 80059a6:	d5fb      	bpl.n	80059a0 <_printf_i+0xb8>
 80059a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059ac:	2d00      	cmp	r5, #0
 80059ae:	da03      	bge.n	80059b8 <_printf_i+0xd0>
 80059b0:	232d      	movs	r3, #45	@ 0x2d
 80059b2:	426d      	negs	r5, r5
 80059b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059b8:	4858      	ldr	r0, [pc, #352]	@ (8005b1c <_printf_i+0x234>)
 80059ba:	230a      	movs	r3, #10
 80059bc:	e011      	b.n	80059e2 <_printf_i+0xfa>
 80059be:	6821      	ldr	r1, [r4, #0]
 80059c0:	6833      	ldr	r3, [r6, #0]
 80059c2:	0608      	lsls	r0, r1, #24
 80059c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80059c8:	d402      	bmi.n	80059d0 <_printf_i+0xe8>
 80059ca:	0649      	lsls	r1, r1, #25
 80059cc:	bf48      	it	mi
 80059ce:	b2ad      	uxthmi	r5, r5
 80059d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80059d2:	4852      	ldr	r0, [pc, #328]	@ (8005b1c <_printf_i+0x234>)
 80059d4:	6033      	str	r3, [r6, #0]
 80059d6:	bf14      	ite	ne
 80059d8:	230a      	movne	r3, #10
 80059da:	2308      	moveq	r3, #8
 80059dc:	2100      	movs	r1, #0
 80059de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059e2:	6866      	ldr	r6, [r4, #4]
 80059e4:	60a6      	str	r6, [r4, #8]
 80059e6:	2e00      	cmp	r6, #0
 80059e8:	db05      	blt.n	80059f6 <_printf_i+0x10e>
 80059ea:	6821      	ldr	r1, [r4, #0]
 80059ec:	432e      	orrs	r6, r5
 80059ee:	f021 0104 	bic.w	r1, r1, #4
 80059f2:	6021      	str	r1, [r4, #0]
 80059f4:	d04b      	beq.n	8005a8e <_printf_i+0x1a6>
 80059f6:	4616      	mov	r6, r2
 80059f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80059fc:	fb03 5711 	mls	r7, r3, r1, r5
 8005a00:	5dc7      	ldrb	r7, [r0, r7]
 8005a02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a06:	462f      	mov	r7, r5
 8005a08:	42bb      	cmp	r3, r7
 8005a0a:	460d      	mov	r5, r1
 8005a0c:	d9f4      	bls.n	80059f8 <_printf_i+0x110>
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d10b      	bne.n	8005a2a <_printf_i+0x142>
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	07df      	lsls	r7, r3, #31
 8005a16:	d508      	bpl.n	8005a2a <_printf_i+0x142>
 8005a18:	6923      	ldr	r3, [r4, #16]
 8005a1a:	6861      	ldr	r1, [r4, #4]
 8005a1c:	4299      	cmp	r1, r3
 8005a1e:	bfde      	ittt	le
 8005a20:	2330      	movle	r3, #48	@ 0x30
 8005a22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a26:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005a2a:	1b92      	subs	r2, r2, r6
 8005a2c:	6122      	str	r2, [r4, #16]
 8005a2e:	f8cd a000 	str.w	sl, [sp]
 8005a32:	464b      	mov	r3, r9
 8005a34:	aa03      	add	r2, sp, #12
 8005a36:	4621      	mov	r1, r4
 8005a38:	4640      	mov	r0, r8
 8005a3a:	f7ff fee7 	bl	800580c <_printf_common>
 8005a3e:	3001      	adds	r0, #1
 8005a40:	d14a      	bne.n	8005ad8 <_printf_i+0x1f0>
 8005a42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a46:	b004      	add	sp, #16
 8005a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	f043 0320 	orr.w	r3, r3, #32
 8005a52:	6023      	str	r3, [r4, #0]
 8005a54:	4832      	ldr	r0, [pc, #200]	@ (8005b20 <_printf_i+0x238>)
 8005a56:	2778      	movs	r7, #120	@ 0x78
 8005a58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	6831      	ldr	r1, [r6, #0]
 8005a60:	061f      	lsls	r7, r3, #24
 8005a62:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a66:	d402      	bmi.n	8005a6e <_printf_i+0x186>
 8005a68:	065f      	lsls	r7, r3, #25
 8005a6a:	bf48      	it	mi
 8005a6c:	b2ad      	uxthmi	r5, r5
 8005a6e:	6031      	str	r1, [r6, #0]
 8005a70:	07d9      	lsls	r1, r3, #31
 8005a72:	bf44      	itt	mi
 8005a74:	f043 0320 	orrmi.w	r3, r3, #32
 8005a78:	6023      	strmi	r3, [r4, #0]
 8005a7a:	b11d      	cbz	r5, 8005a84 <_printf_i+0x19c>
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	e7ad      	b.n	80059dc <_printf_i+0xf4>
 8005a80:	4826      	ldr	r0, [pc, #152]	@ (8005b1c <_printf_i+0x234>)
 8005a82:	e7e9      	b.n	8005a58 <_printf_i+0x170>
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	f023 0320 	bic.w	r3, r3, #32
 8005a8a:	6023      	str	r3, [r4, #0]
 8005a8c:	e7f6      	b.n	8005a7c <_printf_i+0x194>
 8005a8e:	4616      	mov	r6, r2
 8005a90:	e7bd      	b.n	8005a0e <_printf_i+0x126>
 8005a92:	6833      	ldr	r3, [r6, #0]
 8005a94:	6825      	ldr	r5, [r4, #0]
 8005a96:	6961      	ldr	r1, [r4, #20]
 8005a98:	1d18      	adds	r0, r3, #4
 8005a9a:	6030      	str	r0, [r6, #0]
 8005a9c:	062e      	lsls	r6, r5, #24
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	d501      	bpl.n	8005aa6 <_printf_i+0x1be>
 8005aa2:	6019      	str	r1, [r3, #0]
 8005aa4:	e002      	b.n	8005aac <_printf_i+0x1c4>
 8005aa6:	0668      	lsls	r0, r5, #25
 8005aa8:	d5fb      	bpl.n	8005aa2 <_printf_i+0x1ba>
 8005aaa:	8019      	strh	r1, [r3, #0]
 8005aac:	2300      	movs	r3, #0
 8005aae:	6123      	str	r3, [r4, #16]
 8005ab0:	4616      	mov	r6, r2
 8005ab2:	e7bc      	b.n	8005a2e <_printf_i+0x146>
 8005ab4:	6833      	ldr	r3, [r6, #0]
 8005ab6:	1d1a      	adds	r2, r3, #4
 8005ab8:	6032      	str	r2, [r6, #0]
 8005aba:	681e      	ldr	r6, [r3, #0]
 8005abc:	6862      	ldr	r2, [r4, #4]
 8005abe:	2100      	movs	r1, #0
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	f7fa fb8d 	bl	80001e0 <memchr>
 8005ac6:	b108      	cbz	r0, 8005acc <_printf_i+0x1e4>
 8005ac8:	1b80      	subs	r0, r0, r6
 8005aca:	6060      	str	r0, [r4, #4]
 8005acc:	6863      	ldr	r3, [r4, #4]
 8005ace:	6123      	str	r3, [r4, #16]
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ad6:	e7aa      	b.n	8005a2e <_printf_i+0x146>
 8005ad8:	6923      	ldr	r3, [r4, #16]
 8005ada:	4632      	mov	r2, r6
 8005adc:	4649      	mov	r1, r9
 8005ade:	4640      	mov	r0, r8
 8005ae0:	47d0      	blx	sl
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	d0ad      	beq.n	8005a42 <_printf_i+0x15a>
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	079b      	lsls	r3, r3, #30
 8005aea:	d413      	bmi.n	8005b14 <_printf_i+0x22c>
 8005aec:	68e0      	ldr	r0, [r4, #12]
 8005aee:	9b03      	ldr	r3, [sp, #12]
 8005af0:	4298      	cmp	r0, r3
 8005af2:	bfb8      	it	lt
 8005af4:	4618      	movlt	r0, r3
 8005af6:	e7a6      	b.n	8005a46 <_printf_i+0x15e>
 8005af8:	2301      	movs	r3, #1
 8005afa:	4632      	mov	r2, r6
 8005afc:	4649      	mov	r1, r9
 8005afe:	4640      	mov	r0, r8
 8005b00:	47d0      	blx	sl
 8005b02:	3001      	adds	r0, #1
 8005b04:	d09d      	beq.n	8005a42 <_printf_i+0x15a>
 8005b06:	3501      	adds	r5, #1
 8005b08:	68e3      	ldr	r3, [r4, #12]
 8005b0a:	9903      	ldr	r1, [sp, #12]
 8005b0c:	1a5b      	subs	r3, r3, r1
 8005b0e:	42ab      	cmp	r3, r5
 8005b10:	dcf2      	bgt.n	8005af8 <_printf_i+0x210>
 8005b12:	e7eb      	b.n	8005aec <_printf_i+0x204>
 8005b14:	2500      	movs	r5, #0
 8005b16:	f104 0619 	add.w	r6, r4, #25
 8005b1a:	e7f5      	b.n	8005b08 <_printf_i+0x220>
 8005b1c:	08006215 	.word	0x08006215
 8005b20:	08006226 	.word	0x08006226

08005b24 <__sflush_r>:
 8005b24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2c:	0716      	lsls	r6, r2, #28
 8005b2e:	4605      	mov	r5, r0
 8005b30:	460c      	mov	r4, r1
 8005b32:	d454      	bmi.n	8005bde <__sflush_r+0xba>
 8005b34:	684b      	ldr	r3, [r1, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	dc02      	bgt.n	8005b40 <__sflush_r+0x1c>
 8005b3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	dd48      	ble.n	8005bd2 <__sflush_r+0xae>
 8005b40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b42:	2e00      	cmp	r6, #0
 8005b44:	d045      	beq.n	8005bd2 <__sflush_r+0xae>
 8005b46:	2300      	movs	r3, #0
 8005b48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005b4c:	682f      	ldr	r7, [r5, #0]
 8005b4e:	6a21      	ldr	r1, [r4, #32]
 8005b50:	602b      	str	r3, [r5, #0]
 8005b52:	d030      	beq.n	8005bb6 <__sflush_r+0x92>
 8005b54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	0759      	lsls	r1, r3, #29
 8005b5a:	d505      	bpl.n	8005b68 <__sflush_r+0x44>
 8005b5c:	6863      	ldr	r3, [r4, #4]
 8005b5e:	1ad2      	subs	r2, r2, r3
 8005b60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b62:	b10b      	cbz	r3, 8005b68 <__sflush_r+0x44>
 8005b64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b66:	1ad2      	subs	r2, r2, r3
 8005b68:	2300      	movs	r3, #0
 8005b6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b6c:	6a21      	ldr	r1, [r4, #32]
 8005b6e:	4628      	mov	r0, r5
 8005b70:	47b0      	blx	r6
 8005b72:	1c43      	adds	r3, r0, #1
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	d106      	bne.n	8005b86 <__sflush_r+0x62>
 8005b78:	6829      	ldr	r1, [r5, #0]
 8005b7a:	291d      	cmp	r1, #29
 8005b7c:	d82b      	bhi.n	8005bd6 <__sflush_r+0xb2>
 8005b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8005c28 <__sflush_r+0x104>)
 8005b80:	40ca      	lsrs	r2, r1
 8005b82:	07d6      	lsls	r6, r2, #31
 8005b84:	d527      	bpl.n	8005bd6 <__sflush_r+0xb2>
 8005b86:	2200      	movs	r2, #0
 8005b88:	6062      	str	r2, [r4, #4]
 8005b8a:	04d9      	lsls	r1, r3, #19
 8005b8c:	6922      	ldr	r2, [r4, #16]
 8005b8e:	6022      	str	r2, [r4, #0]
 8005b90:	d504      	bpl.n	8005b9c <__sflush_r+0x78>
 8005b92:	1c42      	adds	r2, r0, #1
 8005b94:	d101      	bne.n	8005b9a <__sflush_r+0x76>
 8005b96:	682b      	ldr	r3, [r5, #0]
 8005b98:	b903      	cbnz	r3, 8005b9c <__sflush_r+0x78>
 8005b9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005b9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b9e:	602f      	str	r7, [r5, #0]
 8005ba0:	b1b9      	cbz	r1, 8005bd2 <__sflush_r+0xae>
 8005ba2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ba6:	4299      	cmp	r1, r3
 8005ba8:	d002      	beq.n	8005bb0 <__sflush_r+0x8c>
 8005baa:	4628      	mov	r0, r5
 8005bac:	f7ff fbf4 	bl	8005398 <_free_r>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bb4:	e00d      	b.n	8005bd2 <__sflush_r+0xae>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	4628      	mov	r0, r5
 8005bba:	47b0      	blx	r6
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	1c50      	adds	r0, r2, #1
 8005bc0:	d1c9      	bne.n	8005b56 <__sflush_r+0x32>
 8005bc2:	682b      	ldr	r3, [r5, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0c6      	beq.n	8005b56 <__sflush_r+0x32>
 8005bc8:	2b1d      	cmp	r3, #29
 8005bca:	d001      	beq.n	8005bd0 <__sflush_r+0xac>
 8005bcc:	2b16      	cmp	r3, #22
 8005bce:	d11e      	bne.n	8005c0e <__sflush_r+0xea>
 8005bd0:	602f      	str	r7, [r5, #0]
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	e022      	b.n	8005c1c <__sflush_r+0xf8>
 8005bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bda:	b21b      	sxth	r3, r3
 8005bdc:	e01b      	b.n	8005c16 <__sflush_r+0xf2>
 8005bde:	690f      	ldr	r7, [r1, #16]
 8005be0:	2f00      	cmp	r7, #0
 8005be2:	d0f6      	beq.n	8005bd2 <__sflush_r+0xae>
 8005be4:	0793      	lsls	r3, r2, #30
 8005be6:	680e      	ldr	r6, [r1, #0]
 8005be8:	bf08      	it	eq
 8005bea:	694b      	ldreq	r3, [r1, #20]
 8005bec:	600f      	str	r7, [r1, #0]
 8005bee:	bf18      	it	ne
 8005bf0:	2300      	movne	r3, #0
 8005bf2:	eba6 0807 	sub.w	r8, r6, r7
 8005bf6:	608b      	str	r3, [r1, #8]
 8005bf8:	f1b8 0f00 	cmp.w	r8, #0
 8005bfc:	dde9      	ble.n	8005bd2 <__sflush_r+0xae>
 8005bfe:	6a21      	ldr	r1, [r4, #32]
 8005c00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c02:	4643      	mov	r3, r8
 8005c04:	463a      	mov	r2, r7
 8005c06:	4628      	mov	r0, r5
 8005c08:	47b0      	blx	r6
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	dc08      	bgt.n	8005c20 <__sflush_r+0xfc>
 8005c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c16:	81a3      	strh	r3, [r4, #12]
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c20:	4407      	add	r7, r0
 8005c22:	eba8 0800 	sub.w	r8, r8, r0
 8005c26:	e7e7      	b.n	8005bf8 <__sflush_r+0xd4>
 8005c28:	20400001 	.word	0x20400001

08005c2c <_fflush_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	690b      	ldr	r3, [r1, #16]
 8005c30:	4605      	mov	r5, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	b913      	cbnz	r3, 8005c3c <_fflush_r+0x10>
 8005c36:	2500      	movs	r5, #0
 8005c38:	4628      	mov	r0, r5
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
 8005c3c:	b118      	cbz	r0, 8005c46 <_fflush_r+0x1a>
 8005c3e:	6a03      	ldr	r3, [r0, #32]
 8005c40:	b90b      	cbnz	r3, 8005c46 <_fflush_r+0x1a>
 8005c42:	f7ff f9af 	bl	8004fa4 <__sinit>
 8005c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0f3      	beq.n	8005c36 <_fflush_r+0xa>
 8005c4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c50:	07d0      	lsls	r0, r2, #31
 8005c52:	d404      	bmi.n	8005c5e <_fflush_r+0x32>
 8005c54:	0599      	lsls	r1, r3, #22
 8005c56:	d402      	bmi.n	8005c5e <_fflush_r+0x32>
 8005c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c5a:	f7ff fb9a 	bl	8005392 <__retarget_lock_acquire_recursive>
 8005c5e:	4628      	mov	r0, r5
 8005c60:	4621      	mov	r1, r4
 8005c62:	f7ff ff5f 	bl	8005b24 <__sflush_r>
 8005c66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c68:	07da      	lsls	r2, r3, #31
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	d4e4      	bmi.n	8005c38 <_fflush_r+0xc>
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	059b      	lsls	r3, r3, #22
 8005c72:	d4e1      	bmi.n	8005c38 <_fflush_r+0xc>
 8005c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c76:	f7ff fb8d 	bl	8005394 <__retarget_lock_release_recursive>
 8005c7a:	e7dd      	b.n	8005c38 <_fflush_r+0xc>

08005c7c <__swhatbuf_r>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	460c      	mov	r4, r1
 8005c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c84:	2900      	cmp	r1, #0
 8005c86:	b096      	sub	sp, #88	@ 0x58
 8005c88:	4615      	mov	r5, r2
 8005c8a:	461e      	mov	r6, r3
 8005c8c:	da0d      	bge.n	8005caa <__swhatbuf_r+0x2e>
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005c94:	f04f 0100 	mov.w	r1, #0
 8005c98:	bf14      	ite	ne
 8005c9a:	2340      	movne	r3, #64	@ 0x40
 8005c9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	6031      	str	r1, [r6, #0]
 8005ca4:	602b      	str	r3, [r5, #0]
 8005ca6:	b016      	add	sp, #88	@ 0x58
 8005ca8:	bd70      	pop	{r4, r5, r6, pc}
 8005caa:	466a      	mov	r2, sp
 8005cac:	f000 f848 	bl	8005d40 <_fstat_r>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	dbec      	blt.n	8005c8e <__swhatbuf_r+0x12>
 8005cb4:	9901      	ldr	r1, [sp, #4]
 8005cb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005cba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005cbe:	4259      	negs	r1, r3
 8005cc0:	4159      	adcs	r1, r3
 8005cc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cc6:	e7eb      	b.n	8005ca0 <__swhatbuf_r+0x24>

08005cc8 <__smakebuf_r>:
 8005cc8:	898b      	ldrh	r3, [r1, #12]
 8005cca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ccc:	079d      	lsls	r5, r3, #30
 8005cce:	4606      	mov	r6, r0
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	d507      	bpl.n	8005ce4 <__smakebuf_r+0x1c>
 8005cd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	6123      	str	r3, [r4, #16]
 8005cdc:	2301      	movs	r3, #1
 8005cde:	6163      	str	r3, [r4, #20]
 8005ce0:	b003      	add	sp, #12
 8005ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ce4:	ab01      	add	r3, sp, #4
 8005ce6:	466a      	mov	r2, sp
 8005ce8:	f7ff ffc8 	bl	8005c7c <__swhatbuf_r>
 8005cec:	9f00      	ldr	r7, [sp, #0]
 8005cee:	4605      	mov	r5, r0
 8005cf0:	4639      	mov	r1, r7
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	f7ff fbbc 	bl	8005470 <_malloc_r>
 8005cf8:	b948      	cbnz	r0, 8005d0e <__smakebuf_r+0x46>
 8005cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cfe:	059a      	lsls	r2, r3, #22
 8005d00:	d4ee      	bmi.n	8005ce0 <__smakebuf_r+0x18>
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	f043 0302 	orr.w	r3, r3, #2
 8005d0a:	81a3      	strh	r3, [r4, #12]
 8005d0c:	e7e2      	b.n	8005cd4 <__smakebuf_r+0xc>
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	6020      	str	r0, [r4, #0]
 8005d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d16:	81a3      	strh	r3, [r4, #12]
 8005d18:	9b01      	ldr	r3, [sp, #4]
 8005d1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d1e:	b15b      	cbz	r3, 8005d38 <__smakebuf_r+0x70>
 8005d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d24:	4630      	mov	r0, r6
 8005d26:	f000 f81d 	bl	8005d64 <_isatty_r>
 8005d2a:	b128      	cbz	r0, 8005d38 <__smakebuf_r+0x70>
 8005d2c:	89a3      	ldrh	r3, [r4, #12]
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	81a3      	strh	r3, [r4, #12]
 8005d38:	89a3      	ldrh	r3, [r4, #12]
 8005d3a:	431d      	orrs	r5, r3
 8005d3c:	81a5      	strh	r5, [r4, #12]
 8005d3e:	e7cf      	b.n	8005ce0 <__smakebuf_r+0x18>

08005d40 <_fstat_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4d07      	ldr	r5, [pc, #28]	@ (8005d60 <_fstat_r+0x20>)
 8005d44:	2300      	movs	r3, #0
 8005d46:	4604      	mov	r4, r0
 8005d48:	4608      	mov	r0, r1
 8005d4a:	4611      	mov	r1, r2
 8005d4c:	602b      	str	r3, [r5, #0]
 8005d4e:	f7fa ff04 	bl	8000b5a <_fstat>
 8005d52:	1c43      	adds	r3, r0, #1
 8005d54:	d102      	bne.n	8005d5c <_fstat_r+0x1c>
 8005d56:	682b      	ldr	r3, [r5, #0]
 8005d58:	b103      	cbz	r3, 8005d5c <_fstat_r+0x1c>
 8005d5a:	6023      	str	r3, [r4, #0]
 8005d5c:	bd38      	pop	{r3, r4, r5, pc}
 8005d5e:	bf00      	nop
 8005d60:	200011f4 	.word	0x200011f4

08005d64 <_isatty_r>:
 8005d64:	b538      	push	{r3, r4, r5, lr}
 8005d66:	4d06      	ldr	r5, [pc, #24]	@ (8005d80 <_isatty_r+0x1c>)
 8005d68:	2300      	movs	r3, #0
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	4608      	mov	r0, r1
 8005d6e:	602b      	str	r3, [r5, #0]
 8005d70:	f7fa fef8 	bl	8000b64 <_isatty>
 8005d74:	1c43      	adds	r3, r0, #1
 8005d76:	d102      	bne.n	8005d7e <_isatty_r+0x1a>
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	b103      	cbz	r3, 8005d7e <_isatty_r+0x1a>
 8005d7c:	6023      	str	r3, [r4, #0]
 8005d7e:	bd38      	pop	{r3, r4, r5, pc}
 8005d80:	200011f4 	.word	0x200011f4

08005d84 <_sbrk_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	4d06      	ldr	r5, [pc, #24]	@ (8005da0 <_sbrk_r+0x1c>)
 8005d88:	2300      	movs	r3, #0
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	602b      	str	r3, [r5, #0]
 8005d90:	f7fa feec 	bl	8000b6c <_sbrk>
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	d102      	bne.n	8005d9e <_sbrk_r+0x1a>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	b103      	cbz	r3, 8005d9e <_sbrk_r+0x1a>
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	200011f4 	.word	0x200011f4

08005da4 <_init>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	bf00      	nop
 8005da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005daa:	bc08      	pop	{r3}
 8005dac:	469e      	mov	lr, r3
 8005dae:	4770      	bx	lr

08005db0 <_fini>:
 8005db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db2:	bf00      	nop
 8005db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db6:	bc08      	pop	{r3}
 8005db8:	469e      	mov	lr, r3
 8005dba:	4770      	bx	lr
